#include "pch.h"
#include "CppUnitTest.h"
#include "SDK.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

#define CHEAT_GEAR_CHECK_OFFSET(targetClass, varName, expectedOffset) \
	Assert::AreEqual(uint32_t(expectedOffset), uint32_t(offsetof(targetClass, varName)), L#targetClass" -> "#varName".")

#define CHEAT_GEAR_CHECK_SIZE(targetClass, expectedSize) \
	Assert::AreEqual(uint32_t(expectedSize), uint32_t(sizeof(targetClass)), L#targetClass" Has a wrong size.")

namespace CheatGearCppUnitTests
{
	TEST_CLASS(CheatGear)
	{
	public:

		// class ACv2_ScenarioZone_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv2_ScenarioZone__Cv2_ScenarioZone_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, StaticMesh, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, DefaultSceneRoot, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, Scenario, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, OwnerSide, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, UnknownData_OO0T, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, CountPlayersAllieds, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, CountPlayersAxis, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, Radius, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, TeamControlled, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, UnknownData_7QZL, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, PointControlAllieds, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, PointControlAxis, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, DefenderSide, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, UnknownData_8ZN4, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, maxPointsControll, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, NameRegion, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, AlliedsStateArray, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, AxisStateArray, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, isDisable, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, UnknownData_8S63, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, HousesSpawns, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, ResourcePost, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, Fabric, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, Res_Wood, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, Res_Stone, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, Res_Food, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, UnknownData_FULO, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, Shkafs, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, KazenniyVehicles, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, Agitator, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, PlayerStarts, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, PlayerTakeLoot, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, IsBattleHere, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, isPRIMARY_point, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, Is_Axes_in, 0x046A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, Is_Allies_in, 0x046B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, Is_Axes_Shturm_now, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, Is_Allies_Shturm_now, 0x046D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, Is_Capture, 0x046E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, UnknownData_COU7, 0x046F);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ScenarioZone_C, SinglePlayer_Bots, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_ScenarioZone_C, 0x0480);
		}

		// class UWP_HalfSunny_C : public UWeatherPreset_C
		TEST_METHOD(BlueprintGeneratedClass__WP_HalfSunny__WP_HalfSunny_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWP_HalfSunny_C, 0x008C);
		}

		// class UMainMenu_CharCustomString_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MainMenu_CharCustomString__MainMenu_CharCustomString_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenu_CharCustomString_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenu_CharCustomString_C, Button_Next, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenu_CharCustomString_C, Button_Previous, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenu_CharCustomString_C, Fon, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenu_CharCustomString_C, TextBlock_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenu_CharCustomString_C, Text, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenu_CharCustomString_C, ClickNext, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenu_CharCustomString_C, ClickPrevious, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenu_CharCustomString_C, 0x0260);
		}

		// class UHandlerComponentFactory : public UObject
		TEST_METHOD(Class__PacketHandler__HandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHandlerComponentFactory, 0x0028);
		}

		// class Aconcrete_broken_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__concrete_broken__concrete_broken_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aconcrete_broken_C, 0x0378);
		}

		// class UCommandWidgetBase_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CommandWidgetBase__CommandWidgetBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandWidgetBase_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandWidgetBase_C, Show, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandWidgetBase_C, TalkString, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandWidgetBase_C, TalkString_20, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandWidgetBase_C, TalkString_48, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandWidgetBase_C, TalkString_76, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandWidgetBase_C, VerticalBox_77, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandWidgetBase_C, VerticalBox_Message, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandWidgetBase_C, HudRef, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCommandWidgetBase_C, 0x0248);
		}

		// class A_SOLDIER_EMPTY_Actor_Survival_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass___SOLDIER_EMPTY_Actor_Survival___SOLDIER_EMPTY_Actor_Survival_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::A_SOLDIER_EMPTY_Actor_Survival_C, Face, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_SOLDIER_EMPTY_Actor_Survival_C, Custom_Stupni, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_SOLDIER_EMPTY_Actor_Survival_C, Custom_Nogi, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_SOLDIER_EMPTY_Actor_Survival_C, Custom_Torso, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_SOLDIER_EMPTY_Actor_Survival_C, Custom_Hands, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_SOLDIER_EMPTY_Actor_Survival_C, Helmet, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_SOLDIER_EMPTY_Actor_Survival_C, Weapon, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_SOLDIER_EMPTY_Actor_Survival_C, SoldierMeshHead, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_SOLDIER_EMPTY_Actor_Survival_C, 0x03A8);
		}

		// class UM8_Front_C : public UVehicleWheel
		TEST_METHOD(BlueprintGeneratedClass__M8_Front__M8_Front_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UM8_Front_C, 0x00F0);
		}

		// class AFow_BOT_War_USA_C : public AFow_BOT_C
		TEST_METHOD(BlueprintGeneratedClass__Fow_BOT_War_USA__Fow_BOT_War_USA_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFow_BOT_War_USA_C, 0x0B20);
		}

		// class AStanokSverlovka_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__StanokSverlovka_Static_BP__StanokSverlovka_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStanokSverlovka_Static_BP_C, 0x0370);
		}

		// class UIpConnection : public UNetConnection
		TEST_METHOD(Class__OnlineSubsystemUtils__IpConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_OM4P, 0x33660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpConnection, 0x33680);
		}

		// class UIpNetDriver : public UNetDriver
		TEST_METHOD(Class__OnlineSubsystemUtils__IpNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_KXLJ, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxPortCountToTry, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_P6QZ, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketReceiveBufferBytes, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketSendBufferBytes, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketReceiveBufferBytes, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketSendBufferBytes, 0x0484);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpNetDriver, 0x0488);
		}

		// class UAchievementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementBlueprintLibrary, 0x0028);
		}

		// class UAchievementQueryCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, UnknownData_WSRM, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementQueryCallbackProxy, 0x0060);
		}

		// class UAchievementWriteCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementWriteCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, UnknownData_W6O2, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementWriteCallbackProxy, 0x0078);
		}

		// class UConnectionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ConnectionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, UnknownData_LGB5, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConnectionCallbackProxy, 0x00A0);
		}

		// class UCreateSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__CreateSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, UnknownData_YXGP, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreateSessionCallbackProxy, 0x00F0);
		}

		// class UDestroySessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__DestroySessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, UnknownData_TJDP, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestroySessionCallbackProxy, 0x00A0);
		}

		// class UEndMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, UnknownData_VI9H, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndMatchCallbackProxy, 0x0078);
		}

		// class UEndTurnCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndTurnCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, UnknownData_L91X, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndTurnCallbackProxy, 0x0070);
		}

		// class UFindSessionsCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindSessionsCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, UnknownData_3AXP, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindSessionsCallbackProxy, 0x00C0);
		}

		// class UFindTurnBasedMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindTurnBasedMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, UnknownData_8LYB, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindTurnBasedMatchCallbackProxy, 0x0080);
		}

		// class UInAppPurchaseCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, UnknownData_2C0H, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy, 0x00C0);
		}

		// class UInAppPurchaseQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, UnknownData_J0WB, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy, 0x00D0);
		}

		// class UInAppPurchaseRestoreCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, UnknownData_4U4R, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy, 0x00D0);
		}

		// class UJoinSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__JoinSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, UnknownData_A744, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJoinSessionCallbackProxy, 0x0160);
		}

		// class ULeaderboardBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardBlueprintLibrary, 0x0028);
		}

		// class ULeaderboardFlushCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardFlushCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, UnknownData_IM4Y, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardFlushCallbackProxy, 0x00A0);
		}

		// class ULeaderboardQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, UnknownData_3Q5G, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardQueryCallbackProxy, 0x00D0);
		}

		// class ULogoutCallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__LogoutCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, UnknownData_M0RH, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULogoutCallbackProxy, 0x0060);
		}

		// class AOnlineBeacon : public AActor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeacon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_CD7K, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionInitialTimeout, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionTimeout, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, NetDriver, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_IW2V, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeacon, 0x0390);
		}

		// class AOnlineBeaconHost : public AOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ListenPort, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_9MXJ, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ClientActors, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_NHMS, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHost, 0x0448);
		}

		// class UOnlineEngineInterfaceImpl : public UOnlineEngineInterface
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineEngineInterfaceImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, VoiceSubsystemNameOverride, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, UnknownData_R17U, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterfaceImpl, 0x0130);
		}

		// class UOnlinePIESettings : public UDeveloperSettings
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlinePIESettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, bOnlinePIEEnabled, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, UnknownData_M025, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, Logins, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlinePIESettings, 0x0050);
		}

		// class UOnlineSessionClient : public UOnlineSession
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineSessionClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_BJF6, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bIsFromInvite, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bHandlingDisconnect, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_G2GV, 0x02B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSessionClient, 0x02C0);
		}

		// class AOnlineBeaconClient : public AOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconOwner, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconConnection, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, ConnectionState, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, UnknownData_VBIF, 0x03A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconClient, 0x0410);
		}

		// class APartyBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_Q9HM, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, DestSessionId, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, PendingReservation, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, RequestType, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bPendingReservationSent, 0x0511);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bCancelReservation, 0x0512);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_HU4S, 0x0513);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconClient, 0x0540);
		}

		// class AOnlineBeaconHostObject : public AActor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHostObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, BeaconTypeName, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientBeaconActorClass, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientActors, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHostObject, 0x0390);
		}

		// class APartyBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, State, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_JOBS, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, bLogoutOnSessionTimeout, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_7UD3, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, SessionTimeoutSecs, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, TravelSessionTimeoutSecs, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_ULMQ, 0x04EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconHost, 0x04F0);
		}

		// class UPartyBeaconState : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, SessionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumConsumedReservations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, MaxReservations, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumTeams, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumPlayersPerTeam, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, TeamAssignmentMethod, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ReservedHostTeamNum, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ForceTeamNum, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, Reservations, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_PKMD, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyBeaconState, 0x0070);
		}

		// class UQuitMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__QuitMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, UnknownData_CHUG, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuitMatchCallbackProxy, 0x0070);
		}

		// class UShowLoginUICallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ShowLoginUICallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, UnknownData_YVEL, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShowLoginUICallbackProxy, 0x0058);
		}

		// class ATestBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconClient)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconClient, 0x0410);
		}

		// class ATestBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconHost)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconHost, 0x0390);
		}

		// class UTurnBasedBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__TurnBasedBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedBlueprintLibrary, 0x0028);
		}

		// class AJD_Platform_Static_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__JD_Platform_Static__JD_Platform_Static_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AJD_Platform_Static_C, 0x0370);
		}

		// class ACv2_MineBase_AP_C : public ACv2_MineBase_C
		TEST_METHOD(BlueprintGeneratedClass__Cv2_MineBase_AP__Cv2_MineBase_AP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_MineBase_AP_C, 0x0390);
		}

		// class UZ_Inventory_CV3_AttachSlot_C : public UZ_Inventory_AttachRoot_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Z_Inventory_CV3_AttachSlot__Z_Inventory_CV3_AttachSlot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_CV3_AttachSlot_C, UnknownData_5456, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_CV3_AttachSlot_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_CV3_AttachSlot_C, Icon, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_CV3_AttachSlot_C, Loot_1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_CV3_AttachSlot_C, IsFloor, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZ_Inventory_CV3_AttachSlot_C, 0x02F1);
		}

		// class USURV_Inventory_CraftResSlot_C : public UZ_InventoryCraftResourseSlotROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__SURV_Inventory_CraftResSlot__SURV_Inventory_CraftResSlot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftResSlot_C, UberGraphFrame, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftResSlot_C, Count, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftResSlot_C, Fon, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftResSlot_C, Icon, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftResSlot_C, ProgressBar_1, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftResSlot_C, ResourceName, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USURV_Inventory_CraftResSlot_C, 0x0308);
		}

		// class ASurv_PlayerState_C : public APlayerState
		TEST_METHOD(BlueprintGeneratedClass__Surv_PlayerState__Surv_PlayerState_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, UberGraphFrame, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, Cv4_LobbyComponent, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, DefaultSceneRoot, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, OwnerID, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, IDLobby, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, isLeaderLobby, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, UnknownData_HDXR, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, PlayersLobby, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, IsReady, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, StatusLobby, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, UnknownData_OWPD, 0x043A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, proxyReady, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, LobbySessionFound, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, UnknownData_1YQZ, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, Sessions, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, CurentLobbySession, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, TryCount, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, UnknownData_1A4D, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, MyLiderRef, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, SessionName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, LobbyCountPlayers, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, PlayerMoney, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, Hunger, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, Thirsty, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, Temperature, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, Health, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, Surv_coins, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, Ice_coins, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, Record, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, RecordTime, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerState_C, ClassicalInventory, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurv_PlayerState_C, 0x0578);
		}

		// class AhiWoodFence_x3_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__hiWoodFence_x3__hiWoodFence_x3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AhiWoodFence_x3_C, StaticMesh2, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AhiWoodFence_x3_C, StaticMesh1, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AhiWoodFence_x3_C, 0x0388);
		}

		// class UZ_InventoryFuncLybryary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__Z_InventoryFuncLybryary__Z_InventoryFuncLybryary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZ_InventoryFuncLybryary_C, 0x0028);
		}

		// class ACv2_TankShell_Small_C : public ACv2_RocketActor_C
		TEST_METHOD(BlueprintGeneratedClass__Cv2_TankShell_Small__Cv2_TankShell_Small_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_TankShell_Small_C, 0x04B8);
		}

		// class AFence_BaseSpawn_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Fence_BaseSpawn__Fence_BaseSpawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFence_BaseSpawn_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFence_BaseSpawn_C, FenceMesh, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFence_BaseSpawn_C, FenceNetwork, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFence_BaseSpawn_C, 0x0380);
		}

		// class AFow_TurretBot_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Fow_TurretBot__Fow_TurretBot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_TurretBot_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_TurretBot_C, Box, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_TurretBot_C, Arrow, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_TurretBot_C, DefaultSceneRoot, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_TurretBot_C, fireBurstTime, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_TurretBot_C, Ammo, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_TurretBot_C, reloadingTime, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_TurretBot_C, UnknownData_0LIH, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_TurretBot_C, SeePawn, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFow_TurretBot_C, 0x03A0);
		}

		// class ABP_SceneCapture_C : public ASceneCaptureCube
		TEST_METHOD(BlueprintGeneratedClass__BP_SceneCapture__BP_SceneCapture_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SceneCapture_C, 0x0380);
		}

		// class AhiWoodFence05_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__hiWoodFence05__hiWoodFence05_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AhiWoodFence05_C, 0x0378);
		}

		// class UAwardCalendarPage_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__AwardCalendarPage__AwardCalendarPage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardCalendarPage_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardCalendarPage_C, Day, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardCalendarPage_C, Image_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardCalendarPage_C, Image_2, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardCalendarPage_C, Overlay_2, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAwardCalendarPage_C, 0x0228);
		}

		// class ABlind_3_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Blind_4__Blind_3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlind_3_C, 0x0370);
		}

		// class UAndroidPermissionCallbackProxy : public UObject
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, OnPermissionsGrantedDynamicDelegate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, UnknownData_1SWN, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionCallbackProxy, 0x0080);
		}

		// class UAndroidPermissionFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionFunctionLibrary, 0x0028);
		}

		// class AIE_Shelf_2_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__IE_Shelf_3__IE_Shelf_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIE_Shelf_2_C, 0x0370);
		}

		// class UMessage_Global_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Message_Global__Message_Global_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_Global_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_Global_C, Message_GlobalString, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_Global_C, Message_GlobalString_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_Global_C, Message_GlobalString_2, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_Global_C, VerticalBox_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_Global_C, MessagePeriod, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_Global_C, Lasttime, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMessage_Global_C, 0x0230);
		}

		// class USK_Crazy_DeadAnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__SK_Crazy_DeadAnimBP__SK_Crazy_DeadAnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_Crazy_DeadAnimBP_C, UnknownData_FXUX, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_Crazy_DeadAnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_Crazy_DeadAnimBP_C, AnimGraphNode_Root_B31D33D148D8881CB26FABA001FA4F7F, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_Crazy_DeadAnimBP_C, AnimGraphNode_SequencePlayer_F63787AB489B221AC4636EBE4CADF176, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USK_Crazy_DeadAnimBP_C, 0x0480);
		}

		// class ABarrelA_Static_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__BarrelA_Static__BarrelA_Static_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABarrelA_Static_C, 0x0370);
		}

		// class ATable_Static_1_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Table_Static_2__Table_Static_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATable_Static_1_C, 0x0370);
		}

		// class AFurniture2_16_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture2_16_Rig__Furniture2_16_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture2_16_Rig_C, 0x03C2);
		}

		// class ASurv_Car_Corolla_C : public ACv2_BaseCar_4W_C
		TEST_METHOD(BlueprintGeneratedClass__Surv_Car_Corolla__Surv_Car_Corolla_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurv_Car_Corolla_C, 0x0940);
		}

		// class ASofa_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Sofa__Sofa_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASofa_C, 0x0370);
		}

		// class UShootingTargetPointWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ShootingTargetPointWidget__ShootingTargetPointWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShootingTargetPointWidget_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShootingTargetPointWidget_C, NewAnimation_2, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShootingTargetPointWidget_C, Distance, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShootingTargetPointWidget_C, TextBlock_2, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShootingTargetPointWidget_C, 0x0220);
		}

		// class UMAP_TentMarker_C : public UMapMarkerROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__MAP_TentMarker__MAP_TentMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_TentMarker_C, UnknownData_YT6F, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_TentMarker_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_TentMarker_C, Button_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_TentMarker_C, Image_1, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMAP_TentMarker_C, 0x0250);
		}

		// class UMAP_FriendMarker_C : public UMapMarkerROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__MAP_FriendMarker__MAP_FriendMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_FriendMarker_C, UnknownData_NAW5, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_FriendMarker_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_FriendMarker_C, Image_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_FriendMarker_C, Is_Bot, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMAP_FriendMarker_C, 0x0249);
		}

		// class Abuilding_C_static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__building_C_static_BP__building_C_static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Abuilding_C_static_BP_C, 0x0370);
		}

		// class UConfirmWidgetBase_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ConfirmWidgetBase__ConfirmWidgetBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmWidgetBase_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmWidgetBase_C, Open, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmWidgetBase_C, Button_No, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmWidgetBase_C, Button_Yes, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmWidgetBase_C, Fon, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmWidgetBase_C, TextBlock_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmWidgetBase_C, ClickYes, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConfirmWidgetBase_C, ClickNo, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConfirmWidgetBase_C, 0x0250);
		}

		// class AWoodFence_2_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WoodFence_3__WoodFence_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWoodFence_2_C, 0x0370);
		}

		// class UCrossHair_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CrossHair__CrossHair_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossHair_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossHair_C, Hit, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossHair_C, CharacterCrosshair, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossHair_C, EnemyCrosshairImage, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossHair_C, EnemyHitCrosshair, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossHair_C, H_Spacer, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossHair_C, Image_227, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossHair_C, Image_228, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossHair_C, Image_229, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossHair_C, Image_230, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossHair_C, Point, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossHair_C, TankCroshair, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossHair_C, tankCroshairTexture, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossHair_C, TankDynamicTexture, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossHair_C, V_Spacer, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossHair_C, Curve, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossHair_C, MinimalDiametr, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossHair_C, CurrentCrossHairType, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossHair_C, UnknownData_GQXI, 0x0285);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossHair_C, CrosHairsArray, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrossHair_C, 0x0298);
		}

		// class UFurniture_07_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture_07_AnimBP__Furniture_07_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_07_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_07_AnimBP_C, AnimGraphNode_Root_124793CB4A5DFEDFCBF13595E2274A0E, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_07_AnimBP_C, AnimGraphNode_LocalRefPose_EE2E4E8349AB342C026AA4B669A0F2AA, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_07_AnimBP_C, AnimGraphNode_BlendListByBool_F434A7724850E84364D59088B232F7E3, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_07_AnimBP_C, AnimGraphNode_SequencePlayer_540AB84C4AB48B76FE19879108062B6A, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture_07_AnimBP_C, 0x0588);
		}

		// class ATV_Static_1_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__TV_Static_2__TV_Static_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATV_Static_1_C, 0x0370);
		}

		// class ACv2_RocketActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv2_RocketActor__Cv2_RocketActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_RocketActor_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_RocketActor_C, CameraPos, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_RocketActor_C, Audio, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_RocketActor_C, Sphere, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_RocketActor_C, StaticMesh, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_RocketActor_C, ProjectileMovement, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_RocketActor_C, isBoomed, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_RocketActor_C, UnknownData_I3YK, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_RocketActor_C, Damage, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_RocketActor_C, Radius, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_RocketActor_C, UnknownData_BOG2, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_RocketActor_C, proxyVehStructure, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_RocketActor_C, Explose_House, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_RocketActor_C, Explose_Tank, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_RocketActor_C, Explose_Dirt, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_RocketActor_C, proxyHitActor, 0x04B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_RocketActor_C, 0x04B8);
		}

		// class ABlind_2_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Blind_3__Blind_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlind_2_C, 0x0370);
		}

		// class ABOT_Creature_GHOUL_C : public ABOT_CreatureBase_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Creature_GHOUL__BOT_Creature_GHOUL_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABOT_Creature_GHOUL_C, 0x0564);
		}

		// class AFurniture2_14_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture2_14_Rig__Furniture2_14_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture2_14_Rig_C, 0x03C2);
		}

		// class UCv4_CheckRayCastComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__Cv4_CheckRayCastComponent__Cv4_CheckRayCastComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_CheckRayCastComponent_C, MyController, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_CheckRayCastComponent_C, OldStaticMesh, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_CheckRayCastComponent_C, oldSkeletalMesh, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCv4_CheckRayCastComponent_C, 0x0108);
		}

		// class ACv4_DestoryedPrefab_Child_C : public ACv4_DestoryedPrefab_C
		TEST_METHOD(BlueprintGeneratedClass__Cv4_DestoryedPrefab_Child__Cv4_DestoryedPrefab_Child_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv4_DestoryedPrefab_Child_C, 0x038C);
		}

		// class UFurniture2_13_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture2_13_AnimBP__Furniture2_13_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_13_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_13_AnimBP_C, AnimGraphNode_Root_A9C9B9D74D797FF31B38269D4561BCEA, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_13_AnimBP_C, AnimGraphNode_LocalRefPose_17F68440480CC5627C2187AD2C46B1AC, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_13_AnimBP_C, AnimGraphNode_BlendListByBool_27DAC6E8444F9F891A4398A0BA948996, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_13_AnimBP_C, AnimGraphNode_SequencePlayer_6831AF714F53B46D3A319B88C1FDF7FD, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture2_13_AnimBP_C, 0x0588);
		}

		// class UWP_Cloudy_C : public UWeatherPreset_C
		TEST_METHOD(BlueprintGeneratedClass__WP_Cloudy__WP_Cloudy_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWP_Cloudy_C, 0x008C);
		}

		// class UGlobalMenuButton_ROOT_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GlobalMenuButton_ROOT__GlobalMenuButton_ROOT_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenuButton_ROOT_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenuButton_ROOT_C, RootNormalColor, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenuButton_ROOT_C, RootSelectedColor, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenuButton_ROOT_C, OnClick, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenuButton_ROOT_C, RootText, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenuButton_ROOT_C, RootIsSelected, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenuButton_ROOT_C, UnknownData_OIW8, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenuButton_ROOT_C, RootHoveredColor, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenuButton_ROOT_C, UnknownData_BVMI, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenuButton_ROOT_C, RootParentMenu, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenuButton_ROOT_C, RootKeyText, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenuButton_ROOT_C, RootNeedConfirm, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenuButton_ROOT_C, RootKeyAction, 0x0289);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGlobalMenuButton_ROOT_C, 0x028A);
		}

		// class UCv2_CharacterComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__Cv2_CharacterComponent__Cv2_CharacterComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_CharacterComponent_C, UberGraphFrame, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_CharacterComponent_C, CharacterPawn, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_CharacterComponent_C, oldSkeletalMesh, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_CharacterComponent_C, OldStaticMesh, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_CharacterComponent_C, WidgetsNicks, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_CharacterComponent_C, OpticWidget, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_CharacterComponent_C, isFollowKiller, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_CharacterComponent_C, UnknownData_6J1K, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_CharacterComponent_C, Stamina, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_CharacterComponent_C, oldCharacterLocation, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_CharacterComponent_C, CharacterSpeed, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_CharacterComponent_C, firstAhEnter, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_CharacterComponent_C, OffPlayerNick, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_CharacterComponent_C, UnknownData_DK74, 0x0142);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_CharacterComponent_C, distanceToNick, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCv2_CharacterComponent_C, 0x0148);
		}

		// class UCv3_FoliageInstancedComponent_C : public UFoliageInstancedStaticMeshComponent
		TEST_METHOD(BlueprintGeneratedClass__Cv3_FoliageInstancedComponent__Cv3_FoliageInstancedComponent_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCv3_FoliageInstancedComponent_C, 0x0920);
		}

		// class UInfo_ArtileryPanel_C : public UInfoPanelRoot_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Info_ArtileryPanel__Info_ArtileryPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_ArtileryPanel_C, UberGraphFrame, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_ArtileryPanel_C, Show, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_ArtileryPanel_C, Border_3, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_ArtileryPanel_C, Info_LockedWidget, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_ArtileryPanel_C, Info_VehicleInfoBar, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfo_ArtileryPanel_C, 0x0240);
		}

		// class ACrateA_Static_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__CrateA_Static__CrateA_Static_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACrateA_Static_C, 0x0370);
		}

		// class ULootSystemComponent_C : public USceneComponent
		TEST_METHOD(BlueprintGeneratedClass__LootSystemComponent__LootSystemComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootSystemComponent_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootSystemComponent_C, BaseLootSlotsArray, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootSystemComponent_C, LootSlots__ID_Indexes, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootSystemComponent_C, RefreashWidgets, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootSystemComponent_C, OtherPanelInventory, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootSystemComponent_C, InventoryActor, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootSystemComponent_C, TempLoot, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootSystemComponent_C, IsMainLootSystem, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootSystemComponent_C, UnknownData_P9BB, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootSystemComponent_C, InventoryPanelClass, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootSystemComponent_C, BaseCraftArray, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootSystemComponent_C, PlayerController, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootSystemComponent_C, UseLootArray, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULootSystemComponent_C, SortedCraftArray, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULootSystemComponent_C, 0x0338);
		}

		// class UFurniture_02_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture_02_AnimBP__Furniture_02_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_02_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_02_AnimBP_C, AnimGraphNode_Root_EF933A5A492D14F1B3A8C38D8CC8DB82, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_02_AnimBP_C, AnimGraphNode_LocalRefPose_5D16519F4F4CF3BE8C06E28FEB91BBC5, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_02_AnimBP_C, AnimGraphNode_BlendListByBool_59E82FA44DFF62E814060F827BAABA56, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_02_AnimBP_C, AnimGraphNode_SequencePlayer_A640A40A457E7716F39088A550A470D1, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture_02_AnimBP_C, 0x0588);
		}

		// class AAnvill_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Anvill_Static_BP__Anvill_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAnvill_Static_BP_C, 0x0370);
		}

		// class ACv4_StartMusic_C : public AAmbientSound
		TEST_METHOD(BlueprintGeneratedClass__Cv4_StartMusic__Cv4_StartMusic_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_StartMusic_C, UberGraphFrame, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv4_StartMusic_C, 0x0378);
		}

		// class UStalevarkaAnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__StalevarkaAnimBP__StalevarkaAnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStalevarkaAnimBP_C, UnknownData_84OU, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStalevarkaAnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStalevarkaAnimBP_C, AnimGraphNode_Root_453934E048770CFCD6A781B8A1829734, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStalevarkaAnimBP_C, AnimGraphNode_SequencePlayer_1E3E1DFD4997997B2E26AE99964AAAEF, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStalevarkaAnimBP_C, AnimGraphNode_Slot_845264664D8709C1D00F20BAEBD77CF3, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStalevarkaAnimBP_C, 0x04E8);
		}

		// class ASofa_02_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Sofa_02__Sofa_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASofa_02_C, 0x0370);
		}

		// class USurv_GET_GameMODe_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Surv_GET_GameMODe__Surv_GET_GameMODe_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_GET_GameMODe_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_GET_GameMODe_C, ShowTutorial, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_GET_GameMODe_C, OnStart, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_GET_GameMODe_C, ShowActionMOde, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_GET_GameMODe_C, ShowClassical, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_GET_GameMODe_C, ActionFon, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_GET_GameMODe_C, Button_Action, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_GET_GameMODe_C, Button_Classical, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_GET_GameMODe_C, Button_No, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_GET_GameMODe_C, Button_Tutorial, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_GET_GameMODe_C, Button_Yes, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_GET_GameMODe_C, ClassicalFon, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_GET_GameMODe_C, Image_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_GET_GameMODe_C, Image_3, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_GET_GameMODe_C, OverlayYESNO, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_GET_GameMODe_C, TutorialFon, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_GET_GameMODe_C, SetClassical, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_GET_GameMODe_C, SetAction, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurv_GET_GameMODe_C, 0x02A0);
		}

		// class UInventory_AttachMiniSlot_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Inventory_AttachMiniSlot__Inventory_AttachMiniSlot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_AttachMiniSlot_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_AttachMiniSlot_C, Icon, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_AttachMiniSlot_C, Loot, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_AttachMiniSlot_C, IsScope, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_AttachMiniSlot_C, is_container, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_AttachMiniSlot_C, UnknownData_62B4, 0x0272);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_AttachMiniSlot_C, Index, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_AttachMiniSlot_C, IsFloor, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventory_AttachMiniSlot_C, 0x0279);
		}

		// class AGameOverSceneCapture_C : public ASceneCapture2D
		TEST_METHOD(BlueprintGeneratedClass__GameOverSceneCapture__GameOverSceneCapture_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameOverSceneCapture_C, 0x0380);
		}

		// class USURV_Inventory_CharSlot_C : public UZ_Inventory_Slot_ROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__SURV_Inventory_CharSlot__SURV_Inventory_CharSlot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CharSlot_C, UberGraphFrame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CharSlot_C, BackImage, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CharSlot_C, BlockDrop, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CharSlot_C, CanDrop, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CharSlot_C, Fon, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CharSlot_C, Icon, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CharSlot_C, LootName, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CharSlot_C, On_Drag, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CharSlot_C, Overlay_1, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USURV_Inventory_CharSlot_C, 0x03D0);
		}

		// class ABarbed_Wire_Fence_02_C : public AFence_BaseNet_C
		TEST_METHOD(BlueprintGeneratedClass__Barbed_Wire_Fence_02__Barbed_Wire_Fence_02_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABarbed_Wire_Fence_02_C, UnknownData_QHME, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABarbed_Wire_Fence_02_C, DamageTrigger, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABarbed_Wire_Fence_02_C, 0x03A0);
		}

		// class UBaseWeapon_KAR98_Skeleton_AnimBlueprint_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__BaseWeapon_KAR98_Skeleton_AnimBlueprint__BaseWeapon_KAR98_Skeleton_AnimBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseWeapon_KAR98_Skeleton_AnimBlueprint_C, UnknownData_ZGOK, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseWeapon_KAR98_Skeleton_AnimBlueprint_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseWeapon_KAR98_Skeleton_AnimBlueprint_C, AnimGraphNode_Root_5D9DFB2943D9C1FF07FA67A3DB0A94E9, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseWeapon_KAR98_Skeleton_AnimBlueprint_C, AnimGraphNode_Slot_25C2AFC64094123B898F5DA61BF00A62, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseWeapon_KAR98_Skeleton_AnimBlueprint_C, AnimGraphNode_SequencePlayer_12842F7C4A14B6D01ACAF3A95E3D3665, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseWeapon_KAR98_Skeleton_AnimBlueprint_C, 0x04E8);
		}

		// class AHonorsRenderActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__HonorsRenderActor__HonorsRenderActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, Emitter_Fireball_Medium_Raising_Var02_Wide, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, SpotLight1, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, Arrow, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, RenderActor, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, SceneCaptureComponent2D, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, Plane1, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, StaticMesh2, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, StaticMesh1, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, StaticMesh, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, Plane2, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, Plane, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, DefaultSceneRoot, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, AddMedal_X_99CBD6BA4EB785954402029A88A62801, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, AddMedal__Direction_99CBD6BA4EB785954402029A88A62801, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, UnknownData_SRXB, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, AddMedal, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, Timeline_0_NewTrack_0_3F7CF10C4920A8254080A5A4420E9A05, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, Timeline_0__Direction_3F7CF10C4920A8254080A5A4420E9A05, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, UnknownData_GEAF, 0x03E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, Timeline_1, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, ProxySortedCraft, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, proxyArrayLength, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, HonorEnum, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHonorsRenderActor_C, NewVar_1, 0x0405);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHonorsRenderActor_C, 0x0406);
		}

		// class USurv_OptionsBASE_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Surv_OptionsBASE__Surv_OptionsBASE_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_OptionsBASE_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_OptionsBASE_C, ApplyBlink, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_OptionsBASE_C, AdditionalButtons, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_OptionsBASE_C, ApplyButton, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_OptionsBASE_C, ApplyVideoButton, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_OptionsBASE_C, AudioButton, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_OptionsBASE_C, AzertyButton, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_OptionsBASE_C, AzertyDefBtn, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_OptionsBASE_C, Button_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_OptionsBASE_C, ControllerButton, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_OptionsBASE_C, Image_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_OptionsBASE_C, Image_2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_OptionsBASE_C, Image_3, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_OptionsBASE_C, KeyboardDefaultButton, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_OptionsBASE_C, KeyDefBtn, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_OptionsBASE_C, LocalizePanel, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_OptionsBASE_C, Menu_ControllerOptionsSurv, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_OptionsBASE_C, Menu_InGame_AUDIO_options, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_OptionsBASE_C, Menu_InGame_VIDEO_options, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_OptionsBASE_C, VideoButton, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_OptionsBASE_C, MainButtons, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_OptionsBASE_C, PanelsArray, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurv_OptionsBASE_C, 0x02C0);
		}

		// class ASet_of_Boxes_01_2_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Set_of_Boxes_01_3__Set_of_Boxes_01_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASet_of_Boxes_01_2_C, 0x03C2);
		}

		// class AFurniture2_08_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture2_08_Rig__Furniture2_08_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture2_08_Rig_C, 0x03C2);
		}

		// class UCv2_CameraShake_StepsWalk_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__Cv2_CameraShake_StepsWalk__Cv2_CameraShake_StepsWalk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCv2_CameraShake_StepsWalk_C, 0x0160);
		}

		// class UMenu_InGame_VIDEO_options_C : public UMenu_InGame_Panel_ROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Menu_InGame_VIDEO_options__Menu_InGame_VIDEO_options_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, UnknownData_LPF8, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, UberGraphFrame, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, alising, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, Brightness, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, Button_3, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, Button_6, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, Button_7, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, CheckBox_VSync, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, ComboBoxString_50, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, Distance, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, effects, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, FoliageBar, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, Fon, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, FOV, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, FrameRateSlider, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, PostProcess, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, ResolutionScale, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, ShadowQuality, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, Texture, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, WindowedCB, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, CurentModeIndex, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, VSync, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, Windowed, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, UnknownData_9H6Y, 0x02B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, PostProcessVar, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, ShadowQualityVar, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, TextureQualityVar, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, AntialiasingVar, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, EffectsVar, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, DistanceVar, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, ResScale, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, Foliage, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, HeaderColor, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, ThemeColor, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, Brightnes, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, UnknownData_LDM2, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, HideApplyButton, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, ShowApplyButton, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, FOVVar, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_VIDEO_options_C, FrameRateVar, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenu_InGame_VIDEO_options_C, 0x0358);
		}

		// class ASet_of_Boxes_04_1_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Set_of_Boxes_04_2__Set_of_Boxes_04_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASet_of_Boxes_04_1_C, 0x03C2);
		}

		// class AChair_Static_6_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Chair_Static_7__Chair_Static_6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChair_Static_6_C, 0x0370);
		}

		// class UTOD_BlueNight_C : public UTimeOfDayPreset_C
		TEST_METHOD(BlueprintGeneratedClass__TOD_BlueNight__TOD_BlueNight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTOD_BlueNight_C, 0x00CC);
		}

		// class ACv4_ExitZoneClientOnly_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv4_ExitZoneClientOnly__Cv4_ExitZoneClientOnly_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_ExitZoneClientOnly_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_ExitZoneClientOnly_C, Sphere1, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_ExitZoneClientOnly_C, Sphere, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_ExitZoneClientOnly_C, DefaultSceneRoot, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_ExitZoneClientOnly_C, exitComplete, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv4_ExitZoneClientOnly_C, 0x0389);
		}

		// class ACv4_HelmetHeadShoot_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv4_HelmetHeadShoot__Cv4_HelmetHeadShoot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_HelmetHeadShoot_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_HelmetHeadShoot_C, HelmetMesh, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_HelmetHeadShoot_C, Box, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv4_HelmetHeadShoot_C, 0x0380);
		}

		// class UInventoryCRAFTPanel_C : public UInventoryPanelsROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__InventoryCRAFTPanel__InventoryCRAFTPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, UberGraphFrame, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, About, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, About_Image_2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, About_Image_3, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, About_Image_4, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, About_Image_5, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, About_text1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, AboutText2, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, Button_Craft, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, Fon, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, GridPanel_1, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, Header, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, HeaderCraft, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, Image_1, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_1, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_2, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_3, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_4, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_5, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_6, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_7, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_8, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_9, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_10, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_11, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_12, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_13, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_14, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_15, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_16, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_17, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_18, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_19, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_20, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_21, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_22, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_23, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_24, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_25, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_26, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_27, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_28, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_29, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_30, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_31, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_32, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_33, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_34, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_35, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_36, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_37, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_38, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_39, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_40, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftMainCard_41, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftResourceSlot, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftResourceSlot_1, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftResourceSlot_2, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftResourceSlot_3, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, InventoryCraftResourceSlot_4, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, RenderCraftWidget, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, RootVerticalBox, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, TextBlock_2, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, VerticalBox_2, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, HeaderOfBox, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, TempCanCraft, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, UnknownData_M4F1, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, CraftArrayResults, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, SelectedItem, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, UnknownData_ZY6U, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, CraftResourceSlotsArray, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, ActorVar, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, FromOtherActor, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, TempHaveRank, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, UnknownData_4MKB, 0x04B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCRAFTPanel_C, AboutIconDefaultSize, 0x04B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryCRAFTPanel_C, 0x04BC);
		}

		// class ARadio_static_2_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Radio_static_3__Radio_static_2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadio_static_2_C, UberGraphFrame, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARadio_static_2_C, 0x0378);
		}

		// class Akacheli_2_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__kacheli_3__kacheli_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Akacheli_2_C, 0x0370);
		}

		// class ACv2_BaseCar_4W_C : public AWheeledVehicle
		TEST_METHOD(BlueprintGeneratedClass__Cv2_BaseCar_4W__Cv2_BaseCar_4W_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, UberGraphFrame, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, VoiceChat, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Horn, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Face_Passager1, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Face_Driver, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Face_Passager2, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Face_Passager3, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Foots_Driver, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Torse_Driver, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Legs_Driver, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Hands_Driver, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Foots_Passager3, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Torse_Passager3, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Legs_Passager3, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Hands_Passager3, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Foots_Passager2, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Torse_Passager2, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Legs_Passager2, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Hands_Passager2, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Foots_Passager1, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Torse_Passager1, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Legs_Passager1, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Hands_Passager1, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, VoiceAudio, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, tire, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Z_InventoryComponent, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, CargoMesh, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Kostil, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, SpotLight, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Capsule3, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Passager3Helmet, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Passager3, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Passager2Helmet, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Capsule2, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Passager2, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Cv2_DestroyComponent, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Cv2_VehicleComponent, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Capsule1, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Capsule, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Box, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Passager1Helmet, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Passager1, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, DriverHelmet, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, DriverMesh, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Engine, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Camera, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, SpringArm, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, EngineActive, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, UnknownData_UTZQ, 0x0551);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, MaxSpeed, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Crews, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, AIController, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Steering, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, HitPoints, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, isDead, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, VehicleEnum, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, UnknownData_MWV3, 0x057A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, VehicleStructure, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, PassagersPawn, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, Light, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, IsOpen, 0x0681);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, UnknownData_IT5A, 0x0682);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, damageDirection, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, WeaponStructure, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, WeaponEnum, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, isFireNet, 0x08D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, isMachinegunner, 0x08DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, UnknownData_42T6, 0x08DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, TurretBase, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, TurretGun, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, NetTurretBase, 0x08E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, NetTurretGun, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, isFire, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, IsAim, 0x08ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, UnknownData_N5AQ, 0x08EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, FireRateMachineguuner, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, isTurret, 0x08F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, productType, 0x08F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, isOnlyMachinegunner, 0x08F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, UnknownData_6SJC, 0x08F7);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, FireRateTimer, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, NetVehicleLocation, 0x08FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, NetVehicleRotation, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, dropVelocityTimer, 0x0914);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, ShiftSpeed, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, isKazenniy, 0x0919);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, RealSide, 0x091A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, isHelicopter, 0x091B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, ThrottleInput, 0x091C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, helicopterThrootle, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, steeringHeliInput, 0x0924);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, PushToTalk, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, oldRealSide, 0x0929);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, isDamaged_Engine, 0x092A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, UnknownData_EJMQ, 0x092B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, damageEmitterTimer, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, StartSpawnTime, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BaseCar_4W_C, hornTimer, 0x093C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_BaseCar_4W_C, 0x0940);
		}

		// class UOil_Craft_Skeleton_AnimBlueprint_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Oil_Craft_Skeleton_AnimBlueprint__Oil_Craft_Skeleton_AnimBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOil_Craft_Skeleton_AnimBlueprint_C, UnknownData_OL52, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOil_Craft_Skeleton_AnimBlueprint_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOil_Craft_Skeleton_AnimBlueprint_C, AnimGraphNode_Root_9EAD990D43EC4644709F11BEF9DBDCF3, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOil_Craft_Skeleton_AnimBlueprint_C, AnimGraphNode_SequencePlayer_66BAD4D142001D99E776C3BA85651CD7, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOil_Craft_Skeleton_AnimBlueprint_C, AnimGraphNode_SequencePlayer_CAF3D3D04D5E39396A8748B498AD2975, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOil_Craft_Skeleton_AnimBlueprint_C, AnimGraphNode_BlendListByBool_6EFEF2F447D66BBA70C5A089723A241E, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOil_Craft_Skeleton_AnimBlueprint_C, isWorking, 0x05C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOil_Craft_Skeleton_AnimBlueprint_C, 0x05C1);
		}

		// class ABrickGarage_02_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__BrickGarage_02__BrickGarage_02_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrickGarage_02_C, ChildActor, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrickGarage_02_C, _SpawnFurnitur_152, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrickGarage_02_C, TV_01older2, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrickGarage_02_C, _SpawnFurnitur_01, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrickGarage_02_C, Roof, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrickGarage_02_C, gates, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrickGarage_02_C, 0x03A8);
		}

		// class UToolTipInventorySlot_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ToolTipInventorySlot__ToolTipInventorySlot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipInventorySlot_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipInventorySlot_C, Show, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipInventorySlot_C, Header, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipInventorySlot_C, Icon, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipInventorySlot_C, Image_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UToolTipInventorySlot_C, TextBlock_44, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolTipInventorySlot_C, 0x0230);
		}

		// class ATable_Static_3_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Table_Static_4__Table_Static_3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATable_Static_3_C, 0x0370);
		}

		// class Acontainer_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__container__container_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acontainer_C, 0x0378);
		}

		// class A_SpawnFurnitur_02_C : public ACv3_SpawnLootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass___SpawnFurnitur_02___SpawnFurnitur_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_SpawnFurnitur_02_C, 0x0390);
		}

		// class UMessageHeadshotMessage_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MessageHeadshotMessage__MessageHeadshotMessage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageHeadshotMessage_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageHeadshotMessage_C, Show, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMessageHeadshotMessage_C, 0x0210);
		}

		// class ABed_Destroyed_02_Military_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Bed_Destroyed_02_Military__Bed_Destroyed_02_Military_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABed_Destroyed_02_Military_C, 0x0370);
		}

		// class UMovieScene3DConstraintSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintId, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintSection, 0x0120);
		}

		// class UMovieScene3DAttachSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachSocketName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachComponentName, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentLocationRule, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentRotationRule, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentScaleRule, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentLocationRule, 0x0133);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentRotationRule, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentScaleRule, 0x0135);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, UnknownData_R15A, 0x0136);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachSection, 0x0140);
		}

		// class UMovieScene3DConstraintTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintTrack, ConstraintSections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintTrack, UnknownData_HFHI, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintTrack, 0x00D0);
		}

		// class UMovieScene3DAttachTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachTrack, 0x00D0);
		}

		// class UMovieScene3DPathSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, TimingCurve, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, FrontAxisEnum, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UpAxisEnum, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_3VN8, 0x0192);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_6S1S, 0x0195);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathSection, 0x01A0);
		}

		// class UMovieScene3DPathTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathTrack, 0x00D0);
		}

		// class UMovieScene3DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_LZH0, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, TransformMask, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_PRH9, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Translation, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Rotation, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Scale, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, ManualWeight, 0x0510);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformSection, 0x0580);
		}

		// class UMovieScenePropertyTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyPath, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, Sections, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertyTrack, 0x00E0);
		}

		// class UMovieScene3DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformTrack, 0x00E0);
		}

		// class UMovieSceneActorReferenceSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, UnknownData_S9D4, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidIndexCurve, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, UnknownData_W7PD, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidStrings, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, UnknownData_8G6J, 0x01A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceSection, 0x01B0);
		}

		// class UMovieSceneActorReferenceTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceTrack, 0x00E0);
		}

		// class UMovieSceneAudioSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, Sound, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartOffset, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioStartTime, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioDilationFactor, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioVolume, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, SoundVolume, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, PitchMultiplier, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bSuppressSubtitles, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bOverrideAttenuation, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_654N, 0x020A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttenuationSettings, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnQueueSubtitles, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioFinished, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioPlaybackPercent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_YHXR, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioSection, 0x0250);
		}

		// class UMovieSceneAudioTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioTrack, AudioSections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioTrack, UnknownData_ZI7I, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioTrack, 0x00D0);
		}

		// class UMovieSceneBoolSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBoolSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, UnknownData_9ZBP, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, DefaultValue, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, UnknownData_5M4I, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, BoolCurve, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolSection, 0x0190);
		}

		// class UMovieSceneBoolTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBoolTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolTrack, 0x00E0);
		}

		// class UMovieSceneByteSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteSection, UnknownData_DH9M, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteSection, ByteCurve, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteSection, UnknownData_WNDS, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteSection, 0x0190);
		}

		// class UMovieSceneByteTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteTrack, Enum, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteTrack, UnknownData_CEB1, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteTrack, 0x00F0);
		}

		// class UMovieSceneCameraAnimSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, AnimData, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, CameraAnim, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayRate, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayScale, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendInTime, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendOutTime, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, bLooping, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, UnknownData_3D6N, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimSection, 0x0150);
		}

		// class UMovieSceneCameraAnimTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimTrack, CameraAnimSections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimTrack, UnknownData_TMM6, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimTrack, 0x00D0);
		}

		// class UMovieSceneCameraCutSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraGuid, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutSection, 0x0120);
		}

		// class UMovieSceneCameraCutTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, Sections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, UnknownData_A74J, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutTrack, 0x00D0);
		}

		// class UMovieSceneCameraShakeSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeData, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeClass, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlayScale, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlaySpace, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_EFPV, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UserDefinedPlaySpace, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_HFO6, 0x014C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSection, 0x0150);
		}

		// class UMovieSceneCameraShakeTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeTrack, CameraShakeSections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeTrack, UnknownData_97IF, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeTrack, 0x00D0);
		}

		// class UMovieSceneSubSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSubSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, Parameters, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, StartOffset, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TimeScale, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, PrerollTime, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, SubSequence, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, ActorToRecord, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, UnknownData_BP7H, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetSequenceName, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetPathToRecordTo, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubSection, 0x0178);
		}

		// class UMovieSceneCinematicShotSection : public UMovieSceneSubSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, DisplayName, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotSection, 0x0190);
		}

		// class UMovieSceneSubTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSubTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubTrack, Sections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubTrack, UnknownData_6K4U, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubTrack, 0x00D0);
		}

		// class UMovieSceneCinematicShotTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotTrack, 0x00D0);
		}

		// class UMovieSceneColorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, UnknownData_J4LE, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, RedCurve, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, GreenCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, BlueCurve, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, AlphaCurve, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, UnknownData_UJGH, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorSection, 0x02E0);
		}

		// class UMovieSceneColorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, bIsSlateColor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, UnknownData_7UAK, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorTrack, 0x00F0);
		}

		// class UMovieSceneEnumSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumSection, UnknownData_1YJB, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumSection, EnumCurve, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumSection, UnknownData_OHS3, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumSection, 0x0190);
		}

		// class UMovieSceneEnumTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumTrack, Enum, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumTrack, UnknownData_0G6D, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumTrack, 0x00F0);
		}

		// class UMovieSceneEventSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, Events, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, EventData, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, UnknownData_A896, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSection, 0x0220);
		}

		// class UMovieSceneEventTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_0Z6L, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, EventReceivers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, Sections, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTrack, 0x00E0);
		}

		// class UMovieSceneFloatSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFloatSection, UnknownData_6PPF, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFloatSection, FloatCurve, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatSection, 0x0188);
		}

		// class UMovieSceneFadeSection : public UMovieSceneFloatSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, FadeColor, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, UnknownData_Y9E8, 0x0199);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeSection, 0x01A0);
		}

		// class UMovieSceneFloatTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatTrack, 0x00E0);
		}

		// class UMovieSceneFadeTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeTrack, 0x00E0);
		}

		// class UMovieSceneIntegerSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneIntegerSection, UnknownData_TUL3, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneIntegerSection, IntegerCurve, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneIntegerSection, UnknownData_2RF0, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerSection, 0x0190);
		}

		// class UMovieSceneIntegerTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerTrack, 0x00E0);
		}

		// class UMovieSceneLevelVisibilitySection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilitySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, Visibility, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, UnknownData_P5VL, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, LevelNames, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, UnknownData_LCD2, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilitySection, 0x0130);
		}

		// class UMovieSceneLevelVisibilityTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilityTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilityTrack, Sections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilityTrack, UnknownData_YUCX, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilityTrack, 0x00D0);
		}

		// class UMovieSceneMaterialTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialTrack, Sections, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialTrack, 0x00C8);
		}

		// class UMovieSceneMaterialParameterCollectionTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialParameterCollectionTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialParameterCollectionTrack, MPC, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialParameterCollectionTrack, 0x00D0);
		}

		// class UMovieSceneComponentMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, UnknownData_F4QD, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentMaterialTrack, 0x00D0);
		}

		// class UMovieSceneParameterSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParameterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ScalarParameterNamesAndCurves, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, VectorParameterNamesAndCurves, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ColorParameterNamesAndCurves, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParameterSection, 0x0140);
		}

		// class UMovieSceneParticleParameterTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleParameterTrack, Sections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleParameterTrack, UnknownData_D68D, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleParameterTrack, 0x00D0);
		}

		// class UMovieSceneParticleSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleSection, ParticleKeys, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleSection, 0x0180);
		}

		// class UMovieSceneParticleTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleTrack, ParticleSections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleTrack, UnknownData_8ZN3, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleTrack, 0x00D0);
		}

		// class UMovieSceneSkeletalAnimationSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Params, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, AnimSequence, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Animation, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartOffset, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, EndOffset, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, PlayRate, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_2Y5S, 0x01BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, SlotName, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_NZK1, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationSection, 0x01D0);
		}

		// class UMovieSceneSkeletalAnimationTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, AnimationSections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, bUseLegacySectionIndexBlend, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_TGWC, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationTrack, 0x00D0);
		}

		// class UMovieSceneSlomoSection : public UMovieSceneFloatSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSlomoSection, UnknownData_06VV, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoSection, 0x0190);
		}

		// class UMovieSceneSlomoTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoTrack, 0x00E0);
		}

		// class UMovieSceneSpawnSection : public UMovieSceneBoolSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSpawnSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnSection, 0x0190);
		}

		// class UMovieSceneSpawnTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSpawnTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, Sections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, ObjectGuid, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, UnknownData_UB24, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnTrack, 0x00E0);
		}

		// class UMovieSceneStringSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneStringSection, UnknownData_SIC6, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneStringSection, StringCurve, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringSection, 0x0190);
		}

		// class UMovieSceneStringTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringTrack, 0x00E0);
		}

		// class UMovieSceneTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformTrack, 0x00E0);
		}

		// class UMovieSceneVectorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, UnknownData_Q7EH, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, Curves, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, ChannelsUsed, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, UnknownData_EZWO, 0x02DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorSection, 0x02E0);
		}

		// class UMovieSceneVectorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, NumChannelsUsed, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, UnknownData_PBLG, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorTrack, 0x00F0);
		}

		// class UMovieSceneVisibilityTrack : public UMovieSceneBoolTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVisibilityTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVisibilityTrack, 0x00E0);
		}

		// class ACv2_GatesBase_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv2_GatesBase__Cv2_GatesBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GatesBase_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GatesBase_C, SkeletalMesh, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GatesBase_C, Box, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GatesBase_C, DefaultSceneRoot, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GatesBase_C, ActivePawn, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GatesBase_C, isDestroy, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GatesBase_C, UnknownData_D1VM, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GatesBase_C, proxyVehStructure, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GatesBase_C, Side, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GatesBase_C, UnknownData_QLEQ, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GatesBase_C, OwnerUniqId, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GatesBase_C, IsOpen, 0x04A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_GatesBase_C, 0x04A9);
		}

		// class UFontBulkData : public UObject
		TEST_METHOD(Class__SlateCore__FontBulkData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontBulkData, UnknownData_3NQ9, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontBulkData, 0x00C0);
		}

		// class UFontFaceInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontFaceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFaceInterface, 0x0028);
		}

		// class UFontProviderInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontProviderInterface, 0x0028);
		}

		// class USlateTypes : public UObject
		TEST_METHOD(Class__SlateCore__SlateTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTypes, 0x0028);
		}

		// class USlateWidgetStyleAsset : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleAsset, CustomStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleAsset, 0x0030);
		}

		// class USlateWidgetStyleContainerBase : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleContainerBase, UnknownData_2EHD, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerBase, 0x0030);
		}

		// class USlateWidgetStyleContainerInterface : public UInterface
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerInterface, 0x0028);
		}

		// class Ashooting_BANKA_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__shooting_BANKA__shooting_BANKA_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ashooting_BANKA_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ashooting_BANKA_C, can, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ashooting_BANKA_C, 0x0378);
		}

		// class AabandonedPlayground_Object_02_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__abandonedPlayground_Object_02__abandonedPlayground_Object_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AabandonedPlayground_Object_02_C, 0x0378);
		}

		// class UAnimCustomInstance : public UAnimInstance
		TEST_METHOD(Class__AnimGraphRuntime__AnimCustomInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCustomInstance, UnknownData_Z3PB, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCustomInstance, 0x03C0);
		}

		// class UAnimNotify_PlayMontageNotify : public UAnimNotify
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotify, NotifyName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotify, 0x0040);
		}

		// class UAnimNotify_PlayMontageNotifyWindow : public UAnimNotifyState
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotifyWindow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotifyWindow, NotifyName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotifyWindow, 0x0038);
		}

		// class UAnimSequencerInstance : public UAnimCustomInstance
		TEST_METHOD(Class__AnimGraphRuntime__AnimSequencerInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequencerInstance, 0x03C0);
		}

		// class UKismetAnimationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AnimGraphRuntime__KismetAnimationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetAnimationLibrary, 0x0028);
		}

		// class UPlayMontageCallbackProxy : public UObject
		TEST_METHOD(Class__AnimGraphRuntime__PlayMontageCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnCompleted, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnBlendOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnInterrupted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyBegin, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, UnknownData_3K4R, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayMontageCallbackProxy, 0x0110);
		}

		// class ASkhaf_4_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Skhaf_5__Skhaf_4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkhaf_4_C, 0x0370);
		}

		// class UTcpMessagingSettings : public UObject
		TEST_METHOD(Class__TcpMessaging__TcpMessagingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, EnableTransport, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_LXYP, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ListenEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectToEndpoints, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectionRetryDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_2QFI, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTcpMessagingSettings, 0x0058);
		}

		// class AStairs_Down_BP_01_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Stairs_Down_BP_01__Stairs_Down_BP_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStairs_Down_BP_01_C, 0x0370);
		}

		// class ACv2_LootBP_C : public AZ_LootActor_C
		TEST_METHOD(BlueprintGeneratedClass__Cv2_LootBP__Cv2_LootBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_LootBP_C, UberGraphFrame, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_LootBP_C, LootMesh, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_LootBP_C, Box, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_LootBP_C, LootType, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_LootBP_C, UnknownData_52VP, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_LootBP_C, CountLoot, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_LootBP_C, isDrop, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_LootBP_C, isLooted, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_LootBP_C, UnknownData_14TB, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_LootBP_C, LootName, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_LootBP_C, ParrentSpawnLootBP, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_LootBP_C, 0x0430);
		}

		// class USurv_Car_T40_AnimBP_C : public UVehicleAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Surv_Car_T40_AnimBP__Surv_Car_T40_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_T40_AnimBP_C, UberGraphFrame, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_T40_AnimBP_C, AnimGraphNode_Root_0C6A2BB341F40C02ADF096BEE6D17F94, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_T40_AnimBP_C, AnimGraphNode_WheelHandler_87AEEF2742B0F774670FB1A3C0D574A6, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_T40_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_884FFA6D428AB46416C3F795C98D5E5E, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_T40_AnimBP_C, AnimGraphNode_MeshRefPose_2D2A33D0473047DEEEAD61AE905A0186, 0x09D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurv_Car_T40_AnimBP_C, 0x0A00);
		}

		// class AWoodMost_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WoodMost__WoodMost_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWoodMost_C, 0x0370);
		}

		// class ASM_Cave_Rock_CurvedWall_Prefab_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__SM_Cave_Rock_CurvedWall_Prefab__SM_Cave_Rock_CurvedWall_Prefab_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASM_Cave_Rock_CurvedWall_Prefab_C, 0x0370);
		}

		// class UMenu_Item_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Menu_Item__Menu_Item_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_Item_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_Item_C, Hover, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_Item_C, Button_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_Item_C, Confirm, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_Item_C, No, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_Item_C, TextBlock_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_Item_C, Yes, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_Item_C, Menu_Text, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_Item_C, OnClick, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_Item_C, MainMenu, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_Item_C, Confirmation_required, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_Item_C, IsDesabled, 0x0269);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenu_Item_C, 0x026A);
		}

		// class AlotOfTires_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__lotOfTires_Static_BP__lotOfTires_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AlotOfTires_Static_BP_C, 0x0370);
		}

		// class UCraftComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__CraftComponent__CraftComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftComponent_C, CraftArray, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftComponent_C, SortedCraft, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftComponent_C, 0x0110);
		}

		// class ATable_Static_4_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Table_Static_5__Table_Static_4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATable_Static_4_C, 0x0370);
		}

		// class Avetryak_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__vetryak_BP__vetryak_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Avetryak_BP_C, Vetryak_sound, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::Avetryak_BP_C, Vint, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Avetryak_BP_C, 0x0380);
		}

		// class ASurv_Car_M412_C : public ACv2_BaseCar_4W_C
		TEST_METHOD(BlueprintGeneratedClass__Surv_Car_M412__Surv_Car_M412_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurv_Car_M412_C, 0x0940);
		}

		// class UFurniture2_14_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture2_14_AnimBP__Furniture2_14_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_14_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_14_AnimBP_C, AnimGraphNode_Root_AB01E79640B751E6A4CAA391B822C8B7, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_14_AnimBP_C, AnimGraphNode_LocalRefPose_8BBC64BE474C03C19579B5BFA79FABC7, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_14_AnimBP_C, AnimGraphNode_BlendListByBool_DA6C2C9B40715DF0371F3593B921AA6F, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_14_AnimBP_C, AnimGraphNode_SequencePlayer_8BE394C047DC36AC65826595247DEDFB, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture2_14_AnimBP_C, 0x0588);
		}

		// class ARoad_Debris6_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Road_Debris6__Road_Debris6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARoad_Debris6_C, 0x0378);
		}

		// class UBaseHands_Default_AnimBlueprint_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__BaseHands_Default_AnimBlueprint__BaseHands_Default_AnimBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseHands_Default_AnimBlueprint_C, UnknownData_KBRP, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseHands_Default_AnimBlueprint_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseHands_Default_AnimBlueprint_C, AnimGraphNode_Root_E25D01B7430D8BC647B4BE96F21781A5, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseHands_Default_AnimBlueprint_C, AnimGraphNode_Slot_3C67BD5A4B59E18C7FA85483FF4A2110, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseHands_Default_AnimBlueprint_C, AnimGraphNode_SequencePlayer_98CC65134352BFCF19FA2CB387831CE9, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseHands_Default_AnimBlueprint_C, WeaponID, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseHands_Default_AnimBlueprint_C, UnknownData_QU73, 0x04E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseHands_Default_AnimBlueprint_C, IdleAnim, 0x04F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseHands_Default_AnimBlueprint_C, 0x04F8);
		}

		// class AAZS_static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AZS_static_BP__AZS_static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAZS_static_BP_C, 0x0370);
		}

		// class AAmmo1_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Ammo1_Rig__Ammo1_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAmmo1_Rig_C, 0x03C2);
		}

		// class ACave_Rocks_Stalactite_01_Prefab_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Cave_Rocks_Stalactite_01_Prefab__Cave_Rocks_Stalactite_01_Prefab_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACave_Rocks_Stalactite_01_Prefab_C, 0x0370);
		}

		// class USet_of_Boxes_03_Rig_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Set_of_Boxes_03_Rig_AnimBP__Set_of_Boxes_03_Rig_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_03_Rig_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_03_Rig_AnimBP_C, AnimGraphNode_Root_ACC7152047CA97CFB27DF08FBD97D456, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_03_Rig_AnimBP_C, AnimGraphNode_LocalRefPose_0F7304E14527CC323BECA29CB30650D4, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_03_Rig_AnimBP_C, AnimGraphNode_BlendListByBool_A553E73748413DDE0E32C7A4FE0D732E, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_03_Rig_AnimBP_C, AnimGraphNode_SequencePlayer_21D690E7403C6336B696BA9B9480DB83, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USet_of_Boxes_03_Rig_AnimBP_C, 0x0588);
		}

		// class ACv4_ExitZone_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv4_ExitZone__Cv4_ExitZone_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_ExitZone_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_ExitZone_C, Sphere, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_ExitZone_C, DefaultSceneRoot, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_ExitZone_C, OwnerID, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_ExitZone_C, isEntered, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_ExitZone_C, UnknownData_J2U9, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_ExitZone_C, OwnerLobbyID, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_ExitZone_C, proxyController, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv4_ExitZone_C, 0x03A0);
		}

		// class UFurniture2_19_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture2_19_AnimBP__Furniture2_19_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_19_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_19_AnimBP_C, AnimGraphNode_Root_AAEECFD44CB66C982B515F9216B2DC55, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_19_AnimBP_C, AnimGraphNode_LocalRefPose_CBC0E2784FCE6F63AF1CB9B849559C1E, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_19_AnimBP_C, AnimGraphNode_BlendListByBool_C707F6404A992BDAEF1041A6F0BB2E26, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_19_AnimBP_C, AnimGraphNode_SequencePlayer_ABE01553421AD65C50421D889B404F4F, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture2_19_AnimBP_C, 0x0588);
		}

		// class USet_of_Boxes_06_Rig_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Set_of_Boxes_06_Rig_AnimBP__Set_of_Boxes_06_Rig_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_06_Rig_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_06_Rig_AnimBP_C, AnimGraphNode_Root_CFF75E994AA09A367B5FD89D1AD3B1C3, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_06_Rig_AnimBP_C, AnimGraphNode_LocalRefPose_D2210650416914901D2F12810F765157, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_06_Rig_AnimBP_C, AnimGraphNode_BlendListByBool_6B00225C49C23FAB25E4D59447CF8D1D, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_06_Rig_AnimBP_C, AnimGraphNode_SequencePlayer_909A3B2D4ABFA5B82EF134AC64E5F512, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USet_of_Boxes_06_Rig_AnimBP_C, 0x0588);
		}

		// class AStove_06_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Stove_06_Rig__Stove_06_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStove_06_Rig_C, 0x03C2);
		}

		// class ULobbyPlayerInLobby_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LobbyPlayerInLobby__LobbyPlayerInLobby_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyPlayerInLobby_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyPlayerInLobby_C, Avatar, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyPlayerInLobby_C, Plus, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyPlayerInLobby_C, ready, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyPlayerInLobby_C, PlayerId, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULobbyPlayerInLobby_C, 0x0240);
		}

		// class UFurniture3_19_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture3_19_AnimBP__Furniture3_19_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture3_19_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture3_19_AnimBP_C, AnimGraphNode_Root_0B617355426B14A9E82CDEA587C45493, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture3_19_AnimBP_C, AnimGraphNode_LocalRefPose_6EC8A55F4516B5615D4B30A878741CA8, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture3_19_AnimBP_C, AnimGraphNode_BlendListByBool_DB63524A4E44C0F0208F38AEB6476E38, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture3_19_AnimBP_C, AnimGraphNode_SequencePlayer_442F5BD94BD1FB3B58FEC4918C97A001, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture3_19_AnimBP_C, 0x0588);
		}

		// class UCv4_AddonBlueprintLibrary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__Cv4_AddonBlueprintLibrary__Cv4_AddonBlueprintLibrary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCv4_AddonBlueprintLibrary_C, 0x0028);
		}

		// class UFurniture_08_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture_08_AnimBP__Furniture_08_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_08_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_08_AnimBP_C, AnimGraphNode_Root_EDD14FE74FC063CEBBCF08AC179CC9F5, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_08_AnimBP_C, AnimGraphNode_LocalRefPose_5DDED90646595AE2E3D511AA82EDCFBB, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_08_AnimBP_C, AnimGraphNode_BlendListByBool_245DA609469623D52352F688F37F66AB, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_08_AnimBP_C, AnimGraphNode_SequencePlayer_3B17B2244C08B0A8EE9A65A2E00253CB, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture_08_AnimBP_C, 0x0588);
		}

		// class USet_of_Boxes_03_3_Rig_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Set_of_Boxes_03_3_Rig_AnimBP__Set_of_Boxes_03_3_Rig_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_03_3_Rig_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_03_3_Rig_AnimBP_C, AnimGraphNode_Root_DF069D2E41FF517D02F5AAAE6B68AA2B, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_03_3_Rig_AnimBP_C, AnimGraphNode_LocalRefPose_F9A9816E4086DA143AD370A55F528F29, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_03_3_Rig_AnimBP_C, AnimGraphNode_BlendListByBool_DA7EDE2B4FB395257EC30594FF92F702, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_03_3_Rig_AnimBP_C, AnimGraphNode_SequencePlayer_52AD245741569C446772DEA26AC8A725, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USet_of_Boxes_03_3_Rig_AnimBP_C, 0x0588);
		}

		// class USteamNetDriver : public UIpNetDriver
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetDriver, UnknownData_0NKS, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamNetDriver, 0x04A0);
		}

		// class USteamNetConnection : public UIpConnection
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetConnection, bIsPassthrough, 0x33680);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetConnection, UnknownData_A7LS, 0x33681);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamNetConnection, 0x33688);
		}

		// class ABP_Tunnel_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Tunnel__BP_Tunnel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Spline, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, DefaultSceneRoot, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Points, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Spacing, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Tangent_Scale, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Tunnel_Var, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Rail_Var, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Wire_L_1_add, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Wire_L_2_add, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Wire_L_3_add, 0x038E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Wire_R_1_add, 0x038F);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Wire_R_2_add, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Wire_R_3_add, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Lamp_L_add, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Lamp_R_add, 0x0393);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Contact_Rail_L_add, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Contact_Rail_R_add, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Adapter_L_1_add, 0x0396);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Adapter_L_2_add, 0x0397);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Adapter_R_1_add, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Adapter_R_2_add, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Border_L_add, 0x039A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Border_R_add, 0x039B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Platform_L_add, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Platform_R_add, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, UnknownData_4E30, 0x039E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, TunnelMaterial, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, RailingMaterial, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component_Tunnel, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Wire_L1, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Wire_L2, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Wire_L3, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Wire_Adapter_L1, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Wire_Adapter_L2, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Wire_Adapter_L3, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Wire_R1, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Wire_R2, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Wire_R3, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Wire_Adapter_R1, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Wire_Adapter_R2, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Wire_Adapter_R3, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Adapter_L1, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Adapter_R1, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Adapter_L2, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Adapter_R2, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Lamp_L, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Lamp_R, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Contact_Rail_L, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Contact_Rail_R, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Border_L, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Border_R, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Platform_L, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Platform_R, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Platform_Railing_L, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Platform_Railing_R, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Tunnel_C, Component__Rail, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tunnel_C, 0x0490);
		}

		// class AWood_wheelbarrow_01_Set2_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Wood_wheelbarrow_01_Set2__Wood_wheelbarrow_01_Set2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWood_wheelbarrow_01_Set2_C, 0x0378);
		}

		// class UPointer_MyShtab_C : public UPointer_Root_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Pointer_MyShtab__Pointer_MyShtab_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_MyShtab_C, UnknownData_U5ZC, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_MyShtab_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_MyShtab_C, Border_3, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_MyShtab_C, TextBlock_78, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointer_MyShtab_C, 0x0240);
		}

		// class UCv4_LobbyComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__Cv4_LobbyComponent__Cv4_LobbyComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_LobbyComponent_C, UberGraphFrame, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_LobbyComponent_C, IDLobby, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_LobbyComponent_C, IsReady, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_LobbyComponent_C, UnknownData_LOEE, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_LobbyComponent_C, OwnerID, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_LobbyComponent_C, isLeaderLobby, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_LobbyComponent_C, UnknownData_8T1D, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_LobbyComponent_C, PlayersLobby, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_LobbyComponent_C, proxyReady, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_LobbyComponent_C, LobbyCountPlayers, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_LobbyComponent_C, StatusLobby, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_LobbyComponent_C, UnknownData_FSXY, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_LobbyComponent_C, Param_MaxPlayers, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_LobbyComponent_C, UnknownData_W7UC, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_LobbyComponent_C, MyLiderLobby, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_LobbyComponent_C, LobbySessionFound, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_LobbyComponent_C, UnknownData_ICUL, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_LobbyComponent_C, TryCount, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_LobbyComponent_C, Sessions, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_LobbyComponent_C, SessionName, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_LobbyComponent_C, CurentLobbySession, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_LobbyComponent_C, Param_Sessions_isMainMenuParName, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_LobbyComponent_C, Param_SessionsServerNameParName, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_LobbyComponent_C, Param_SessionsCurrentPlayersParName, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCv4_LobbyComponent_C, 0x0248);
		}

		// class UWeaponBox1_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__WeaponBox1_AnimBP__WeaponBox1_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponBox1_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponBox1_AnimBP_C, AnimGraphNode_Root_9305B2BE427DD15DC0C9FC8BF0308697, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponBox1_AnimBP_C, AnimGraphNode_LocalRefPose_D3310BF640FACC4B59ED5FB74F34E31B, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponBox1_AnimBP_C, AnimGraphNode_BlendListByBool_A01090664D8DC4C399343C83791C98EA, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponBox1_AnimBP_C, AnimGraphNode_SequencePlayer_1F9FA65F4250BF5F6A0A6C8F7226D329, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponBox1_AnimBP_C, 0x0588);
		}

		// class UWP_Gloomy_C : public UWeatherPreset_C
		TEST_METHOD(BlueprintGeneratedClass__WP_Gloomy__WP_Gloomy_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWP_Gloomy_C, 0x008C);
		}

		// class ACave_Rock_Large02_Prefab_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Cave_Rock_Large02_Prefab__Cave_Rock_Large02_Prefab_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACave_Rock_Large02_Prefab_C, 0x0370);
		}

		// class ACv2_Character_Survival_C : public ACv2_Character_C
		TEST_METHOD(BlueprintGeneratedClass__Cv2_Character_Survival__Cv2_Character_Survival_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_Survival_C, Stamina, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_Survival_C, HANDS_PART, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_Survival_C, TORSE_PART, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_Survival_C, LEGS_PART, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_Survival_C, FOOT_PART, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_Survival_C, PARTS_FOOT, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_Survival_C, PARTS_LEGS, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_Survival_C, PARTS_TORSE, 0x0D08);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_Character_Survival_C, 0x0D10);
		}

		// class AJB_Fence_Static_BP_3_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__JB_Fence_Static_BP_4__JB_Fence_Static_BP_3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AJB_Fence_Static_BP_3_C, 0x0370);
		}

		// class UAudioCurveSourceComponent : public UAudioComponent
		TEST_METHOD(Class__FacialAnimation__AudioCurveSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, UnknownData_12E9, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSourceBindingName, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSyncOffset, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, UnknownData_RUB9, 0x0704);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCurveSourceComponent, 0x0730);
		}

		// class UKillsMultiplier_WB_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__KillsMultiplier_WB__KillsMultiplier_WB_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillsMultiplier_WB_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillsMultiplier_WB_C, Show, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillsMultiplier_WB_C, Image_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillsMultiplier_WB_C, TextBlock_86, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillsMultiplier_WB_C, 0x0220);
		}

		// class AStaticPropsParent_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__StaticPropsParent_BP__StaticPropsParent_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticPropsParent_BP_C, StaticMesh_1, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaticPropsParent_BP_C, 0x0370);
		}

		// class AInventoryCharacterRender_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__InventoryCharacterRender__InventoryCharacterRender_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, MOD_SILENCER, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, Face, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, MOD_OPTIC, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, Backpack, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, MeleeWeapon, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, SM_Flag, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, GrenadeRight, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, GrenadeLeft, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, Pistol, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, Helmet, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, Weapon, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, SceneCaptureComponent2D, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, Plane1, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, StaticMesh2, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, ToonSoldier_Soviet, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, StaticMesh1, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, StaticMesh, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, Plane2, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, Plane, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, DefaultSceneRoot, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, Turbine_NewTrack_0_27736220484147B2692AC9AC8C457CB4, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, Turbine__Direction_27736220484147B2692AC9AC8C457CB4, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, UnknownData_XPYN, 0x0415);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, Turbine, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, Nation, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, UnknownData_9CKX, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, oldIndex, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, oldMaterials, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, proxyModMesh, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, proxyWeapon, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, UnknownData_MSNB, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, proxySilencerMesh, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, isProxyMagazine, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, UnknownData_2GKL, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_C, proxyWeaponMesh, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInventoryCharacterRender_C, 0x0460);
		}

		// class AFence_Wall_05_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Fence_Wall_05__Fence_Wall_05_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFence_Wall_05_C, 0x0378);
		}

		// class USurv_Car_Uaz469_Military_AnimBP_C : public UVehicleAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Surv_Car_Uaz469_Military_AnimBP__Surv_Car_Uaz469_Military_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Uaz469_Military_AnimBP_C, UberGraphFrame, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Uaz469_Military_AnimBP_C, AnimGraphNode_Root_9C98C5F2420E6798CABB0187EB1966C8, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Uaz469_Military_AnimBP_C, AnimGraphNode_WheelHandler_B42730A841D7529344C45793FFAA2F13, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Uaz469_Military_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_F6F7E71C44754C81F23FECAD7899252F, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Uaz469_Military_AnimBP_C, AnimGraphNode_MeshRefPose_2115B0B14FDC07F393F692A4B843DCA4, 0x09D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurv_Car_Uaz469_Military_AnimBP_C, 0x0A00);
		}

		// class ACv2_FencePackSystem_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv2_FencePackSystem__Cv2_FencePackSystem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_FencePackSystem_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_FencePackSystem_C, DefaultSceneRoot, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_FencePackSystem_C, DestroyObjects, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_FencePackSystem_C, StaticMeshes, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_FencePackSystem_C, updateClientTimer, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_FencePackSystem_C, UnknownData_LYK3, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_FencePackSystem_C, proxyDestroyObjects, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_FencePackSystem_C, HitPoints, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_FencePackSystem_C, 0x03C0);
		}

		// class UZagluha_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Zagluha__Zagluha_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZagluha_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZagluha_C, Image_29, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZagluha_C, TextBlock_230, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZagluha_C, Throbber_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZagluha_C, ShowConnection, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZagluha_C, 0x0221);
		}

		// class UMessageScoreMessageString_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MessageScoreMessageString__MessageScoreMessageString_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageScoreMessageString_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageScoreMessageString_C, In, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageScoreMessageString_C, Image_160, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageScoreMessageString_C, Overlay_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageScoreMessageString_C, TextBlock_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageScoreMessageString_C, MessageType, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageScoreMessageString_C, UnknownData_4THO, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageScoreMessageString_C, MessageText, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMessageScoreMessageString_C, 0x0248);
		}

		// class UAvfMediaSettings : public UObject
		TEST_METHOD(Class__AvfMediaFactory__AvfMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvfMediaSettings, NativeAudioOut, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvfMediaSettings, UnknownData_MYP2, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvfMediaSettings, 0x0030);
		}

		// class UCreature_Wolf_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Creature_Wolf_AnimBP__Creature_Wolf_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreature_Wolf_AnimBP_C, UnknownData_3ETC, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreature_Wolf_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreature_Wolf_AnimBP_C, AnimGraphNode_Root_F8EDDEFF440AFC4D62BD4B8A068941C3, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreature_Wolf_AnimBP_C, AnimGraphNode_BlendSpacePlayer_687A5EE04F1802652241CAAC7BC70031, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreature_Wolf_AnimBP_C, AnimGraphNode_Slot_E0EAF14C48F562FE9E670B8BB32838F3, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreature_Wolf_AnimBP_C, Speed, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreature_Wolf_AnimBP_C, UnknownData_AHR1, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreature_Wolf_AnimBP_C, Creature, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreature_Wolf_AnimBP_C, 0x05B0);
		}

		// class AChair_01_Military_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Chair_01_Military__Chair_01_Military_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChair_01_Military_C, 0x0370);
		}

		// class USurv_ClasssicalModeGUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Surv_ClasssicalModeGUI__Surv_ClasssicalModeGUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_ClasssicalModeGUI_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_ClasssicalModeGUI_C, Blink, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_ClasssicalModeGUI_C, Image_3, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_ClasssicalModeGUI_C, Menu_MainMenu_Lobby, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_ClasssicalModeGUI_C, Record, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_ClasssicalModeGUI_C, RecordText, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_ClasssicalModeGUI_C, Surv_Top_List, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_ClasssicalModeGUI_C, Surv_Vip_Card, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_ClasssicalModeGUI_C, Surv_Vip_Card_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_ClasssicalModeGUI_C, Surv_Vip_Card_2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_ClasssicalModeGUI_C, TopPlace, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_ClasssicalModeGUI_C, Timer, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurv_ClasssicalModeGUI_C, 0x0260);
		}

		// class ASurv_Car_Vaz_2109_C : public ACv2_BaseCar_4W_C
		TEST_METHOD(BlueprintGeneratedClass__Surv_Car_Vaz_2109__Surv_Car_Vaz_2109_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurv_Car_Vaz_2109_C, 0x0940);
		}

		// class UTOD_Pinky_C : public UTimeOfDayPreset_C
		TEST_METHOD(BlueprintGeneratedClass__TOD_Pinky__TOD_Pinky_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTOD_Pinky_C, 0x00CC);
		}

		// class UJeep_front_C : public UVehicleWheel
		TEST_METHOD(BlueprintGeneratedClass__Jeep_front__Jeep_front_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJeep_front_C, 0x00F0);
		}

		// class AHiWood_Fence_Static_BP_2_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__HiWood_Fence_Static_BP_3__HiWood_Fence_Static_BP_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHiWood_Fence_Static_BP_2_C, 0x0370);
		}

		// class UFurniture_06_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture_06_AnimBP__Furniture_06_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_06_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_06_AnimBP_C, AnimGraphNode_Root_80DF661C46A9D9E8BBB0DCAFA8634D74, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_06_AnimBP_C, AnimGraphNode_LocalRefPose_84F7A3C240502ACD62680895DE5FB67D, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_06_AnimBP_C, AnimGraphNode_BlendListByBool_9674F87547261F5105C70EB0E0D4C846, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_06_AnimBP_C, AnimGraphNode_SequencePlayer_BCACDB19499A473F96422FBC57695F70, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture_06_AnimBP_C, 0x0588);
		}

		// class USURV_Inventory_CraftSlot_C : public UZ_InventoryCraftSlot_ROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__SURV_Inventory_CraftSlot__SURV_Inventory_CraftSlot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, Hover, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, Button_Craft, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, DLS_Lock, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, Fon, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, Header, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, HoverImage, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, Ico, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, Image_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, Image_2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, Image_4, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, Overlay_1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, PercentText, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, ProgressBar_1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, RankICO, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, SelectedImage, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, SizeBox_1, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, HeaderText, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, Texture, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, IsEmpty, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, UnknownData_QD8P, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, LootType, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, Root, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, Percent, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, NewVar_0_1, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, PreviousSelect, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, MouseDownOnce, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, RealCraftEnum, 0x0305);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, LockByRank, 0x0306);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, UnknownData_1LHR, 0x0307);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, ROOT_InventoryPanel_1, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_CraftSlot_C, TooltipWidgetVar, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USURV_Inventory_CraftSlot_C, 0x0318);
		}

		// class UVaRestJsonObject : public UObject
		TEST_METHOD(Class__VaRestPlugin__VaRestJsonObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestJsonObject, UnknownData_BSZE, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVaRestJsonObject, 0x0038);
		}

		// class UVaRestJsonValue : public UObject
		TEST_METHOD(Class__VaRestPlugin__VaRestJsonValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestJsonValue, UnknownData_C49R, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVaRestJsonValue, 0x0038);
		}

		// class UVaRestLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__VaRestPlugin__VaRestLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVaRestLibrary, 0x0028);
		}

		// class UVaRestRequestJSON : public UObject
		TEST_METHOD(Class__VaRestPlugin__VaRestRequestJSON)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, OnRequestComplete, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, OnRequestFail, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, UnknownData_3EOE, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, ResponseContent, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, bIsValidJsonResponse, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, UnknownData_7ZKO, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, RequestJsonObj, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, UnknownData_NMO8, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, ResponseJsonObj, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestRequestJSON, UnknownData_OLMG, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVaRestRequestJSON, 0x0270);
		}

		// class UNamedInterfaces : public UObject
		TEST_METHOD(Class__OnlineSubsystem__NamedInterfaces)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaces, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaceDefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, UnknownData_6UNP, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedInterfaces, 0x00C0);
		}

		// class UTurnBasedMatchInterface : public UInterface
		TEST_METHOD(Class__OnlineSubsystem__TurnBasedMatchInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedMatchInterface, 0x0028);
		}

		// class USelectSpawnWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SelectSpawnWidget__SelectSpawnWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectSpawnWidget_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectSpawnWidget_C, Image_18, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectSpawnWidget_C, Line, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectSpawnWidget_C, Map_Overlay, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectSpawnWidget_C, TownsVB, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectSpawnWidget_C, Strings, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectSpawnWidget_C, Timer, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelectSpawnWidget_C, 0x0240);
		}

		// class ULightPropagationVolumeBlendable : public UObject
		TEST_METHOD(Class__LightPropagationVolumeRuntime__LightPropagationVolumeBlendable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_4QH2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, Settings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, BlendWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_N317, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightPropagationVolumeBlendable, 0x0078);
		}

		// class AFenceA_Static_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FenceA_Static__FenceA_Static_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFenceA_Static_C, 0x0370);
		}

		// class ARockFlats_Straight_01_Prefab_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__RockFlats_Straight_01_Prefab__RockFlats_Straight_01_Prefab_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARockFlats_Straight_01_Prefab_C, 0x0370);
		}

		// class UWmfMediaSettings : public UObject
		TEST_METHOD(Class__WmfMediaFactory__WmfMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, AllowNonStandardCodecs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, LowLatency, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, NativeAudioOut, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, UnknownData_PBGZ, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWmfMediaSettings, 0x0030);
		}

		// class ABP_AnimalsWolf_Wolf_C : public ACharacter
		TEST_METHOD(BlueprintGeneratedClass__BP_AnimalsWolf_Wolf__BP_AnimalsWolf_Wolf_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, UberGraphFrame, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, PawnSensing, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, BaseTurnRate, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, BaseLookUpRate, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, Turn, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, LookUp, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, MaxSpeed, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, MoveRight, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, LocomotionBias, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, MoveForward, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, IsAttacking, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, UnknownData_OKHI, 0x07B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, Var_TurnMouse_AxisValue, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, Var_LookUpMouse_AxisValue, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, Var_ForwardVector, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, Var_ForwardScaleValue, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, Var_RightVector, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, Var_RightScaleValue, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, Var_Turn_AxisValue, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, Var_LookUp_AxisValue, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, Target, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, Distance, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, isDeath, 0x07F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, UnknownData_4Y5Z, 0x07F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, Commander, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, ImpactBoneName, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, ImpactLocation, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, ImpactImpulse, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, Health, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, UnknownData_MERK, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsWolf_Wolf_C, proxyMesh, 0x0828);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AnimalsWolf_Wolf_C, 0x0830);
		}

		// class UFurniture_22_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture_22_AnimBP__Furniture_22_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_22_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_22_AnimBP_C, AnimGraphNode_Root_A2528E364DC7EC6F9009829F9C753AB8, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_22_AnimBP_C, AnimGraphNode_LocalRefPose_3FC71CBF4CE930987571339A16DBB72D, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_22_AnimBP_C, AnimGraphNode_BlendListByBool_3074EF2749CBFE3FC0D1028C3E6DE371, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_22_AnimBP_C, AnimGraphNode_SequencePlayer_8D57CDC24D465A686723EAA593C314E0, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture_22_AnimBP_C, 0x0588);
		}

		// class UMediaSource : public UObject
		TEST_METHOD(Class__MediaAssets__MediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSource, UnknownData_T7AM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSource, 0x0030);
		}

		// class UBaseMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__BaseMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMediaSource, PlayerName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseMediaSource, 0x0038);
		}

		// class UFileMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__FileMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, FilePath, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, PrecacheFile, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, UnknownData_U2E6, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFileMediaSource, 0x0050);
		}

		// class UMediaBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MediaAssets__MediaBlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaBlueprintFunctionLibrary, 0x0028);
		}

		// class UMediaPlayer : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnEndReached, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaClosed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpened, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpenFailed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackResumed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackSuspended, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnSeekCompleted, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnTracksChanged, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheAhead, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehind, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehindGame, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, NativeAudioOut, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayOnOpen, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_6RSM, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_92K5, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, Playlist, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlaylistIndex, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, HorizontalFieldOfView, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, VerticalFieldOfView, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, ViewRotation, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_Q2GX, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayerGuid, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_0YM8, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlayer, 0x0190);
		}

		// class UMediaPlaylist : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlaylist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlaylist, UnknownData_JYFS, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlaylist, Items, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlaylist, 0x0040);
		}

		// class UMediaSoundComponent : public USynthComponent
		TEST_METHOD(Class__MediaAssets__MediaSoundComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, Channels, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_QBTP, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_UA9R, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, MediaPlayer, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_4RQ5, 0x05E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSoundComponent, 0x0630);
		}

		// class UMediaTexture : public UTexture
		TEST_METHOD(Class__MediaAssets__MediaTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressX, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressY, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AutoClear, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_48LA, 0x00CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, ClearColor, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_CFPP, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, MediaPlayer, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_I0DZ, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaTexture, 0x0138);
		}

		// class UPlatformMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__PlatformMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformMediaSource, MediaSource, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformMediaSource, 0x0038);
		}

		// class UStreamMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__StreamMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamMediaSource, StreamUrl, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamMediaSource, 0x0048);
		}

		// class UPlayerString_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PlayerString__PlayerString_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerString_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerString_C, Button_2, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerString_C, Cheat, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerString_C, Damage, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerString_C, Deaths, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerString_C, Fon, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerString_C, FriendButton, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerString_C, HorizontalBox_2, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerString_C, Kills, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerString_C, MainButton, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerString_C, Ping, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerString_C, PlayerName, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerString_C, RankICO, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerString_C, Score, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerString_C, SteamIdString, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerString_C, IsHeader, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerString_C, IsMyString, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerString_C, Side, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerString_C, IsMySide, 0x027B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerString_C, UnknownData_O1ED, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerString_C, SteamID, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerString_C, MyNetId, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerString_C, IsOnAdminString, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerString_C, 0x02B1);
		}

		// class UInventoryCraftMainCard_C : public UInventorySlotsRoot_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__InventoryCraftMainCard__InventoryCraftMainCard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, UnknownData_Y7IC, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, Hover, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, Button_Craft, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, DLS_Lock, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, Fon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, Header, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, HoverImage, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, Ico, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, Image_1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, Image_2, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, Image_4, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, PercentText, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, ProgressBar_1, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, RANK_Lock, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, RankICO, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, SelectedImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, SizeBox_1, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, HeaderText, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, Texture, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, IsEmpty, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, UnknownData_9JER, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, LootType, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, LootIndex, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, UnknownData_02YP, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, Root, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, Percent, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, NewVar_0_1, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, PreviousSelect, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, MouseDownOnce, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, RealCraftEnum, 0x031D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, LockByRank, 0x031E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, UnknownData_OJC1, 0x031F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftMainCard_C, ROOT_InventoryPanel, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryCraftMainCard_C, 0x0328);
		}

		// class AWater_Tank_Winter_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Water_Tank_Winter__Water_Tank_Winter_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWater_Tank_Winter_C, 0x0378);
		}

		// class ABRU_01_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__BRU_01__BRU_01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, _SpawnFurnitur_123, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, _SpawnFurnitur_122, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, _SpawnFurnitur_01, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, _SpawnFurnitur_02, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, _SpawnFurnitur_09, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, _SpawnFurnitur_04, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, _SpawnFurnitur_13, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, _SpawnFurnitur_05, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, _SpawnFurnitur_17, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, _SpawnFurnitur_12, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, _SpawnFurnitur_16, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, _SpawnFurnitur_03, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, StaticMesh6, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, StaticMesh5, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, StaticMesh4, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, CraftWindow_Frame, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, StaticMesh2, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, StaticMesh3, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, StaticMesh1, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, ChildActor3, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, ChildActor2, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, ChildActor1, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, ChildActor, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, Ladder_BP1, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, BRU_01_BRU_01_5, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, BRU_01_BRU_01_4, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABRU_01_C, BRU_01_BRU_01_3, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABRU_01_C, 0x0450);
		}

		// class UFurniture2_01_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture2_01_AnimBP__Furniture2_01_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_01_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_01_AnimBP_C, AnimGraphNode_Root_823630EC4B1BAC324DF664A70DA617F2, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_01_AnimBP_C, AnimGraphNode_LocalRefPose_A6B102164B60A84332580F8A214F4579, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_01_AnimBP_C, AnimGraphNode_BlendListByBool_CC3B00C94FC20AE40EB833A5F1A4F1E6, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_01_AnimBP_C, AnimGraphNode_SequencePlayer_E5589F1F42EF410C4EA167A6DB7E8D05, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture2_01_AnimBP_C, 0x0588);
		}

		// class UM412_Back_C : public UVehicleWheel
		TEST_METHOD(BlueprintGeneratedClass__M412_Back__M412_Back_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UM412_Back_C, 0x00F0);
		}

		// class UMap_MapBoxWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Map_MapBoxWidget__Map_MapBoxWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, AlliedsCounText, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, AlliesOverlay, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, AlliesPercent, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, Axis, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, AxisCountText, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, AxisOverlay, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, AxisPercent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, Fon, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, Image_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, Image_2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, Image_3, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, Image_4, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, Left_VerticalBox, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, Map_Overlay_94, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, PlayerHeader_Allieds, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, PlayerHeader_Axis, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, ProgressBar_Allies, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, ProgressBar_Axis, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, Right_VerticalBox, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, ScrollBoxAlies, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, ScrollBoxAXIS, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, ServerName, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, Timer, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, AlliedsCount, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, AxisCount, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, PlayerSortParametr, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_MapBoxWidget_C, SortFromMin, 0x02C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMap_MapBoxWidget_C, 0x02CA);
		}

		// class USet_of_Boxes_01_Rig_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Set_of_Boxes_01_Rig_AnimBP__Set_of_Boxes_01_Rig_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_01_Rig_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_01_Rig_AnimBP_C, AnimGraphNode_Root_396A60E94BB1C83EEB1AE18166DE9B96, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_01_Rig_AnimBP_C, AnimGraphNode_LocalRefPose_B3D9C3204B1CE5802179C68188662495, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_01_Rig_AnimBP_C, AnimGraphNode_BlendListByBool_DFAE81574D8A63FD821436B4E80F2396, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_01_Rig_AnimBP_C, AnimGraphNode_SequencePlayer_5BD8237C4E8B49F90EF59195B328CE9F, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USet_of_Boxes_01_Rig_AnimBP_C, 0x0588);
		}

		// class UZ_InventoryCRAFTPanel_C : public UInventoryPanelsROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Z_InventoryCRAFTPanel__Z_InventoryCRAFTPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, UberGraphFrame, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, About, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, About_Image_2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, About_Image_3, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, About_Image_4, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, About_Image_5, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, About_text1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, AboutText2, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, Button_Craft, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, Distance, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, Fon, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, GridPanel_1, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, Header, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, HeaderCraft, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, Image_1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, NocraftFon, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, OverlayNoCraft, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, RenderCraftWidget, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, RootVerticalBox, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, ScrollBox_1, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, TextBlock_2, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, VerticalBox_2, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, Z_InventoryCraftResourceSlot, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, Z_InventoryCraftResourceSlot_1, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, Z_InventoryCraftResourceSlot_2, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, Z_InventoryCraftResourceSlot_3, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, Z_InventoryCraftResourceSlot_4, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, HeaderOfBox, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, TempCanCraft, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, UnknownData_JQ8Y, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, CraftArrayResults, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, SelectedItem, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, UnknownData_3VZJ, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, CraftResourceSlotsArray, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, ActorVar, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, FromOtherActor, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, TempHaveRank, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, UnknownData_FH2X, 0x0382);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, AboutIconDefaultSize, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, UnknownData_MR7R, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, ClickClose, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, NoCraftDistance, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, UnknownData_AZCQ, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFTPanel_C, CraftTimer, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZ_InventoryCRAFTPanel_C, 0x03B0);
		}

		// class ARock_7_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Rock_7_Static_BP__Rock_7_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARock_7_Static_BP_C, 0x0370);
		}

		// class ACave_Rock_Ceiling_Prefab_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Cave_Rock_Ceiling_Prefab__Cave_Rock_Ceiling_Prefab_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACave_Rock_Ceiling_Prefab_C, 0x0370);
		}

		// class UAdminPanelBase_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__AdminPanelBase__AdminPanelBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, AliedsCount, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, AlliedsCounText, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, AlliesOverlay, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, Ava, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, Button_129, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, Button_174, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, Button_203, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, Button_Close, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, Button_Left, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, CheckBox_54, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, Image_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, Image_2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, Image_7, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, Nick, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, Nick_TextYesNo, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, No, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, Operation, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, PlayerHeader_Allieds, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, Rank, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, ResourcesButton, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, ScrollBoxAlies, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, StatisticString_Kills, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, StatisticStringDeaths, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, TextBlock_7, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, TextBlock_8, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, textCheckBox, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, Yes, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, YES_NO_Panel, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, YesNoFon, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, YesNoFonButton, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, PlayersCount, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, AxisCount, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, Timer, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, CurrentPlayerState, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, CurrentNetID, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdminPanelBase_C, TimerCheck, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdminPanelBase_C, 0x0328);
		}

		// class UCommandMessage_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CommandMessage__CommandMessage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandMessage_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandMessage_C, Show, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandMessage_C, Fon, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandMessage_C, Instigator, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandMessage_C, Message, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCommandMessage_C, 0x0228);
		}

		// class URegionNeutral_C : public UPointer_Root_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__RegionNeutral__RegionNeutral_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionNeutral_C, UnknownData_SVIM, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionNeutral_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionNeutral_C, Border_3, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionNeutral_C, Distance, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionNeutral_C, TextMarker, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionNeutral_C, OwnerSide, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionNeutral_C, isHidden, 0x0249);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URegionNeutral_C, 0x024A);
		}

		// class Apowerhouse_02_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__powerhouse_02__powerhouse_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Apowerhouse_02_C, 0x0378);
		}

		// class ACv2_AirDropBox_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv2_AirDropBox__Cv2_AirDropBox_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirDropBox_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirDropBox_C, Z_InventoryComponent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirDropBox_C, air_box, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirDropBox_C, isAirDrop, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirDropBox_C, UnknownData_4VA2, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirDropBox_C, OwnerID, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirDropBox_C, Slots, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirDropBox_C, isDestroy, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirDropBox_C, UnknownData_KAJA, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirDropBox_C, HitPoints, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirDropBox_C, Side, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_AirDropBox_C, 0x03B1);
		}

		// class ASet_of_Boxes_02_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Set_of_Boxes_02__Set_of_Boxes_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASet_of_Boxes_02_C, 0x03C2);
		}

		// class AJB_Fence_Stakan_Static_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__JB_Fence_Stakan_Static__JB_Fence_Stakan_Static_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AJB_Fence_Stakan_Static_C, 0x0370);
		}

		// class ACv4_DynamicSnow_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv4_DynamicSnow__Cv4_DynamicSnow_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_DynamicSnow_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_DynamicSnow_C, SnowParticle, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_DynamicSnow_C, DefaultSceneRoot, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv4_DynamicSnow_C, 0x0380);
		}

		// class UStatisticCard_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__StatisticCard__StatisticCard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticCard_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticCard_C, AwardText, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticCard_C, Count, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticCard_C, Icon, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticCard_C, Name, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticCard_C, IconTexture, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticCard_C, CardName, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticCard_C, AwardEnum, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticCard_C, UnknownData_0ITU, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticCard_C, CountVar, 0x024C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatisticCard_C, 0x0250);
		}

		// class ACv2_ResourcesCraftActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv2_ResourcesCraftActor__Cv2_ResourcesCraftActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ResourcesCraftActor_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ResourcesCraftActor_C, Z_InventoryComponent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ResourcesCraftActor_C, stone, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ResourcesCraftActor_C, Audio, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ResourcesCraftActor_C, SkeletalMesh, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ResourcesCraftActor_C, DefaultSceneRoot, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ResourcesCraftActor_C, HitPoints, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ResourcesCraftActor_C, Side, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ResourcesCraftActor_C, CraftResource, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ResourcesCraftActor_C, UnknownData_T6M7, 0x039E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ResourcesCraftActor_C, DestructionMesh, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ResourcesCraftActor_C, OwnerID, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ResourcesCraftActor_C, isJob, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ResourcesCraftActor_C, isDestroy, 0x03B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_ResourcesCraftActor_C, 0x03BA);
		}

		// class A_Rural_house_12_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass___Rural_house_13___Rural_house_12_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, _CraftDoor_Frame, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Door_06_Frame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Door_05_Frame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Door_04_Frame, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Socket_08, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Socket_06, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Socket_05, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Window_02, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Window_05, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Socket_07, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Glass_01, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Window_big, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, StaticMesh10, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, StaticMesh9, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, StaticMesh7, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, StaticMesh6, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, StaticMesh4, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, StaticMesh2, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Door_06_Door_06_glass, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Chimney_Metal_Detail, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, big_glass, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, StaticMesh8, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, StaticMesh5, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Window_04, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, StaticMesh3, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Window_03, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Windows_01, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Socket_04, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Door_02_Door_02_details, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Door_02_Door_02, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Door_02_Frame, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Door_06_Door_06_Details, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Door_06_Door_06, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Door_03_Frame, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Fireplace_01, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Socket_03, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Socket_02, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Socket_01, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Electrical_Socket_02, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Electrical_Box_01, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Chimney_02, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Foundation_01, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Porch_01_Porch_01, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Peak_01, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Roof_11, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_12_C, Attic_01, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_Rural_house_12_C, 0x04E8);
		}

		// class UFurniture2_23_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture2_23_AnimBP__Furniture2_23_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_23_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_23_AnimBP_C, AnimGraphNode_Root_9173ACF54550D3F8EAC7FDBCEC5037DF, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_23_AnimBP_C, AnimGraphNode_LocalRefPose_B5EEE93048B5342852A9E5A57A581777, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_23_AnimBP_C, AnimGraphNode_BlendListByBool_5070F52A41BC2A3A23287692D4769342, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_23_AnimBP_C, AnimGraphNode_SequencePlayer_60B44D354070892D09DE158351245EC8, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture2_23_AnimBP_C, 0x0588);
		}

		// class UInventory_DND_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Inventory_DND__Inventory_DND_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_DND_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_DND_C, Show, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_DND_C, Count, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_DND_C, Icon, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_DND_C, Name, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventory_DND_C, 0x0228);
		}

		// class USurv_Car_M412_AnimBP_C : public UVehicleAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Surv_Car_M412_AnimBP__Surv_Car_M412_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_M412_AnimBP_C, UberGraphFrame, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_M412_AnimBP_C, AnimGraphNode_Root_88D4E8E64498F94364674EAA6857C002, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_M412_AnimBP_C, AnimGraphNode_WheelHandler_DEEAF46D42E6A9E260FD6EAE719BD9FD, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_M412_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_40EFEF0F487C6749398828B186A76F31, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_M412_AnimBP_C, AnimGraphNode_MeshRefPose_66577A92414EA00783A073AC7EEA510D, 0x09D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurv_Car_M412_AnimBP_C, 0x0A00);
		}

		// class UZ_Inventory_AttachRoot_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Z_Inventory_AttachRoot__Z_Inventory_AttachRoot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_AttachRoot_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_AttachRoot_C, IsContainer, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_AttachRoot_C, UnknownData_LVBP, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_AttachRoot_C, Index, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_AttachRoot_C, IsScope, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_AttachRoot_C, UnknownData_QNPY, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_AttachRoot_C, Loot, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_AttachRoot_C, IsMagazine, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZ_Inventory_AttachRoot_C, 0x0279);
		}

		// class UClothingAssetCustomData : public UObject
		TEST_METHOD(Class__ClothingSystemRuntime__ClothingAssetCustomData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCustomData, 0x0028);
		}

		// class UClothingAsset : public UClothingAssetBase
		TEST_METHOD(Class__ClothingSystemRuntime__ClothingAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, PhysicsAsset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, ClothConfig, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, UnknownData_3S3F, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, LODData, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, LodMap, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, UsedBoneNames, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, UsedBoneIndices, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, ReferenceBoneIndex, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, UnknownData_J897, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAsset, CustomData, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAsset, 0x0160);
		}

		// class A_Rural_house_03_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass___Rural_house_03___Rural_house_03_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, _CraftDoor_Frame, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, StaticMesh15, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, StaticMesh14, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, StaticMesh12, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, StaticMesh6, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, StaticMesh9, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, StaticMesh8, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, StaticMesh7, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, StaticMesh10, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, StaticMesh11, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, Chimney_Metal_Detail, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, StaticMesh13, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, StaticMesh5, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, StaticMesh4, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, StaticMesh3, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, StaticMesh2, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, Windows_02_2_Windows_02_3, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, Socket_04, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, Door_02_Door_02_details, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, Door_02_Door_02, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, Door_02_Door_02_Frame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, Door_06_Door_06_Details, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, Door_06_Door_06, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, Door_06_Door_06_Frame, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, Fireplace_01, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, Socket_03, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, Socket_02, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, Socket_01, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, Electrical_Socket_02, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, Electrical_Box_01, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, Chimney_02, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, Foundation_01, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, Porch_01_Porch_01, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, Peak_01, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, Roof_11, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_03_C, Attic_01, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_Rural_house_03_C, 0x0498);
		}

		// class UClothingSimulationFactoryNv : public UClothingSimulationFactory
		TEST_METHOD(Class__ClothingSystemRuntime__ClothingSimulationFactoryNv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactoryNv, 0x0028);
		}

		// class ULocationServices : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__LocationServicesBPLibrary__LocationServices)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocationServices, 0x0028);
		}

		// class ULocationServicesImpl : public UObject
		TEST_METHOD(Class__LocationServicesBPLibrary__LocationServicesImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocationServicesImpl, OnLocationChanged, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocationServicesImpl, 0x0038);
		}

		// class UMessageZoneInfo_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MessageZoneInfo__MessageZoneInfo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageZoneInfo_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageZoneInfo_C, VerticalBox_69, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMessageZoneInfo_C, 0x0210);
		}

		// class ULOBBY_HUD_Interface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__LOBBY_HUD_Interface__LOBBY_HUD_Interface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULOBBY_HUD_Interface_C, 0x0028);
		}

		// class AStairs_Up_BP_02_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Stairs_Up_BP_02__Stairs_Up_BP_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStairs_Up_BP_02_C, 0x0370);
		}

		// class ARagdollProxy_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__RagdollProxy__RagdollProxy_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARagdollProxy_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARagdollProxy_C, HANDS_PART, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARagdollProxy_C, TORSE_PART, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARagdollProxy_C, LEGS_PART, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARagdollProxy_C, FOOT_PART, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARagdollProxy_C, Helmet, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARagdollProxy_C, PoseableMesh, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARagdollProxy_C, 0x03A0);
		}

		// class AWoodFence_1_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WoodFence_2__WoodFence_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWoodFence_1_C, 0x0370);
		}

		// class UWP_Blizzard_C : public UWeatherPreset_C
		TEST_METHOD(BlueprintGeneratedClass__WP_Blizzard__WP_Blizzard_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWP_Blizzard_C, 0x008C);
		}

		// class ACave_Rock_Large01_REDO_Prefab_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Cave_Rock_Large01_REDO_Prefab__Cave_Rock_Large01_REDO_Prefab_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACave_Rock_Large01_REDO_Prefab_C, 0x0370);
		}

		// class UFurniture3_09_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture3_09_AnimBP__Furniture3_09_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture3_09_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture3_09_AnimBP_C, AnimGraphNode_Root_3C84B7EE4D8BBDE58EDA5BAB10835A5E, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture3_09_AnimBP_C, AnimGraphNode_LocalRefPose_A2368B2742A818140AE1A9B63C87B818, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture3_09_AnimBP_C, AnimGraphNode_BlendListByBool_5D07B5D54B30F7780C6B1295FD8154CF, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture3_09_AnimBP_C, AnimGraphNode_SequencePlayer_75955E8742514E48B5B43AAA7367F155, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture3_09_AnimBP_C, 0x0588);
		}

		// class ACurbstone_01_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Curbstone_01__Curbstone_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACurbstone_01_C, 0x0378);
		}

		// class ASurv_PlayerController_C : public APlayerController
		TEST_METHOD(BlueprintGeneratedClass__Surv_PlayerController__Surv_PlayerController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, UberGraphFrame, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, Cv4_DataBaseUpdateAndGet, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, VaRestFunctionsComponent, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, Z_InventoryManager, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, Z_PlayerInventory, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, InventoryState, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, BaseState, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, MyUniqNetId, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, MenuSlots, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, InventoryCharacter, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, faceIdServer, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, UnknownData_NBDG, 0x0731);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, Zagluha, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, HaveDLC_Supporter, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, HaveDLC_SpecialForces, 0x0741);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, UnknownData_2QHD, 0x0742);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, TimeMark, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, AwardDay, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, ShowAwardOverload, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, AppOwner, 0x074D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, ReturnSaveStateBool, 0x074E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, UnknownData_P9O3, 0x074F);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, ActionPawnRef, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, ClassicalSpawn_Ref, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, PlayerInfoIsLoading, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, UnknownData_JBJ3, 0x0761);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, PROXY_INVENTORY, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, DefaultCheckPoint, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_PlayerController_C, ClassicCheckPoint, 0x0778);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurv_PlayerController_C, 0x0780);
		}

		// class UGameOverStatistic_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GameOverStatistic__GameOverStatistic_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverStatistic_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverStatistic_C, Show, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverStatistic_C, CaptureVehicle, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverStatistic_C, Deaths, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverStatistic_C, DestroyVehicle, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverStatistic_C, GameOverStatisticString, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverStatistic_C, Headshots, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverStatistic_C, Image_18, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverStatistic_C, KillInMelee, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverStatistic_C, Kills, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverStatistic_C, Strings, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverStatistic_C, VerticalBox_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverStatistic_C, Duration, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameOverStatistic_C, 0x0264);
		}

		// class UTankDamageType_C : public UDamageType
		TEST_METHOD(BlueprintGeneratedClass__TankDamageType__TankDamageType_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTankDamageType_C, 0x0040);
		}

		// class UInfo_TurrelPanel_C : public UInfoPanelRoot_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Info_TurrelPanel__Info_TurrelPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_TurrelPanel_C, UberGraphFrame, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_TurrelPanel_C, Show, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_TurrelPanel_C, Border_3, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_TurrelPanel_C, Info_LockedWidget, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_TurrelPanel_C, Info_VehicleInfoBar, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfo_TurrelPanel_C, 0x0240);
		}

		// class USURV_Inventory_Eqpt_C : public UZ_Inventory_Slot_ROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__SURV_Inventory_Eqpt__SURV_Inventory_Eqpt_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Eqpt_C, UberGraphFrame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Eqpt_C, UpdateAmmoAnim, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Eqpt_C, AmmoIcon, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Eqpt_C, AmmoName, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Eqpt_C, BlockDrop, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Eqpt_C, CanDrop, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Eqpt_C, CountText, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Eqpt_C, Fon, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Eqpt_C, HorizontalBox_3, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Eqpt_C, Icon, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Eqpt_C, LootName, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Eqpt_C, On_Drag, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Eqpt_C, TypeName, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Eqpt_C, VerticalBox_1, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Eqpt_C, WeapInfo, 0x03F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USURV_Inventory_Eqpt_C, 0x0420);
		}

		// class UBarigaButton_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BarigaButton__BarigaButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBarigaButton_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBarigaButton_C, SelectAnim, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBarigaButton_C, Button_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBarigaButton_C, Image_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBarigaButton_C, Image_2, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBarigaButton_C, Cv4Trade, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBarigaButton_C, InvenrotyRef, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBarigaButton_C, Index, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBarigaButton_C, UnknownData_TN63, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBarigaButton_C, Normal, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBarigaButton_C, Pressed, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBarigaButton_C, 0x0368);
		}

		// class UInfo_TankPanel_C : public UInfoPanelRoot_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Info_TankPanel__Info_TankPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_TankPanel_C, UberGraphFrame, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_TankPanel_C, Show, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_TankPanel_C, Border_3, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_TankPanel_C, Info_LockedWidget, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_TankPanel_C, Info_VehicleInfoBar, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfo_TankPanel_C, 0x0240);
		}

		// class USURV_Craft_Tooltip_C : public UZ_Tooltip_Root_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__SURV_Craft_Tooltip__SURV_Craft_Tooltip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Craft_Tooltip_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Craft_Tooltip_C, Show_Hor, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Craft_Tooltip_C, Show, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Craft_Tooltip_C, About, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Craft_Tooltip_C, About_Image_2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Craft_Tooltip_C, About_Image_3, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Craft_Tooltip_C, About_Image_4, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Craft_Tooltip_C, About_Image_5, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Craft_Tooltip_C, About_text1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Craft_Tooltip_C, AboutText2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Craft_Tooltip_C, Fon, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Craft_Tooltip_C, Image_3, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Craft_Tooltip_C, Image_4, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Craft_Tooltip_C, Name, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Craft_Tooltip_C, SURV_Inventory_CraftResSlot, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Craft_Tooltip_C, SURV_Inventory_CraftResSlot_1, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Craft_Tooltip_C, SURV_Inventory_CraftResSlot_2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Craft_Tooltip_C, SURV_Inventory_CraftResSlot_3, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Craft_Tooltip_C, TextBlock_17, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Craft_Tooltip_C, SlotsArray, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Craft_Tooltip_C, LocalAboutImages, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USURV_Craft_Tooltip_C, 0x02E0);
		}

		// class UStone_Craft_Skeleton_AnimBlueprint_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Stone_Craft_Skeleton_AnimBlueprint__Stone_Craft_Skeleton_AnimBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStone_Craft_Skeleton_AnimBlueprint_C, UnknownData_9BCL, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStone_Craft_Skeleton_AnimBlueprint_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStone_Craft_Skeleton_AnimBlueprint_C, AnimGraphNode_Root_67EB7CE741E478CFF98BE2AB053EF0FD, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStone_Craft_Skeleton_AnimBlueprint_C, AnimGraphNode_SequencePlayer_6F2B19DA47CADC34596E90BB8ED9D60B, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStone_Craft_Skeleton_AnimBlueprint_C, AnimGraphNode_SequencePlayer_1A1E35404AE9FA4F2258AC8B748C17B2, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStone_Craft_Skeleton_AnimBlueprint_C, AnimGraphNode_BlendListByBool_1743764E44867E7BD8041BA064603ACC, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStone_Craft_Skeleton_AnimBlueprint_C, isWorking, 0x05C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStone_Craft_Skeleton_AnimBlueprint_C, 0x05C1);
		}

		// class UFurniture_04_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture_04_AnimBP__Furniture_04_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_04_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_04_AnimBP_C, AnimGraphNode_Root_121B14124A0D278919190F92AC073298, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_04_AnimBP_C, AnimGraphNode_LocalRefPose_EFF390AB430FB4E6468C7CA27B9AE4C0, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_04_AnimBP_C, AnimGraphNode_BlendListByBool_1A83C53D4B4F5F22E3618F9411EC1639, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_04_AnimBP_C, AnimGraphNode_SequencePlayer_2E88358041569A2D533636843EA53A31, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture_04_AnimBP_C, 0x0588);
		}

		// class ACv2_HouseBase_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv2_HouseBase__Cv2_HouseBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_HouseBase_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_HouseBase_C, PlayerStart, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_HouseBase_C, DefaultSceneRoot, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_HouseBase_C, HouseStructure, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_HouseBase_C, DestroyObjects, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_HouseBase_C, HitPoints, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_HouseBase_C, proxyDestroyObjects, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_HouseBase_C, startHitPointsDefault, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_HouseBase_C, updateClientTimer, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_HouseBase_C, HouseSide, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_HouseBase_C, MapIcon, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_HouseBase_C, NoAttackVelocity, 0x03D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_HouseBase_C, UnknownData_H3MJ, 0x03D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_HouseBase_C, particleTimer, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_HouseBase_C, UnknownData_6KWL, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_HouseBase_C, BotCheckpoints, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_HouseBase_C, VillageController, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_HouseBase_C, HouseBot, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_HouseBase_C, isSpawnBot_, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_HouseBase_C, HitPointsEnum, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_HouseBase_C, isDestroyingActor, 0x0402);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_HouseBase_C, UnknownData_3VWH, 0x0403);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_HouseBase_C, OwnerUniqId, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_HouseBase_C, 0x0418);
		}

		// class UMenu_InGame_AUDIO_options_C : public UMenu_InGame_Panel_ROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Menu_InGame_AUDIO_options__Menu_InGame_AUDIO_options_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_AUDIO_options_C, UnknownData_AJP3, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_AUDIO_options_C, UberGraphFrame, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_AUDIO_options_C, Image_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_AUDIO_options_C, Image_2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_AUDIO_options_C, Image_3, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_AUDIO_options_C, Image_4, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_AUDIO_options_C, Image_5, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_AUDIO_options_C, Image_6, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_AUDIO_options_C, Image_69, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_AUDIO_options_C, MasterSlider, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_AUDIO_options_C, MusicSlider, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_AUDIO_options_C, Parent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_AUDIO_options_C, HeaderColor, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_AUDIO_options_C, ThemeColor, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenu_InGame_AUDIO_options_C, 0x02C0);
		}

		// class ASURV_FPS_Base_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__SURV_FPS_Base__SURV_FPS_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASURV_FPS_Base_C, UberGraphFrame, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASURV_FPS_Base_C, 0x0378);
		}

		// class A_SpawnFurnitur_14_C : public ACv3_SpawnLootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass___SpawnFurnitur_15___SpawnFurnitur_14_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_SpawnFurnitur_14_C, 0x0390);
		}

		// class ACv2_DestructionActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv2_DestructionActor__Cv2_DestructionActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_DestructionActor_C, Destructible, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_DestructionActor_C, 0x0370);
		}

		// class AIE_landing_stairs_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__IE_landing_stairs__IE_landing_stairs_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIE_landing_stairs_C, 0x0378);
		}

		// class A_Rural_house_11_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass___Rural_house_12___Rural_house_11_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, _CraftDoor_Frame, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Door_06_Frame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Door_05_Frame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Door_04_Frame, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Socket_08, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Socket_06, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Socket_05, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Window_02, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Window_05, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Socket_07, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Window_big, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, StaticMesh10, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, StaticMesh9, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, StaticMesh7, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, StaticMesh6, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, StaticMesh4, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, StaticMesh2, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Door_06_Door_06_glass, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Chimney_Metal_Detail, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Glass_01, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, big_glass, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, StaticMesh8, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, StaticMesh5, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Window_04, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, StaticMesh3, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Window_03, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Windows_01, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Socket_04, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Door_02_Door_02_details, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Door_02_Door_02, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Door_02_Frame, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Door_06_Door_06_Details, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Door_06_Door_06, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Door_03_Frame, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Fireplace_01, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Socket_03, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Socket_02, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Socket_01, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Electrical_Socket_02, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Electrical_Box_01, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Chimney_02, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Foundation_01, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Porch_01_Porch_01, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Peak_01, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Roof_11, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_11_C, Attic_01, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_Rural_house_11_C, 0x04E8);
		}

		// class UAwardCard_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__AwardCard__AwardCard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardCard_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardCard_C, Begin, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardCard_C, NoWin, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardCard_C, WinAnim, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardCard_C, Round, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardCard_C, Image_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardCard_C, Name, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardCard_C, CircleNumber, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardCard_C, IsWin, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardCard_C, UnknownData_V0QI, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardCard_C, Speed, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardCard_C, UnknownData_NOGE, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardCard_C, FinishShow, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAwardCard_C, 0x0258);
		}

		// class UJeep_Back_C : public UVehicleWheel
		TEST_METHOD(BlueprintGeneratedClass__Jeep_Back__Jeep_Back_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJeep_Back_C, 0x00F0);
		}

		// class ARadio_static_4_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Radio_static_5__Radio_static_4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARadio_static_4_C, 0x0370);
		}

		// class Acart_old_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__cart_old__cart_old_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acart_old_C, 0x0378);
		}

		// class UChatInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__ChatInterface__ChatInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChatInterface_C, 0x0028);
		}

		// class USURV_KA_26_AnimBp_C : public UVehicleAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__SURV_KA_26_AnimBp__SURV_KA_26_AnimBp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, UberGraphFrame, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, AnimGraphNode_Root_245FD57946C53056B19617872949899B, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, AnimGraphNode_WheelHandler_7CA7738D4D0C4E254F24189AB20C1E54, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, AnimGraphNode_MeshRefPose_EE9FC96E463D8E2AC498D1973859D1B4, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, AnimGraphNode_ModifyBone_257C4BA247DA2F134700539245DB7A46, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, AnimGraphNode_ModifyBone_1A6B7B5B48898530A543A1B1772AA4F8, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, AnimGraphNode_BlendListByBool_469A9F854201C3361E6FF9BB0B108C0C, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, AnimGraphNode_SaveCachedPose_4D1E34554BA04668733F7B91BADB4CAF, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, AnimGraphNode_ComponentToLocalSpace_97C2C2B645215A75E999A29BDA6931E2, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, AnimGraphNode_UseCachedPose_173C11E64A575A0CFCF030967E5BFD1B, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, AnimGraphNode_ModifyBone_C8781CC54C56B0037C38BAB757BF01BF, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, AnimGraphNode_ComponentToLocalSpace_1193F5F647CB9CBEEA97A08EEA181997, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, AnimGraphNode_ComponentToLocalSpace_6C6647FB4FA1CB338E9A258B579080A6, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, AnimGraphNode_LocalToComponentSpace_10FE104D4D67AC768F2EE2B605FBD3E4, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, AnimGraphNode_UseCachedPose_FDEBA15846B8C9F6A73EB6A20006F7C7, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, AnimGraphNode_LocalToComponentSpace_AAF7B5B240CF15854C9873898B693A1E, 0x0F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, AnimGraphNode_ModifyBone_F1438B874102A08E69A78798D5BFE34E, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, AnimGraphNode_ModifyBone_4CC07AED4A367B244BDEF39C860069F6, 0x1018);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, AnimGraphNode_LocalToComponentSpace_801AE1354AD8C550C0680880A8556436, 0x10D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, AnimGraphNode_ComponentToLocalSpace_265E26394595B7919EB05A94293EAA66, 0x1118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, AnimGraphNode_CopyBone_622291DC4BEFBBE3A425BBB2EB5459BD, 0x1160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, AnimGraphNode_CopyBone_297EFC5B442BAF41E4997DB380B12947, 0x1208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, AnimGraphNode_CopyBone_760A720C4C32E868B87B3FB27A241B95, 0x12B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, AnimGraphNode_CopyBone_F94E22084CDE7B3EE8B785ABB9BD199D, 0x1358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, RotationFun, 0x1400);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, isOpenBackDoor, 0x1404);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, UnknownData_WG08, 0x1405);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_KA_26_AnimBp_C, Steering, 0x1408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USURV_KA_26_AnimBp_C, 0x140C);
		}

		// class AFurniture2_01_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture2_01_Rig__Furniture2_01_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture2_01_Rig_C, 0x03C2);
		}

		// class ULootSystemInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__LootSystemInterface__LootSystemInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULootSystemInterface_C, 0x0028);
		}

		// class AWoodTurnik_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WoodTurnik__WoodTurnik_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWoodTurnik_C, 0x0370);
		}

		// class A_SpawnFurnitur_10_C : public ACv3_SpawnLootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass___SpawnFurnitur_11___SpawnFurnitur_10_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_SpawnFurnitur_10_C, 0x0390);
		}

		// class UMenu_MainMenu_ServerListTable_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Menu_MainMenu_ServerListTable__Menu_MainMenu_ServerListTable_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerListTable_C, Fon, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerListTable_C, Image_1, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerListTable_C, Image_3, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerListTable_C, Image_4, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerListTable_C, Image_5, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerListTable_C, Image_6, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerListTable_C, Image_7, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerListTable_C, Line, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerListTable_C, Menu_MainMenu_ServerList_String, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerListTable_C, Menu_MainMenu_ServerList_String_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerListTable_C, Menu_MainMenu_ServerList_String_2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerListTable_C, Menu_MainMenu_ServerList_String_3, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerListTable_C, Table, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenu_MainMenu_ServerListTable_C, 0x0268);
		}

		// class Afactory_static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__factory_static_BP__factory_static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Afactory_static_BP_C, 0x0370);
		}

		// class U_RenderCharacterAnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass___RenderCharacterAnimBP___RenderCharacterAnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::U_RenderCharacterAnimBP_C, UnknownData_JU96, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::U_RenderCharacterAnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::U_RenderCharacterAnimBP_C, AnimGraphNode_Root_80E374FA4CC81414E2D8BFA21B89BAB4, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::U_RenderCharacterAnimBP_C, AnimGraphNode_SequencePlayer_4F6DAC5049658ABB16E953A9F41E37F3, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::U_RenderCharacterAnimBP_C, IdleAnimation, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::U_RenderCharacterAnimBP_C, 0x0488);
		}

		// class ACv2_CraftZone_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv2_CraftZone__Cv2_CraftZone_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_CraftZone_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_CraftZone_C, CraftComponent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_CraftZone_C, StaticMesh1, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_CraftZone_C, SkeletalMesh, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_CraftZone_C, StaticMesh, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_CraftZone_C, DefaultSceneRoot, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_CraftZone_C, isDestroy, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_CraftZone_C, 0x0399);
		}

		// class UZ_Inventory_Slot_ROOT_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Z_Inventory_Slot_ROOT__Z_Inventory_Slot_ROOT_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, Add, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, LootStr, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, Index, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, IsContainer, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, UnknownData_W0JS, 0x0275);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, SlotStr, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, CanDropToThis, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, UnknownData_IXL2, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, ParentSlot, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, ChildSlots, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, INVERS_Fon, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, IsGlobalUpdate, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, IsOnFloor, 0x02EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, CanCombine, 0x02EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, SplitCount, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, SplitStep, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, UnknownData_AGUH, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, OldLootName, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, RootFonVar, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, RootSplitProgres, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, RootAttachPanel, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, RootAttach1, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, RootAttach2, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, IsClear, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, UnknownData_PUWT, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, RootTypeText, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, Root_CanDrop, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, Root_BlockDrop, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, Root_CanCombine, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, Root_OnDrag, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, RootToolTipWidgetRef, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, RootTooltipClass, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, DecrementedMass, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, UnknownData_QB08, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, Root_NamedSlot, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, IsTradeNow, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, IsLefBtnDown, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, IsTradeToAll, 0x037A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, UnknownData_EUZY, 0x037B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_ROOT_C, RootMagazine, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZ_Inventory_Slot_ROOT_C, 0x0388);
		}

		// class ATV_Static_3_Older_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__TV_Static_3_Older__TV_Static_3_Older_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATV_Static_3_Older_C, 0x0370);
		}

		// class USet_of_Boxes_04_Rig_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Set_of_Boxes_04_Rig_AnimBP__Set_of_Boxes_04_Rig_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_04_Rig_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_04_Rig_AnimBP_C, AnimGraphNode_Root_CFFE884C4E9C38D2AA2B60A4AC5F709D, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_04_Rig_AnimBP_C, AnimGraphNode_LocalRefPose_C3294F234105189C44BD609273244064, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_04_Rig_AnimBP_C, AnimGraphNode_BlendListByBool_D2417A8A4BB4D50AB79B399110DB835D, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_04_Rig_AnimBP_C, AnimGraphNode_SequencePlayer_4CC2CC804BFEF55AF740729F7AC82815, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USet_of_Boxes_04_Rig_AnimBP_C, 0x0588);
		}

		// class UWP_Foggy_C : public UWeatherPreset_C
		TEST_METHOD(BlueprintGeneratedClass__WP_Foggy__WP_Foggy_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWP_Foggy_C, 0x008C);
		}

		// class USet_of_Boxes_05_Rig_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Set_of_Boxes_05_Rig_AnimBP__Set_of_Boxes_05_Rig_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_05_Rig_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_05_Rig_AnimBP_C, AnimGraphNode_Root_101AFEAA46860D692D0AB0B97EF1B7F2, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_05_Rig_AnimBP_C, AnimGraphNode_LocalRefPose_F18046984AAB31DCDB6B1193A6E09A17, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_05_Rig_AnimBP_C, AnimGraphNode_BlendListByBool_A6FECD5C4E1496BEDFF2F7973AB84B30, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_05_Rig_AnimBP_C, AnimGraphNode_SequencePlayer_4DA5073A43E4329F13F9528F6B8FB17F, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USet_of_Boxes_05_Rig_AnimBP_C, 0x0588);
		}

		// class AHiWood_Fence_Static_BP_4_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__HiWood_Fence_Static_BP_5__HiWood_Fence_Static_BP_4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHiWood_Fence_Static_BP_4_C, 0x0370);
		}

		// class UMAP_StonePitMarker_C : public UMapMarkerROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__MAP_StonePitMarker__MAP_StonePitMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_StonePitMarker_C, UnknownData_XZV0, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_StonePitMarker_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_StonePitMarker_C, Image_1, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMAP_StonePitMarker_C, 0x0248);
		}

		// class UCv4_BulletComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__Cv4_BulletComponent__Cv4_BulletComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_BulletComponent_C, proxyActor, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_BulletComponent_C, isHeadShoot, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_BulletComponent_C, UnknownData_5AIN, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_BulletComponent_C, proxyBoneName, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_BulletComponent_C, proxyDamage, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_BulletComponent_C, UnknownData_PWFB, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_BulletComponent_C, OwnerPawn, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_BulletComponent_C, proxyLocation, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_BulletComponent_C, proxyNormal, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_BulletComponent_C, proxyComponent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_BulletComponent_C, WeaponStructure, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_BulletComponent_C, myWeaponRange, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_BulletComponent_C, CountShoot, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_BulletComponent_C, WeaponType, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_BulletComponent_C, UnknownData_VC9R, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_BulletComponent_C, countAttacks, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_BulletComponent_C, isDestroyedProps, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_BulletComponent_C, UnknownData_4LMG, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_BulletComponent_C, oldFoliageHitPoints, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_BulletComponent_C, damagedPlayer, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCv4_BulletComponent_C, 0x03A0);
		}

		// class ACv3_FireCamp_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv3_FireCamp__Cv3_FireCamp_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_FireCamp_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_FireCamp_C, PointLight, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_FireCamp_C, ParticleSystem, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_FireCamp_C, AudioFire, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_FireCamp_C, Z_InventoryComponent, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_FireCamp_C, Fire, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_FireCamp_C, Food, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_FireCamp_C, Box, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_FireCamp_C, Pan, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_FireCamp_C, DefaultSceneRoot, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_FireCamp_C, LoadedPans, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_FireCamp_C, LoadedFood, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_FireCamp_C, isFired, 0x03BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_FireCamp_C, UnknownData_64JN, 0x03BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_FireCamp_C, GlowMaterial, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_FireCamp_C, StandartMaterial, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_FireCamp_C, WoodFireTime, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_FireCamp_C, isDestroy, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_FireCamp_C, UnknownData_PKW5, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_FireCamp_C, HitPoints, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_FireCamp_C, UnknownData_50LA, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_FireCamp_C, DestructionMesh, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv3_FireCamp_C, 0x03E8);
		}

		// class UFow_Bot_Library_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__Fow_Bot_Library__Fow_Bot_Library_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFow_Bot_Library_C, 0x0028);
		}

		// class UAmmo1_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Ammo1_AnimBP__Ammo1_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmmo1_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmmo1_AnimBP_C, AnimGraphNode_Root_0F1EE61242982350EEC7D4AA300C5926, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmmo1_AnimBP_C, AnimGraphNode_LocalRefPose_1F94295F436478120AA3A2BF09CECB23, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmmo1_AnimBP_C, AnimGraphNode_BlendListByBool_A162E3B04726F31F482E9DB2E4FF0244, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmmo1_AnimBP_C, AnimGraphNode_SequencePlayer_2EDB8EB748AEE99F9D5B90A66F74BA71, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAmmo1_AnimBP_C, 0x0588);
		}

		// class ABOT_Creature_VAMPIRE_C : public ABOT_CreatureBase_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Creature_VAMPIRE__BOT_Creature_VAMPIRE_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABOT_Creature_VAMPIRE_C, 0x0564);
		}

		// class UMapMarkerROOT_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MapMarkerROOT__MapMarkerROOT_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerROOT_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerROOT_C, ROOT_Actor, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerROOT_C, Timer, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerROOT_C, ROOT_Type, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerROOT_C, UnknownData_V0HQ, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerROOT_C, Root_Parent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerROOT_C, ROOT_Coords, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerROOT_C, ROOT_Visibility, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerROOT_C, ROOT_COSMode, 0x0235);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapMarkerROOT_C, 0x0236);
		}

		// class USurvBannerPoint_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SurvBannerPoint__SurvBannerPoint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBannerPoint_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBannerPoint_C, Image_1, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvBannerPoint_C, 0x0210);
		}

		// class ACv4_CraftDoor_Base_Wood_C : public ACv4_CraftDoor_Base_C
		TEST_METHOD(BlueprintGeneratedClass__Cv4_CraftDoor_Base_Wood__Cv4_CraftDoor_Base_Wood_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv4_CraftDoor_Base_Wood_C, 0x03CC);
		}

		// class UM8_back_C : public UVehicleWheel
		TEST_METHOD(BlueprintGeneratedClass__M8_back__M8_back_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UM8_back_C, 0x00F0);
		}

		// class UEndGameBase_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__EndGameBase__EndGameBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, ShowVictory, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, Add_score, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, Rotatetext, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, CV2_Panel, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, DopFon, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, EendGame_Panel, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, END_Game_XP_Bar, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, EndGame_TopString, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, EndGame_TopString_4, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, EndGame_TopString_5, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, EndGame_TopString_6, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, EndGame_TopString_136, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, EndGame_TopString_137, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, Image_26, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, Image_28, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, TextBlock_41, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, TextBlock_55, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, TextBlock_103, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, Victory, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, YouracurText, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, YourDpText, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, PlayerGameDamageScore, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, UnknownData_1L93, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, DP_SortPlayers_Array, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, AP_SortPlayers_Array, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, PlayerAcurScore, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, PlayerAcurPlace, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameBase_C, PlayerDamagePlace, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndGameBase_C, 0x02E4);
		}

		// class UMAP_SawMillMarker_C : public UMapMarkerROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__MAP_SawMillMarker__MAP_SawMillMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_SawMillMarker_C, UnknownData_DCF2, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_SawMillMarker_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_SawMillMarker_C, Image_1, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMAP_SawMillMarker_C, 0x0248);
		}

		// class UGrenadeDamageType_C : public UDamageType
		TEST_METHOD(BlueprintGeneratedClass__GrenadeDamageType__GrenadeDamageType_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGrenadeDamageType_C, 0x0040);
		}

		// class AsovietHouse_3floor_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__sovietHouse_3floor_BP__sovietHouse_3floor_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AsovietHouse_3floor_BP_C, panel_house_3_doors, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsovietHouse_3floor_BP_C, panel_house_3_roof, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AsovietHouse_3floor_BP_C, panel_house_3_tile_house, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AsovietHouse_3floor_BP_C, 0x0388);
		}

		// class AStove_05_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Stove_05_Rig__Stove_05_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStove_05_Rig_C, 0x03C2);
		}

		// class ASurv_Car_T40_C : public ACv2_BaseCar_4W_C
		TEST_METHOD(BlueprintGeneratedClass__Surv_Car_T40__Surv_Car_T40_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurv_Car_T40_C, 0x0940);
		}

		// class AScreenMaker_Camera_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__ScreenMaker_Camera__ScreenMaker_Camera_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenMaker_Camera_C, UberGraphFrame, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenMaker_Camera_C, Camera, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenMaker_Camera_C, Snow_Particle, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenMaker_Camera_C, DefaultSceneRoot, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AScreenMaker_Camera_C, bIsSnowEnable, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AScreenMaker_Camera_C, 0x03E9);
		}

		// class UWP_Clean_C : public UWeatherPreset_C
		TEST_METHOD(BlueprintGeneratedClass__WP_Clean__WP_Clean_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWP_Clean_C, 0x008C);
		}

		// class AHiWood_Fence_Stolb_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__HiWood_Fence_Stolb_Static_BP__HiWood_Fence_Stolb_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHiWood_Fence_Stolb_Static_BP_C, 0x0370);
		}

		// class UFurniture2_08_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture2_08_AnimBP__Furniture2_08_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_08_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_08_AnimBP_C, AnimGraphNode_Root_07121E3545FDB81472FBAF961D78A7AF, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_08_AnimBP_C, AnimGraphNode_LocalRefPose_1EEA766841F908D228E6EF85B6ABA589, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_08_AnimBP_C, AnimGraphNode_BlendListByBool_89BA2C3F4412610D34BC4D921B1A58DF, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_08_AnimBP_C, AnimGraphNode_SequencePlayer_5F2552A4484B637197CB3C90FFE6F5C7, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture2_08_AnimBP_C, 0x0588);
		}

		// class ASaray_Winter_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Saray_Winter__Saray_Winter_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASaray_Winter_C, 0x0378);
		}

		// class ACliff2_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Cliff2__Cliff2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACliff2_C, 0x0370);
		}

		// class ABuilding_07_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Building_07__Building_07_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_07_C, Ladder_BP1, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABuilding_07_C, 0x0380);
		}

		// class UFurniture2_09_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture2_09_AnimBP__Furniture2_09_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_09_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_09_AnimBP_C, AnimGraphNode_Root_DBED33C34A6EE90F643E69907CEAB658, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_09_AnimBP_C, AnimGraphNode_LocalRefPose_AFA209FB41F0735BE2B3D393F89875FF, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_09_AnimBP_C, AnimGraphNode_BlendListByBool_BDDD06E04545389F8B873DA34CCB4C7A, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_09_AnimBP_C, AnimGraphNode_SequencePlayer_B4824AEA4F9AD1D8F3D800AE21A10236, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture2_09_AnimBP_C, 0x0588);
		}

		// class ACv3_SpawnLootFurniture_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv3_SpawnLootFurniture__Cv3_SpawnLootFurniture_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_SpawnLootFurniture_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_SpawnLootFurniture_C, SkeletalMesh, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_SpawnLootFurniture_C, DefaultSceneRoot, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_SpawnLootFurniture_C, FurnitureClass, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv3_SpawnLootFurniture_C, 0x0390);
		}

		// class USURV_GlobalMenuBase_C : public UGlobalMenu_ROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__SURV_GlobalMenuBase__SURV_GlobalMenuBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuBase_C, UberGraphFrame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuBase_C, GoOut, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuBase_C, FOV, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuBase_C, Slidemenu1, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuBase_C, BackgroundBlur_62, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuBase_C, ButtonsOverlay, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuBase_C, CloseButton, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuBase_C, CV3_OptionsBASE, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuBase_C, Exit, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuBase_C, ExitButton, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuBase_C, Image_1, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuBase_C, Image_2, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuBase_C, InventoryButton, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuBase_C, Map_MapBoxWidget, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuBase_C, OptionsButton, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuBase_C, PlayerCount, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuBase_C, RespawnButton, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuBase_C, ServerName, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuBase_C, SURV_GlobalMenuExit, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuBase_C, WidgetsOverlay, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuBase_C, proxySlotsCount, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USURV_GlobalMenuBase_C, 0x0374);
		}

		// class UFurniture2_10_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture2_10_AnimBP__Furniture2_10_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_10_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_10_AnimBP_C, AnimGraphNode_Root_1F8D8DB649E735D7C8EAAAA8B9C03073, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_10_AnimBP_C, AnimGraphNode_LocalRefPose_1908EDE94ED59FCD8FDA8EB130C618EF, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_10_AnimBP_C, AnimGraphNode_BlendListByBool_FE90BA5448152EBDD0933ABE84847AF1, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_10_AnimBP_C, AnimGraphNode_SequencePlayer_1936D4D645211733DC93348DA70255B8, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture2_10_AnimBP_C, 0x0588);
		}

		// class AIE_DoorA_Static_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__IE_DoorA_Static__IE_DoorA_Static_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIE_DoorA_Static_C, 0x0370);
		}

		// class ATunnel02Block01Damage_Prefab_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Tunnel02Block01Damage_Prefab__Tunnel02Block01Damage_Prefab_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATunnel02Block01Damage_Prefab_C, 0x0370);
		}

		// class AIE_Shelf_1_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__IE_Shelf_2__IE_Shelf_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIE_Shelf_1_C, 0x0370);
		}

		// class UFurniture2_12_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture2_12_AnimBP__Furniture2_12_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_12_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_12_AnimBP_C, AnimGraphNode_Root_1CE881AE49A5577802445B9ADEE241B4, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_12_AnimBP_C, AnimGraphNode_LocalRefPose_C21161AA47A2AEBD2E92249FA73528F3, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_12_AnimBP_C, AnimGraphNode_BlendListByBool_2EACE52841572B7A69501BB55CFE3960, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_12_AnimBP_C, AnimGraphNode_SequencePlayer_C7ECE1424D30BB3A7A0FEC8C1293108D, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture2_12_AnimBP_C, 0x0588);
		}

		// class AFenceB_Wire_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FenceB_Wire_Static_BP__FenceB_Wire_Static_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFenceB_Wire_Static_BP_C, Box, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFenceB_Wire_Static_BP_C, 0x0378);
		}

		// class AtransmitterTower_static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__transmitterTower_static_BP__transmitterTower_static_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AtransmitterTower_static_BP_C, Transmiter_tower_foundation, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AtransmitterTower_static_BP_C, IE_wires, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AtransmitterTower_static_BP_C, 0x0380);
		}

		// class UFurniture_10_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture_10_AnimBP__Furniture_10_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_10_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_10_AnimBP_C, AnimGraphNode_Root_A42F1AEC4695BEDD3E85D0AF92E651D7, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_10_AnimBP_C, AnimGraphNode_LocalRefPose_AE8AABDD43DB631E01596BB83AF10994, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_10_AnimBP_C, AnimGraphNode_BlendListByBool_A778F9F7433E683198EA7496D5B12023, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_10_AnimBP_C, AnimGraphNode_SequencePlayer_9648EE5642C5C753D8DA75BFD1AF0ECB, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture_10_AnimBP_C, 0x0588);
		}

		// class USet_of_Boxes_01_2_Rig_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Set_of_Boxes_01_2_Rig_AnimBP__Set_of_Boxes_01_2_Rig_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_01_2_Rig_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_01_2_Rig_AnimBP_C, AnimGraphNode_Root_A85858A148A89D1065D7628E0303B5DF, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_01_2_Rig_AnimBP_C, AnimGraphNode_LocalRefPose_BB49701948139AA3BBCA2B927FAB5013, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_01_2_Rig_AnimBP_C, AnimGraphNode_BlendListByBool_067A08EE4B9F10DA1D166984EBDB3DD3, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_01_2_Rig_AnimBP_C, AnimGraphNode_SequencePlayer_EFEBA35347347072023897A8D5DBA797, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USet_of_Boxes_01_2_Rig_AnimBP_C, 0x0588);
		}

		// class UYesNoDialog_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__YesNoDialog__YesNoDialog_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UYesNoDialog_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UYesNoDialog_C, Show, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UYesNoDialog_C, No, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UYesNoDialog_C, Yes, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UYesNoDialog_C, BorderConfirm, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UYesNoDialog_C, Button_No, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UYesNoDialog_C, Button_Yes, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UYesNoDialog_C, Fon, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UYesNoDialog_C, NoIcon, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UYesNoDialog_C, YesIcon, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UYesNoDialog_C, Click_Yes, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UYesNoDialog_C, Click_No, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UYesNoDialog_C, 0x0270);
		}

		// class ARadio_static_1_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Radio_static_2__Radio_static_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARadio_static_1_C, 0x0370);
		}

		// class AFixCharacter : public ACharacter
		TEST_METHOD(Class__Cv2_Base__FixCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFixCharacter, UnknownData_0GJC, 0x0780);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFixCharacter, 0x0790);
		}

		// class AFixPlayerController : public APlayerController
		TEST_METHOD(Class__Cv2_Base__FixPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFixPlayerController, UnknownData_1GZO, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFixPlayerController, LastCharacter, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFixPlayerController, 0x06D0);
		}

		// class UFurnitureAnimInstance : public UAnimInstance
		TEST_METHOD(Class__Cv2_Base__FurnitureAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurnitureAnimInstance, UnknownData_EKUS, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurnitureAnimInstance, 0x03C0);
		}

		// class UMyBlueprintFixes : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Cv2_Base__MyBlueprintFixes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMyBlueprintFixes, 0x0028);
		}

		// class UVehicleDustType : public UDataAsset
		TEST_METHOD(Class__Cv2_Base__VehicleDustType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleDustType, AsphaltFX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleDustType, DirtFX, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleDustType, WaterFX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleDustType, GrassFX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleDustType, GravelFX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleDustType, AsphaltMinSpeed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleDustType, DirtMinSpeed, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleDustType, WaterMinSpeed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleDustType, GrassMinSpeed, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleDustType, GravelMinSpeed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleDustType, UnknownData_MYRZ, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleDustType, 0x0070);
		}

		// class AFences_02_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Fences_02__Fences_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFences_02_C, 0x0378);
		}

		// class USawmill_Door_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Sawmill_Door_AnimBP__Sawmill_Door_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USawmill_Door_AnimBP_C, UnknownData_7CPN, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USawmill_Door_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USawmill_Door_AnimBP_C, AnimGraphNode_Root_9DE1D75D42814DB56249EEA66D1F3ED1, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USawmill_Door_AnimBP_C, AnimGraphNode_BlendListByBool_450FF0AD482D5BD28B56FAA566BB1B9D, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USawmill_Door_AnimBP_C, AnimGraphNode_SequencePlayer_4C8BE3E84179FD7C32C6FC87AB8AEA18, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USawmill_Door_AnimBP_C, AnimGraphNode_SequencePlayer_C9BEB0E54ED860612281A8B41CE3E74B, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::USawmill_Door_AnimBP_C, IsOpen, 0x05C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USawmill_Door_AnimBP_C, 0x05C1);
		}

		// class ACv4_CraftDoor_Base_Metal_C : public ACv4_CraftDoor_Base_C
		TEST_METHOD(BlueprintGeneratedClass__Cv4_CraftDoor_Base_Metal__Cv4_CraftDoor_Base_Metal_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv4_CraftDoor_Base_Metal_C, 0x03CC);
		}

		// class AZ_OnFloorInventoryActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Z_OnFloorInventoryActor__Z_OnFloorInventoryActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_OnFloorInventoryActor_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_OnFloorInventoryActor_C, FloorInventory, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_OnFloorInventoryActor_C, DefaultSceneRoot, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_OnFloorInventoryActor_C, Manager, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_OnFloorInventoryActor_C, LootActors, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_OnFloorInventoryActor_C, ClearArray, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZ_OnFloorInventoryActor_C, 0x03A8);
		}

		// class AEgozaOgrada1_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__EgozaOgrada1__EgozaOgrada1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEgozaOgrada1_C, egoza, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEgozaOgrada1_C, 0x0380);
		}

		// class AFurniture_17_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture_17_Rig__Furniture_17_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture_17_Rig_C, 0x03C2);
		}

		// class ASurv_Helicopter_C : public ACv2_BaseCar_4W_C
		TEST_METHOD(BlueprintGeneratedClass__Surv_Helicopter__Surv_Helicopter_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurv_Helicopter_C, 0x0940);
		}

		// class AJB_Fence_Static_BP_4_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__JB_Fence_Static_BP_5__JB_Fence_Static_BP_4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AJB_Fence_Static_BP_4_C, 0x0370);
		}

		// class AbrickGarage_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__brickGarage__brickGarage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickGarage_C, walls, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickGarage_C, Roof, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AbrickGarage_C, 0x0380);
		}

		// class ATorch_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Torch_BP__Torch_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATorch_BP_C, 0x0370);
		}

		// class ABuild_4_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Build_5__Build_4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABuild_4_C, 0x0370);
		}

		// class ASurv_DefaultPawn_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__Surv_DefaultPawn__Surv_DefaultPawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_DefaultPawn_C, Camera, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_DefaultPawn_C, DefaultSceneRoot, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurv_DefaultPawn_C, 0x03D8);
		}

		// class AFow_AIController_C : public AAIController
		TEST_METHOD(BlueprintGeneratedClass__Fow_AIController__Fow_AIController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_AIController_C, UberGraphFrame, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_AIController_C, NPC, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFow_AIController_C, 0x0470);
		}

		// class AFuelTank_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FuelTank__FuelTank_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFuelTank_C, 0x0370);
		}

		// class UWP_Overcast_C : public UWeatherPreset_C
		TEST_METHOD(BlueprintGeneratedClass__WP_Overcast__WP_Overcast_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWP_Overcast_C, 0x008C);
		}

		// class ATransformator_A_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Transformator_A_Static_BP__Transformator_A_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATransformator_A_Static_BP_C, 0x0370);
		}

		// class UFurniture_05_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture_05_AnimBP__Furniture_05_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_05_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_05_AnimBP_C, AnimGraphNode_Root_5DFF64BF42C159DB1A1909B99085E593, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_05_AnimBP_C, AnimGraphNode_LocalRefPose_6F337CE74F5864BBB29306BA6B4603FC, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_05_AnimBP_C, AnimGraphNode_BlendListByBool_9C499ECC4C2DF3DA9318B8896B6A327F, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_05_AnimBP_C, AnimGraphNode_SequencePlayer_9249E788445B9BD3C7F23C90051C66F1, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture_05_AnimBP_C, 0x0588);
		}

		// class AStoreCocoColo_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__StoreCocoColo__StoreCocoColo_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStoreCocoColo_C, 0x0370);
		}

		// class AFences_04_x3_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Fences_04_x3__Fences_04_x3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFences_04_x3_C, StaticMesh2, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFences_04_x3_C, StaticMesh1, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFences_04_x3_C, 0x0388);
		}

		// class ASkhaf_3_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Skhaf_4__Skhaf_3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkhaf_3_C, 0x0370);
		}

		// class UFurniture_11_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture_11_AnimBP__Furniture_11_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_11_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_11_AnimBP_C, AnimGraphNode_Root_873D9BAA47C78353515FBFB0F456D917, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_11_AnimBP_C, AnimGraphNode_LocalRefPose_7EA1AA6942B1EFF831E511B9A31D2369, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_11_AnimBP_C, AnimGraphNode_BlendListByBool_D957FC70481E60B3B46EBA8605A22650, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_11_AnimBP_C, AnimGraphNode_SequencePlayer_C9045D17475450641BE8339FB6B12018, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture_11_AnimBP_C, 0x0588);
		}

		// class AhiWoodFence02_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__hiWoodFence02__hiWoodFence02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AhiWoodFence02_C, 0x0378);
		}

		// class Avent_2_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__vent_3__vent_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Avent_2_C, 0x0370);
		}

		// class UGameOverTopString_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GameOverTopString__GameOverTopString_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverTopString_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverTopString_C, Show, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverTopString_C, Avatar, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverTopString_C, NameText, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverTopString_C, ParametrText, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverTopString_C, Place, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverTopString_C, ScoreText, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverTopString_C, Name, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverTopString_C, Parametr, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverTopString_C, Score, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverTopString_C, Icon, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverTopString_C, PlaceVar, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameOverTopString_C, 0x02A0);
		}

		// class AHiWood_Fence_Door_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__HiWood_Fence_Door_Static_BP__HiWood_Fence_Door_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHiWood_Fence_Door_Static_BP_C, 0x0370);
		}

		// class AFurniture_13_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture_13_Rig__Furniture_13_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture_13_Rig_C, 0x03C2);
		}

		// class ADMSpawnPoint_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__DMSpawnPoint_BP__DMSpawnPoint_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADMSpawnPoint_BP_C, DefaultSceneRoot, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADMSpawnPoint_BP_C, bWasUsed, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADMSpawnPoint_BP_C, 0x0371);
		}

		// class ASofa_06_older_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Sofa_06_older__Sofa_06_older_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASofa_06_older_C, 0x0370);
		}

		// class USurv_Car_Corolla_AnimBP_C : public UVehicleAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Surv_Car_Corolla_AnimBP__Surv_Car_Corolla_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Corolla_AnimBP_C, UberGraphFrame, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Corolla_AnimBP_C, AnimGraphNode_Root_FF65025A4491C95C118C9290DA60100B, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Corolla_AnimBP_C, AnimGraphNode_WheelHandler_BF6CCA734624DB6A008C3780F1940AEC, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Corolla_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_A9174BAD4F0F0D61149C5199A6F48187, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Corolla_AnimBP_C, AnimGraphNode_MeshRefPose_7E0109EA499006F59994DDBA35D28CC3, 0x09D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurv_Car_Corolla_AnimBP_C, 0x0A00);
		}

		// class UTimeOfDayPreset_C : public UObject
		TEST_METHOD(BlueprintGeneratedClass__TimeOfDayPreset__TimeOfDayPreset_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeOfDayPreset_C, Data, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeOfDayPreset_C, 0x00CC);
		}

		// class Acabinet27_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__cabinet27__cabinet27_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acabinet27_C, 0x0370);
		}

		// class AStove_06older_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Stove_06older_Rig__Stove_06older_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStove_06older_Rig_C, 0x03C2);
		}

		// class AContainerA_Static_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__ContainerA_Static__ContainerA_Static_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AContainerA_Static_C, 0x0370);
		}

		// class ARadio_static_5_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Radio_static_6__Radio_static_5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARadio_static_5_C, 0x0370);
		}

		// class ARockRamp_Curved_02_Prefab_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__RockRamp_Curved_02_Prefab__RockRamp_Curved_02_Prefab_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARockRamp_Curved_02_Prefab_C, 0x0370);
		}

		// class ATransformator_B_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Transformator_B_Static_BP__Transformator_B_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATransformator_B_Static_BP_C, 0x0370);
		}

		// class AMatrass_static_2_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Matrass_static_3__Matrass_static_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatrass_static_2_C, 0x0370);
		}

		// class AZnakiTownNames_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__ZnakiTownNames_BP__ZnakiTownNames_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AZnakiTownNames_BP_C, Dynamic_Mat, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZnakiTownNames_BP_C, E_Town, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZnakiTownNames_BP_C, isExit, 0x0379);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZnakiTownNames_BP_C, 0x037A);
		}

		// class ARock_Stairs_BP_3_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Rock_Stairs_BP_4__Rock_Stairs_BP_3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARock_Stairs_BP_3_C, 0x0370);
		}

		// class A_Rural_house_09_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass___Rural_house_09___Rural_house_09_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, _CraftDoor_Frame, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Door_06_Frame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Door_05_Frame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Door_04_Frame, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Socket_08, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Socket_07, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Socket_05, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Window_02, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Window_big, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Window_05, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Socket_06, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, StaticMesh12, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, StaticMesh11, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, StaticMesh10, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, StaticMesh9, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, StaticMesh7, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, StaticMesh6, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, StaticMesh4, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, StaticMesh2, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Door_06_Door_06_glass, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Chimney_Metal_Detail, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, big_glass, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, StaticMesh8, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, StaticMesh5, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Window_04, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, StaticMesh3, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Window_03, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, StaticMesh1, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Windows_01, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Socket_04, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Door_02_Door_02_details, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Door_02_Door_02, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Door_02_Frame, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Door_06_Door_06_Details, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Door_06_Door_06, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Door_03_Frame, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Fireplace_01, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Socket_03, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Socket_02, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Socket_01, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Electrical_Socket_02, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Electrical_Box_01, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Chimney_02, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Foundation_01, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Porch_01_Porch_01, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Peak_01, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Roof_11, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_09_C, Attic_01, 0x04F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_Rural_house_09_C, 0x04F8);
		}

		// class Acabinet29_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__cabinet29__cabinet29_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acabinet29_C, 0x0370);
		}

		// class ACv3_MatrasSpawn_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv3_MatrasSpawn__Cv3_MatrasSpawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_MatrasSpawn_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_MatrasSpawn_C, Box, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_MatrasSpawn_C, StaticMesh, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_MatrasSpawn_C, DefaultSceneRoot, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_MatrasSpawn_C, OwnerID, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_MatrasSpawn_C, HitPoints, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_MatrasSpawn_C, isDestroy, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_MatrasSpawn_C, UnknownData_S2OE, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_MatrasSpawn_C, DestructionMesh, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv3_MatrasSpawn_C, 0x03A8);
		}

		// class AFurniture_02_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture_02_Rig__Furniture_02_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture_02_Rig_C, 0x03C2);
		}

		// class Afan_1_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__fan_2__fan_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Afan_1_C, 0x0370);
		}

		// class ATubesB_Static_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__TubesB_Static__TubesB_Static_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATubesB_Static_C, 0x0370);
		}

		// class UCraftDoor_Metal_Rig_Skeleton_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__CraftDoor_Metal_Rig_Skeleton_AnimBP__CraftDoor_Metal_Rig_Skeleton_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftDoor_Metal_Rig_Skeleton_AnimBP_C, UnknownData_3KGL, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftDoor_Metal_Rig_Skeleton_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftDoor_Metal_Rig_Skeleton_AnimBP_C, AnimGraphNode_Root_C51C011A46FCE2762D96EAA87D425405, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftDoor_Metal_Rig_Skeleton_AnimBP_C, AnimGraphNode_SequencePlayer_161BEB1B49EC982AE7D1608317CAE666, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftDoor_Metal_Rig_Skeleton_AnimBP_C, AnimGraphNode_SequencePlayer_4EA21ACF45642B8650A713BF4BA3CD0F, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftDoor_Metal_Rig_Skeleton_AnimBP_C, AnimGraphNode_BlendListByBool_B820D354445ABF491A6BF28FD21F5343, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCraftDoor_Metal_Rig_Skeleton_AnimBP_C, IsOpen, 0x05C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCraftDoor_Metal_Rig_Skeleton_AnimBP_C, 0x05C1);
		}

		// class UMenu_InGame_Mouse_options_C : public UMenu_InGame_Panel_ROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Menu_InGame_Mouse_options__Menu_InGame_Mouse_options_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Mouse_options_C, UnknownData_34X6, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Mouse_options_C, UberGraphFrame, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Mouse_options_C, CheckBox_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Mouse_options_C, Image_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Mouse_options_C, Slider_43, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Mouse_options_C, Parent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Mouse_options_C, CurrentScale, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Mouse_options_C, UnknownData_59IQ, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Mouse_options_C, NewVar_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Mouse_options_C, Inversion, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Mouse_options_C, UnknownData_74TC, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Mouse_options_C, HeaderColor, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Mouse_options_C, ThemeColor, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Mouse_options_C, MaxScale, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenu_InGame_Mouse_options_C, 0x02B4);
		}

		// class AElectronic_Building_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Electronic_Building__Electronic_Building_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AElectronic_Building_C, Electronics_Building_Windows_Glass, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AElectronic_Building_C, Electronics_Building_Windows, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AElectronic_Building_C, Electronics_Building_Stone, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AElectronic_Building_C, Electronics_Building_stairs_2, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AElectronic_Building_C, Electronics_Building_Lamps, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AElectronic_Building_C, Electronics_Building_Vents, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AElectronic_Building_C, Electronics_Building_Rail, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AElectronic_Building_C, Electronics_Building_stairs, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AElectronic_Building_C, Electronics_Building_Text, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AElectronic_Building_C, Electronics_Building_Doors, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AElectronic_Building_C, Electrical_Box_01, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AElectronic_Building_C, 0x03D0);
		}

		// class AFurniture_11_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture_11_Rig__Furniture_11_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture_11_Rig_C, 0x03C2);
		}

		// class AFence_Brick_1_x3_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Fence_Brick_1_x3__Fence_Brick_1_x3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFence_Brick_1_x3_C, Fence_Brick_2destroyed, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFence_Brick_1_x3_C, Fence_Brick_1destroyed, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFence_Brick_1_x3_C, 0x0388);
		}

		// class UOverheadChatString_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__OverheadChatString__OverheadChatString_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverheadChatString_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverheadChatString_C, Show, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverheadChatString_C, TextBlock_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverheadChatString_C, Parent, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverheadChatString_C, 0x0220);
		}

		// class AFenceMetalWinter_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__FenceMetalWinter__FenceMetalWinter_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFenceMetalWinter_C, 0x0378);
		}

		// class AWall_Turn_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Wall_Turn_BP__Wall_Turn_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWall_Turn_BP_C, 0x0370);
		}

		// class ASet_of_Boxes_05_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Set_of_Boxes_05__Set_of_Boxes_05_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASet_of_Boxes_05_C, 0x03C2);
		}

		// class USURV_Inventory_widget_BASE_C : public UZ_InventoryBASE_ROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__SURV_Inventory_widget_BASE__SURV_Inventory_widget_BASE_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, UberGraphFrame, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, AddSlotsSizeBox, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, BackPackSlot, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, BarigaAvatar, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, BarigaButton, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, BarigaButton_C_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, BarigaButton_C_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, BarigaButton_C_3, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, BarigaButtons, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, BarigaOverlay, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, Body, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, Button_108, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, CategoryEquip, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, ContainerGrid, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, ContainerName, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, Face, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, Grenades, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, GridPanel_1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, HemletSlot, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, Inventory_MassWidget, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, InventoryRenderWidget, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, LeftOverlay, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, Legs, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, Magazine_pr, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, Magazine_sec, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, ManFon, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, Melee, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, Play, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, Player_Condition_BASE, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, Pr_2, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, Pr_3, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, Pymary, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, Sc_2, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, Sc_3, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, ScrollBox_1, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, Secondary, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, Shoes, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, SURV_InventoryCRAFTPanel, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, TrashBin, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, Weapons, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, Z_Inventory_Information, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, InventorySlotsWidgets, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, Slots, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, ContainerSlotsWidgets, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, TempLoot, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, TempDragObj, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, IsCraftShow, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, UnknownData_H4RC, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, AdditionalBackPackSlots, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, PrBaseFill, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, FloorSlotCount, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, ViewportX, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, ViewportY, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, IsTradeNow, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, UnknownData_738H, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, PARAMETR_OnFloorSlotsCount, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, BarigaButtonsArray, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, BarigaStr, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, UpdateSlotTimer, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, UseMouseAutoPosition, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, ContainerIsClear, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, IsTradeToAll, 0x047A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_widget_BASE_C, isMainMenu, 0x047B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USURV_Inventory_widget_BASE_C, 0x047C);
		}

		// class AMattress_01_1_Military_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Mattress_01_1_Military__Mattress_01_1_Military_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMattress_01_1_Military_C, 0x0370);
		}

		// class AChair_Static_4_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Chair_Static_5__Chair_Static_4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChair_Static_4_C, 0x0370);
		}

		// class UInfoWidgetBASE_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InfoWidgetBASE__InfoWidgetBASE_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, AddSurvcoins2, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, AddSurvcoins, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, Ping, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, FadeOut, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, Clock, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, CompasLine, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, ConnectProblem, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, CurentValue, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, Dyn_CrossHair, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, Image_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, Image_2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, Info_ArtileryPanel, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, Info_CarPanel, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, Info_CharacterPanel, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, Info_TankPanel, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, Info_TurrelPanel, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, PreviousValue, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, Temper, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, TextBlock_2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, Timer_Panel, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, PanelsArray, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, TypeArray, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, CurentType, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, UnknownData_84FY, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, TimeTimer, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, Zone_In, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, ContorllerVar, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, TempNow, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, ColdTemper, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, HotTemper, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, OldTEmp, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, OldIsNight, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, UnknownData_L214, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, TempTimer, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWidgetBASE_C, CheckTempTimer, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfoWidgetBASE_C, 0x0310);
		}

		// class AFurniture_20_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture_20_Rig__Furniture_20_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture_20_Rig_C, 0x03C2);
		}

		// class Acabinet23_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__cabinet23__cabinet23_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acabinet23_C, 0x0370);
		}

		// class ASurv_Car_Vaz_2101_C : public ACv2_BaseCar_4W_C
		TEST_METHOD(BlueprintGeneratedClass__Surv_Car_Vaz_2101__Surv_Car_Vaz_2101_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurv_Car_Vaz_2101_C, 0x0940);
		}

		// class ACv4_SpawnDestoryedPrefab_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv4_SpawnDestoryedPrefab__Cv4_SpawnDestoryedPrefab_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_SpawnDestoryedPrefab_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_SpawnDestoryedPrefab_C, StaticMesh, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_SpawnDestoryedPrefab_C, PrefabClass, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv4_SpawnDestoryedPrefab_C, 0x0380);
		}

		// class AWall_End_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Wall_End_BP__Wall_End_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWall_End_BP_C, 0x0370);
		}

		// class ACameraRig_Crane : public AActor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Crane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitch, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYaw, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneArmLength, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountPitch, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountYaw, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, UnknownData_PZ3C, 0x0376);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, TransformComponent, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYawControl, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitchControl, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneCameraMount, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Crane, 0x0398);
		}

		// class ACameraRig_Rail : public AActor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Rail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, CurrentPositionOnRail, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, UnknownData_M5XN, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, TransformComponent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailSplineComponent, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailCameraMount, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Rail, 0x0388);
		}

		// class ACineCameraActor : public ACameraActor
		TEST_METHOD(Class__CinematicCamera__CineCameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, LookatTrackingSettings, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, UnknownData_1A9Q, 0x08D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACineCameraActor, 0x08E0);
		}

		// class UCineCameraComponent : public UCameraComponent
		TEST_METHOD(Class__CinematicCamera__CineCameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackSettings, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensSettings, 0x081C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FocusSettings, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocalLength, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentAperture, 0x086C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocusDistance, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_5M0Z, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackPresets, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensPresets, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPresetName, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensPresetName, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFocalLength, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFStop, 0x08C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_748U, 0x08C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCineCameraComponent, 0x08D0);
		}

		// class UZ_InventoryComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__Z_InventoryComponent__Z_InventoryComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryComponent_C, UberGraphFrame, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryComponent_C, ContainerInfo_IfContainer_, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryComponent_C, IsContainer, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryComponent_C, UnknownData_O86K, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryComponent_C, InventoryManagers, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryComponent_C, LootIfClear, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryComponent_C, Inventory, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryComponent_C, InventorySLOTS, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryComponent_C, IsOnFloor, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryComponent_C, UnknownData_Q7Q5, 0x01C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryComponent_C, BackPackIndexes, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryComponent_C, OnLootAdded_ServerOnly_, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryComponent_C, OldLoot, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryComponent_C, IndexMainSlots, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryComponent_C, UnknownData_5GKF, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryComponent_C, Mass, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryComponent_C, OnLootRemove, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryComponent_C, MaxMass, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryComponent_C, UnknownData_VFWV, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryComponent_C, AttachSlotsIndexes, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZ_InventoryComponent_C, 0x0280);
		}

		// class AFurniture3_19_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture3_19_Rig__Furniture3_19_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture3_19_Rig_C, 0x03C2);
		}

		// class UMAP_FactoryMarker_C : public UMapMarkerROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__MAP_FactoryMarker__MAP_FactoryMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_FactoryMarker_C, UnknownData_GAVX, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_FactoryMarker_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_FactoryMarker_C, Image_1, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMAP_FactoryMarker_C, 0x0248);
		}

		// class AMattress_03_Military_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Mattress_03_Military__Mattress_03_Military_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMattress_03_Military_C, 0x0370);
		}

		// class AFurniture_10_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture_10_Rig__Furniture_10_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture_10_Rig_C, 0x03C2);
		}

		// class ABP_FastStylizedProceduralSky_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_FastStylizedProceduralSky__BP_FastStylizedProceduralSky_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, Moon_Comp, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, Sun_Comp, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, Dummy, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SkyMesh, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, DefaultSceneRoot, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, LightningTimeline__Direction_F96B14EF4E637E770014A3B52D13E35A, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_QMDA, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, LightningTimeline, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, TimeOfDay, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, TimeChangeSpeed, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, TimeCycleDuration, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UseTimeOfDayCurves, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_1HA9, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, TimeOfDayCurves, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WeatherPresetList, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SelectedWeatherPreset, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, ReloadSelectedWeather, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WeatherChangeMode, 0x041D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_GMRL, 0x041E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WeatherChangeDuration, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WeatherChangeTransition, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_BQ7U, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WeatherChangeAfterTime, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, TimeOfDaySettings, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, TimeOfDayPresetList, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, TimeOfDayPresetChange, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, MoonDirection, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SunHeight, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WeatherSettings, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_WK0C, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SkyMaterialInst, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WeatherPresetTarget, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WeatherPresetInterp, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_AV0H, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SkydomeMaterial, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SunLightSource_Weapons, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, MoonLightSource_Weapons, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, HeightFog, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SkyLight, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SkyLightRecaptureDelay, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_ICD9, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SkyLightStaticCubemaps, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SkyLightCubemapsTimeDriven, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_AOD3, 0x05C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, Saturation, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, CloudsBloom, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, CloudsFluffy, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UVHorizon, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UVRoundness, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UVScale, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, FogDirectionalInScattering, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UVBaseLayerPosition, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UVBaseLayerSize, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UVSecondLayerSize, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UVSecondLayerPosition, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, CloudsLayer1, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, CloudsLayer2, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, HorizonTilt, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WindForce, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SunRadius, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SunShine, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SunSaturation, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SunMaxAltitude, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SunAzimuth, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SunVisibleDuration, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SunDirectionTimeOfDay, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_TZRO, 0x065D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SunDirection, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, StarsBrightness, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, MoonBightness, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, MoonRadius, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, MoonClouds, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, MoonShine, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, MoonRoll, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, MoonVisibleDuration, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, MoonSyncedToSun, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_SDHH, 0x0689);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, MoonRotation, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WeatherFrom, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WeatherTo, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, MoonChangeSpeed, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WorldRotation, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WorldRotationSpeed, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_V52Y, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WorldLayerTexture, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WorldLayerFog, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WorldLayerDepth, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, WorldLayerColor, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SkyLightRecaptureTime, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, TimeOfDayFrom, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, TimeOfDayTo, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, TimeOfDayTransitionDuration, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, TimeOfDayTransition, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_N3W6, 0x07A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, TimeOfDayInterp, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, GroundShadowMaterial, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, GroundShadowScale, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, GroundShadowSoft, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, GroundShadowMaterialInst, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, CapureCubemapActor, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, CaptureMode, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_D3SK, 0x07D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, CaptureCubemapCount, 0x07D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, CaptureCubemapIndex, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, CaptureTimeDebug, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, CaptureModeActive, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_DLZF, 0x07E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, CaptureSavedTimeOfDay, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, CaptureSavesSunDirection, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UseWorldSpaceRotation, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_555O, 0x07F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SeletedWeatherPreset, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, version, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, TimeOfDayDataFrom, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, TimeOfDayDataTo, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, TimeOfDayPresetInterp, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, UnknownData_5K8Q, 0x094C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, TimeOfDayPresetTarget, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, LightningEpicenter, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, LightningIterations, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SkyLightIntensity, 0x0964);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, SkyLightLightning, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, DaysPassedBy, 0x096C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, OnWeatherPresetChanged, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, OnTimeOfDayPresetChanged, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, OnLightningPlayed, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, OptimizeTwoLights, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, DevelopMovie, 0x09A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FastStylizedProceduralSky_C, NightFastSpeed, 0x09A2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FastStylizedProceduralSky_C, 0x09A3);
		}

		// class AChair_Static_2_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Chair_Static_3__Chair_Static_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChair_Static_2_C, 0x0370);
		}

		// class UGameplayTask : public UObject
		TEST_METHOD(Class__GameplayTasks__GameplayTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_8A8F, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, InstanceName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_B9OX, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ResourceOverlapPolicy, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_RQ8G, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ChildTask, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask, 0x0068);
		}

		// class UGameplayTask_ClaimResource : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_ClaimResource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_ClaimResource, 0x0068);
		}

		// class UGameplayTask_SpawnActor : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_SpawnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, Success, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, DidNotSpawn, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, UnknownData_51YV, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, ClassToSpawn, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_SpawnActor, 0x00A8);
		}

		// class UGameplayTask_TimeLimitedExecution : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_TimeLimitedExecution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnFinished, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnTimeExpired, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, UnknownData_01ED, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_TimeLimitedExecution, 0x0098);
		}

		// class UGameplayTask_WaitDelay : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_WaitDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, OnFinish, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, UnknownData_GOQD, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_WaitDelay, 0x0080);
		}

		// class UGameplayTaskOwnerInterface : public UInterface
		TEST_METHOD(Class__GameplayTasks__GameplayTaskOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskOwnerInterface, 0x0028);
		}

		// class UGameplayTaskResource : public UObject
		TEST_METHOD(Class__GameplayTasks__GameplayTaskResource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, ManualResourceID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, AutoResourceID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_GLCG, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_C9IJ, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskResource, 0x0038);
		}

		// class UGameplayTasksComponent : public UActorComponent
		TEST_METHOD(Class__GameplayTasks__GameplayTasksComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_8WEN, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, SimulatedTasks, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TaskPriorityQueue, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_D12V, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TickingTasks, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, KnownTasks, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_NHKE, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, OnClaimedResourcesChange, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_NBGU, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTasksComponent, 0x0168);
		}

		// class USCORPION_Base_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__SCORPION_Base_AnimBP__SCORPION_Base_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USCORPION_Base_AnimBP_C, UnknownData_OW6V, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCORPION_Base_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCORPION_Base_AnimBP_C, AnimGraphNode_Root_779960EA4BF4E2381C135A9C644C514C, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCORPION_Base_AnimBP_C, AnimGraphNode_Slot_BCB8B54F49C8379C02309B8EA7E218B1, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCORPION_Base_AnimBP_C, AnimGraphNode_SequencePlayer_CE59BDD64EC00CFE15D09A9BC3D1EEDB, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USCORPION_Base_AnimBP_C, 0x04E8);
		}

		// class UAsyncTaskDownloadImage : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UMG__AsyncTaskDownloadImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnFail, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTaskDownloadImage, 0x0048);
		}

		// class UVisual : public UObject
		TEST_METHOD(Class__UMG__Visual)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisual, 0x0028);
		}

		// class UWidget : public UVisual
		TEST_METHOD(Class__UMG__Widget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Slot, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bIsEnabledDelegate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipTextDelegate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidgetDelegate, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, VisibilityDelegate, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransformPivot, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Cursor, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Clipping, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Visibility, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Navigation, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_7TKV, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, NativeBindings, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget, 0x00F8);
		}

		// class UPanelWidget : public UWidget
		TEST_METHOD(Class__UMG__PanelWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, Slots, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, UnknownData_Q5SN, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelWidget, 0x0110);
		}

		// class UContentWidget : public UPanelWidget
		TEST_METHOD(Class__UMG__ContentWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContentWidget, 0x0110);
		}

		// class UBackgroundBlur : public UContentWidget
		TEST_METHOD(Class__UMG__BackgroundBlur)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, Padding, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, HorizontalAlignment, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, VerticalAlignment, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bApplyAlphaToBlur, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_2E70, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurStrength, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bOverrideAutoRadiusCalculation, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_SMCX, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurRadius, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, LowQualityFallbackBrush, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_DEVF, 0x01A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlur, 0x01B8);
		}

		// class UPanelSlot : public UVisual
		TEST_METHOD(Class__UMG__PanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Parent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Content, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelSlot, 0x0038);
		}

		// class UBackgroundBlurSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BackgroundBlurSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, UnknownData_AXWK, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlurSlot, 0x0060);
		}

		// class UPropertyBinding : public UObject
		TEST_METHOD(Class__UMG__PropertyBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourceObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourcePath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, DestinationProperty, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyBinding, 0x0048);
		}

		// class UBoolBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BoolBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolBinding, 0x0048);
		}

		// class UBorder : public UContentWidget
		TEST_METHOD(Class__UMG__Border)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, HorizontalAlignment, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, VerticalAlignment, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_2T7J, 0x0113);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacity, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_VUEW, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacityDelegate, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Padding, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Background, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BackgroundDelegate, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColor, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColorDelegate, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, DesiredSizeScale, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonDownEvent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonUpEvent, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseMoveEvent, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseDoubleClickEvent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_X1RW, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorder, 0x0248);
		}

		// class UBorderSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BorderSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, UnknownData_KWM0, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorderSlot, 0x0060);
		}

		// class UBrushBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BrushBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBinding, UnknownData_41SA, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBinding, 0x0050);
		}

		// class UButton : public UContentWidget
		TEST_METHOD(Class__UMG__Button)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, Style, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, WidgetStyle, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ColorAndOpacity, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, BackgroundColor, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ClickMethod, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, TouchMethod, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, IsFocusable, 0x0372);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_LFUI, 0x0373);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnClicked, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnPressed, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnReleased, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnHovered, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnUnhovered, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_OL8S, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButton, 0x03D8);
		}

		// class UButtonSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ButtonSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, UnknownData_AGAH, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonSlot, 0x0060);
		}

		// class UCanvasPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__CanvasPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanel, UnknownData_LYY0, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanel, 0x0120);
		}

		// class UCanvasPanelSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__CanvasPanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, LayoutData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, bAutoSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_VVWR, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, ZOrder, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_1KKV, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanelSlot, 0x0070);
		}

		// class UCheckBox : public UContentWidget
		TEST_METHOD(Class__UMG__CheckBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedState, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_7ALB, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedStateDelegate, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Style, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedImage, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedHoveredImage, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedPressedImage, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedImage, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedHoveredImage, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedPressedImage, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedImage, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedHoveredImage, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedPressedImage, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, HorizontalAlignment, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_6ADL, 0x0669);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Padding, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_3YAH, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, BorderBackgroundColor, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, IsFocusable, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_LXU5, 0x06A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, OnCheckStateChanged, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_0E12, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBox, 0x06D0);
		}

		// class UCheckedStateBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__CheckedStateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckedStateBinding, UnknownData_PJS6, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckedStateBinding, 0x0050);
		}

		// class UCircularThrobber : public UWidget
		TEST_METHOD(Class__UMG__CircularThrobber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, NumberOfPieces, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Period, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Radius, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_3F7Q, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, PieceImage, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Image, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, bEnableRadius, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_FREU, 0x0189);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularThrobber, 0x01A0);
		}

		// class UColorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__ColorBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UColorBinding, UnknownData_Z3IZ, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UColorBinding, 0x0050);
		}

		// class UComboBox : public UWidget
		TEST_METHOD(Class__UMG__ComboBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, Items, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, OnGenerateWidgetEvent, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, bIsFocusable, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, UnknownData_O3VZ, 0x0119);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBox, 0x0130);
		}

		// class UComboBoxString : public UWidget
		TEST_METHOD(Class__UMG__ComboBoxString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, DefaultOptions, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, SelectedOption, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, WidgetStyle, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ItemStyle, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ContentPadding, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, MaxListHeight, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, HasDownArrow, 0x0A9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, EnableGamepadNavigationMode, 0x0A9D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_89IY, 0x0A9E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, Font, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ForegroundColor, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, bIsFocusable, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_JJEX, 0x0B21);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnGenerateWidgetEvent, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnSelectionChanged, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnOpening, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_ROI1, 0x0B58);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxString, 0x0B98);
		}

		// class UDragDropOperation : public UObject
		TEST_METHOD(Class__UMG__DragDropOperation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Tag, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Payload, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, DefaultDragVisual, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Pivot, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_UQSS, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Offset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_O4R7, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDrop, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragCancelled, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragged, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDragDropOperation, 0x0088);
		}

		// class UEditableText : public UWidget
		TEST_METHOD(Class__UMG__EditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Text, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, TextDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintText, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintTextDelegate, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, WidgetStyle, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Style, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageSelected, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageComposing, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, CaretImage, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Font, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ColorAndOpacity, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsReadOnly, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsPassword, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_FC34, 0x03DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, MinimumDesiredWidth, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsCaretMovedWhenGainFocus, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextWhenFocused, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, RevertTextOnEscape, 0x03E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ClearKeyboardFocusOnCommit, 0x03E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextOnCommit, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, AllowContextMenu, 0x03E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, KeyboardType, 0x03E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_XRMZ, 0x03E7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ShapedTextOptions, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextChanged, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextCommitted, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_Q1RG, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableText, 0x0420);
		}

		// class UEditableTextBox : public UWidget
		TEST_METHOD(Class__UMG__EditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Text, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, TextDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Style, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintText, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintTextDelegate, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Font, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ForegroundColor, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, BackgroundColor, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ReadOnlyForegroundColor, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsReadOnly, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsPassword, 0x0901);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_ETBN, 0x0902);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, MinimumDesiredWidth, 0x0904);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Padding, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsCaretMovedWhenGainFocus, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextWhenFocused, 0x0919);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, RevertTextOnEscape, 0x091A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ClearKeyboardFocusOnCommit, 0x091B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextOnCommit, 0x091C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, AllowContextMenu, 0x091D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, KeyboardType, 0x091E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_1ZPA, 0x091F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ShapedTextOptions, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextChanged, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextCommitted, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_2WQB, 0x0948);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBox, 0x0958);
		}

		// class UExpandableArea : public UWidget
		TEST_METHOD(Class__UMG__ExpandableArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_5KR1, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, Style, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderBrush, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderColor, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, bIsExpanded, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_NE3B, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, MaxHeight, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderPadding, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, AreaPadding, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, OnExpansionChanged, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderContent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BodyContent, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_A2U6, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExpandableArea, 0x02F8);
		}

		// class UFloatBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__FloatBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatBinding, 0x0048);
		}

		// class UGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__GridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, ColumnFill, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, RowFill, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, UnknownData_0EPU, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPanel, 0x0140);
		}

		// class UGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__GridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_OU0T, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Row, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, RowSpan, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Column, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, ColumnSpan, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Layer, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Nudge, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_ZIY4, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridSlot, 0x0070);
		}

		// class UHorizontalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__HorizontalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBox, UnknownData_CJAW, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBox, 0x0120);
		}

		// class UHorizontalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__HorizontalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Size, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_NRGJ, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBoxSlot, 0x0060);
		}

		// class UImage : public UWidget
		TEST_METHOD(Class__UMG__Image)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, Brush, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, BrushDelegate, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacity, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacityDelegate, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, OnMouseButtonDownEvent, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_TL85, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImage, 0x01C0);
		}

		// class UInputKeySelector : public UWidget
		TEST_METHOD(Class__UMG__InputKeySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, WidgetStyle, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, TextStyle, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, SelectedKey, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Font, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Margin, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, ColorAndOpacity, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, KeySelectionText, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, NoKeySpecifiedText, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowModifierKeys, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowGamepadKeys, 0x05C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_J11O, 0x05C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, EscapeKeys, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnKeySelected, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnIsSelectingKeyChanged, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_N01M, 0x05F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeySelector, 0x0608);
		}

		// class UInt32Binding : public UPropertyBinding
		TEST_METHOD(Class__UMG__Int32Binding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt32Binding, 0x0048);
		}

		// class UInvalidationBox : public UContentWidget
		TEST_METHOD(Class__UMG__InvalidationBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, bCanCache, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, CacheRelativeTransforms, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, UnknownData_34WM, 0x0112);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInvalidationBox, 0x0128);
		}

		// class UTableViewBase : public UWidget
		TEST_METHOD(Class__UMG__TableViewBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTableViewBase, 0x00F8);
		}

		// class UListView : public UTableViewBase
		TEST_METHOD(Class__UMG__ListView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ItemHeight, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_ULKE, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, Items, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, SelectionMode, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_K1F9, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, OnGenerateRowEvent, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_BJ6Y, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListView, 0x0138);
		}

		// class UMenuAnchor : public UContentWidget
		TEST_METHOD(Class__UMG__MenuAnchor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, MenuClass, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnGetMenuContentEvent, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, Placement, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, ShouldDeferPaintingAfterWindowContent, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UseApplicationMenuStack, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_BKYW, 0x012B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnMenuOpenChanged, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_N5UW, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenuAnchor, 0x0150);
		}

		// class UMouseCursorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__MouseCursorBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseCursorBinding, 0x0048);
		}

		// class UMovieScene2DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieScene2DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_MI8W, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Translation, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Rotation, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Scale, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Shear, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_A2QP, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformSection, 0x0430);
		}

		// class UMovieScene2DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieScene2DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformTrack, 0x00E0);
		}

		// class UMovieSceneMarginSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieSceneMarginSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, UnknownData_3V03, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, TopCurve, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, LeftCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, RightCurve, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, BottomCurve, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, UnknownData_GM7R, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginSection, 0x02E0);
		}

		// class UMovieSceneMarginTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieSceneMarginTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginTrack, 0x00E0);
		}

		// class UMovieSceneWidgetMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__UMG__MovieSceneWidgetMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, BrushPropertyNamePath, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, TrackName, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneWidgetMaterialTrack, 0x00E0);
		}

		// class UTextLayoutWidget : public UWidget
		TEST_METHOD(Class__UMG__TextLayoutWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, ShapedTextOptions, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Justification, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, AutoWrapText, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, UnknownData_6EDZ, 0x0102);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrapTextAt, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrappingPolicy, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, UnknownData_6ZNM, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Margin, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, LineHeightPercentage, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextLayoutWidget, 0x0120);
		}

		// class UMultiLineEditableText : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Text, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintText, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintTextDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, WidgetStyle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, bIsReadOnly, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_GR9G, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Font, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, AllowContextMenu, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_Z20H, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextChanged, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextCommitted, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_ZGEM, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableText, 0x03C0);
		}

		// class UMultiLineEditableTextBox : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Text, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintText, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintTextDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, WidgetStyle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, TextStyle, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, bIsReadOnly, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, AllowContextMenu, 0x0A51);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_J1NR, 0x0A52);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Style, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Font, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ForegroundColor, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, BackgroundColor, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ReadOnlyForegroundColor, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextChanged, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextCommitted, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_6VUT, 0x0B08);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableTextBox, 0x0B18);
		}

		// class UNamedSlot : public UContentWidget
		TEST_METHOD(Class__UMG__NamedSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedSlot, UnknownData_0O19, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlot, 0x0120);
		}

		// class AHiWood_Fence_Static_BP_5_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__HiWood_Fence_Static_BP_6__HiWood_Fence_Static_BP_5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHiWood_Fence_Static_BP_5_C, 0x0370);
		}

		// class UNamedSlotInterface : public UInterface
		TEST_METHOD(Class__UMG__NamedSlotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlotInterface, 0x0028);
		}

		// class UNativeWidgetHost : public UWidget
		TEST_METHOD(Class__UMG__NativeWidgetHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNativeWidgetHost, UnknownData_I5FA, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNativeWidgetHost, 0x0108);
		}

		// class UOverlay : public UPanelWidget
		TEST_METHOD(Class__UMG__Overlay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlay, UnknownData_FNXZ, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlay, 0x0120);
		}

		// class UOverlaySlot : public UPanelSlot
		TEST_METHOD(Class__UMG__OverlaySlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_2600, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlaySlot, 0x0058);
		}

		// class UProgressBar : public UWidget
		TEST_METHOD(Class__UMG__ProgressBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, WidgetStyle, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Style, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BackgroundImage, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillImage, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, MarqueeImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Percent, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BarFillType, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, bIsMarquee, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_91PF, 0x028E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BorderPadding, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, PercentDelegate, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacity, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacityDelegate, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_M52T, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressBar, 0x02D8);
		}

		// class URetainerBox : public UContentWidget
		TEST_METHOD(Class__UMG__RetainerBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnInvalidation, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnPhase, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_6VQU, 0x0112);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, Phase, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, PhaseCount, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_6PPL, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, EffectMaterial, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, TextureParameter, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_B094, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URetainerBox, 0x0140);
		}

		// class URichTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__RichTextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, Text, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, TextDelegate, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, Font, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, Color, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, Decorators, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_BEG6, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlock, 0x0398);
		}

		// class URichTextBlockDecorator : public UObject
		TEST_METHOD(Class__UMG__RichTextBlockDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlockDecorator, bReveal, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlockDecorator, UnknownData_DXE2, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlockDecorator, RevealedIndex, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockDecorator, 0x0030);
		}

		// class USafeZone : public UContentWidget
		TEST_METHOD(Class__UMG__SafeZone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadLeft, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadRight, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadTop, 0x0112);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadBottom, 0x0113);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, UnknownData_VGBA, 0x0114);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZone, 0x0128);
		}

		// class USafeZoneSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SafeZoneSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, bIsTitleSafe, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_44T9, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, SafeAreaScale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, HAlign, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, VAlign, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_8VXM, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, Padding, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZoneSlot, 0x0060);
		}

		// class UScaleBox : public UContentWidget
		TEST_METHOD(Class__UMG__ScaleBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, Stretch, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, StretchDirection, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_CVDU, 0x0112);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UserSpecifiedScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, IgnoreInheritedScale, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, bSingleLayoutPass, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_7C37, 0x011A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBox, 0x0130);
		}

		// class UScaleBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScaleBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, UnknownData_65Z5, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBoxSlot, 0x0060);
		}

		// class UScrollBar : public UWidget
		TEST_METHOD(Class__UMG__ScrollBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, WidgetStyle, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Style, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbar, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Orientation, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_6QMP, 0x0542);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Thickness, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_CW2P, 0x054C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBar, 0x0560);
		}

		// class UScrollBox : public UPanelWidget
		TEST_METHOD(Class__UMG__ScrollBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetStyle, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetBarStyle, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Style, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, BarStyle, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Orientation, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollBarVisibility, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ConsumeMouseWheel, 0x074A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_R9D8, 0x074B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarThickness, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbar, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AllowOverscroll, 0x0755);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationDestination, 0x0756);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_FYOP, 0x0757);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationScrollPadding, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAllowRightClickDragScrolling, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_U8VD, 0x075D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, OnUserScrolled, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_XNAR, 0x0770);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBox, 0x0788);
		}

		// class UScrollBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScrollBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, UnknownData_N1A5, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxSlot, 0x0058);
		}

		// class USizeBox : public UContentWidget
		TEST_METHOD(Class__UMG__SizeBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_EJ9J, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, WidthOverride, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, HeightOverride, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredWidth, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredHeight, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredWidth, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredHeight, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxAspectRatio, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_DJ58, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBox, 0x0140);
		}

		// class USizeBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SizeBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_UA4T, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBoxSlot, 0x0060);
		}

		// class USlateBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__SlateBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBlueprintLibrary, 0x0028);
		}

		// class USlateDataSheet : public UObject
		TEST_METHOD(Class__UMG__SlateDataSheet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateDataSheet, DataTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateDataSheet, UnknownData_DCU4, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateDataSheet, 0x0430);
		}

		// class USlateVectorArtData : public UObject
		TEST_METHOD(Class__UMG__SlateVectorArtData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, VertexData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, IndexData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, Material, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMax, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateVectorArtData, 0x0060);
		}

		// class USlider : public UWidget
		TEST_METHOD(Class__UMG__Slider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Value, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_SIMD, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, ValueDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, WidgetStyle, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Orientation, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_M1N7, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderBarColor, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderHandleColor, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IndentHandle, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Locked, 0x0325);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_2AUR, 0x0326);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, StepSize, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IsFocusable, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_5APW, 0x032D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureBegin, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureEnd, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureBegin, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureEnd, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnValueChanged, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_CMA9, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlider, 0x0390);
		}

		// class USpacer : public UWidget
		TEST_METHOD(Class__UMG__Spacer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, Size, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, UnknownData_134F, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpacer, 0x0110);
		}

		// class USpinBox : public UWidget
		TEST_METHOD(Class__UMG__SpinBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Value, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_1G1L, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ValueDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, WidgetStyle, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Style, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Delta, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SliderExponent, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Font, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Justification, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_U9F9, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinDesiredWidth, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ClearKeyboardFocusOnCommit, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SelectAllTextOnCommit, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_GP5P, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ForegroundColor, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueChanged, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueCommitted, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnBeginSliderMovement, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnEndSliderMovement, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_X5TK, 0x0489);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinValue, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxValue, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinSliderValue, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxSliderValue, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_GZKR, 0x049C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBox, 0x04B0);
		}

		// class UTextBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__TextBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBinding, UnknownData_F226, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBinding, 0x0050);
		}

		// class UTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__TextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Text, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, TextDelegate, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacity, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacityDelegate, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Font, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowOffset, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacity, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacityDelegate, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, MinDesiredWidth, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bWrapWithInvalidationPanel, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, UnknownData_941Z, 0x0205);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlock, 0x0218);
		}

		// class UThrobber : public UWidget
		TEST_METHOD(Class__UMG__Throbber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, NumberOfPieces, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateHorizontally, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateVertically, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateOpacity, 0x00FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_X45F, 0x00FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, PieceImage, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, Image, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_920P, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrobber, 0x0190);
		}

		// class UTileView : public UTableViewBase
		TEST_METHOD(Class__UMG__TileView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, ItemWidth, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, ItemHeight, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, Items, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, SelectionMode, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, UnknownData_4CAG, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, OnGenerateTileEvent, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, UnknownData_7VLN, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileView, 0x0138);
		}

		// class UUMGSequencePlayer : public UObject
		TEST_METHOD(Class__UMG__UMGSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_ETJ4, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, Animation, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_CXLL, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSequencePlayer, 0x0780);
		}

		// class UUniformGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__UniformGridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, SlotPadding, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotWidth, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotHeight, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, UnknownData_O579, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridPanel, 0x0138);
		}

		// class UUniformGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__UniformGridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, HorizontalAlignment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, VerticalAlignment, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_GT73, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Row, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Column, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_7GNN, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridSlot, 0x0050);
		}

		// class UUserWidget : public UWidget
		TEST_METHOD(Class__UMG__UserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_FKDL, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacity, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacityDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColor, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColorDelegate, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Padding, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ActiveSequencePlayers, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, StoppedSequencePlayers, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, NamedSlotBindings, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, WidgetTree, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Priority, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_KZOC, 0x01A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, InputComponent, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_FEBN, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserWidget, 0x0200);
		}

		// class UVerticalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__VerticalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBox, UnknownData_MRD5, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBox, 0x0120);
		}

		// class UVerticalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__VerticalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Size, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_DJS6, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBoxSlot, 0x0060);
		}

		// class UViewport : public UContentWidget
		TEST_METHOD(Class__UMG__Viewport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, BackgroundColor, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, UnknownData_YPJQ, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewport, 0x0138);
		}

		// class UVisibilityBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__VisibilityBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisibilityBinding, 0x0048);
		}

		// class UWidgetAnimation : public UMovieSceneSequence
		TEST_METHOD(Class__UMG__WidgetAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, OnAnimationStarted, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, OnAnimationFinished, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, MovieScene, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, AnimationBindings, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, UnknownData_8RVA, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimation, 0x0370);
		}

		// class UWidgetBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__WidgetBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBinding, 0x0048);
		}

		// class UWidgetBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__UMG__WidgetBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, WidgetTree, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, UnknownData_0M75, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Bindings, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Animations, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, NamedSlots, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, TemplateAsset, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Template, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintGeneratedClass, 0x0348);
		}

		// class UWidgetBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintLibrary, 0x0028);
		}

		// class UWidgetComponent : public UMeshComponent
		TEST_METHOD(Class__UMG__WidgetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_300K, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WidgetClass, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, DrawSize, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bManuallyRedraw, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bRedrawRequested, 0x06D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_94QW, 0x06D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RedrawTime, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_LBN0, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CurrentDrawSize, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bDrawAtDesiredSize, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_R2Y9, 0x06E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Pivot, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bReceiveHardwareInput, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bWindowFocusable, 0x06F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_QR27, 0x06F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OwnerPlayer, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BackgroundColor, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TintColorAndOpacity, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpacityFromTexture, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BlendMode, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bIsTwoSided, 0x0725);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TickWhenOffscreen, 0x0726);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_UPEU, 0x0727);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Widget, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_EDZS, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BodySetup, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial_OneSided, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial_OneSided, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial_OneSided, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RenderTarget, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaterialInstance, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bAddedToScreen, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bEditTimeUsable, 0x0799);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_PPRQ, 0x079A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, SharedLayerName, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, LayerZOrder, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, GeometryMode, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_VKD8, 0x07AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CylinderArcAngle, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_WRFU, 0x07B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetComponent, 0x07E0);
		}

		// class UWidgetInteractionComponent : public USceneComponent
		TEST_METHOD(Class__UMG__WidgetInteractionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, OnHoveredWidgetChanged, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_F7G6, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, VirtualUserIndex, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, PointerIndex, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, TraceChannel, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_T6EG, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionDistance, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionSource, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bEnableHitTesting, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bShowDebug, 0x02C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_Z0M8, 0x02C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugColor, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_LHFL, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, CustomHitResult, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LocalHitLocation, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastLocalHitLocation, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, HoveredWidgetComponent, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastHitResult, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetInteractable, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetFocusable, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetHitTestVisible, 0x047A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_UYNJ, 0x047B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetInteractionComponent, 0x0480);
		}

		// class UWidgetLayoutLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetLayoutLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetLayoutLibrary, 0x0028);
		}

		// class UWidgetNavigation : public UObject
		TEST_METHOD(Class__UMG__WidgetNavigation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Up, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Down, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Left, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Right, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Next, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Previous, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetNavigation, 0x00B8);
		}

		// class UWidgetSwitcher : public UPanelWidget
		TEST_METHOD(Class__UMG__WidgetSwitcher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, ActiveWidgetIndex, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, UnknownData_UCDX, 0x0114);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcher, 0x0128);
		}

		// class UWidgetSwitcherSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WidgetSwitcherSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_Q4LW, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcherSlot, 0x0058);
		}

		// class UWidgetTree : public UObject
		TEST_METHOD(Class__UMG__WidgetTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetTree, RootWidget, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetTree, AllWidgets, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetTree, 0x0040);
		}

		// class UWindowTitleBarArea : public UContentWidget
		TEST_METHOD(Class__UMG__WindowTitleBarArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bDoubleClickTogglesFullscreen, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, UnknownData_WDYN, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarArea, 0x0130);
		}

		// class UWindowTitleBarAreaSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WindowTitleBarAreaSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, UnknownData_7LC5, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarAreaSlot, 0x0060);
		}

		// class UWrapBox : public UPanelWidget
		TEST_METHOD(Class__UMG__WrapBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, InnerSlotPadding, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, WrapWidth, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, bExplicitWrapWidth, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, UnknownData_BDCQ, 0x011D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBox, 0x0130);
		}

		// class UWrapBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WrapBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, bFillEmptySpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_39VE, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, FillSpanWhenLessThan, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_4NMP, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBoxSlot, 0x0060);
		}

		// class ACableActor : public AActor
		TEST_METHOD(Class__CableComponent__CableActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACableActor, CableComponent, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACableActor, 0x0370);
		}

		// class UCableComponent : public UMeshComponent
		TEST_METHOD(Class__CableComponent__CableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_5QNZ, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, AttachEndTo, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, AttachEndToSocketName, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, EndLocation, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableLength, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, NumSegments, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, SubstepTime, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, SolverIterations, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bEnableStiffness, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bEnableCollision, 0x06FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_GQ04, 0x06FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CollisionFriction, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableForce, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableGravityScale, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableWidth, 0x0714);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, NumSides, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, TileMaterial, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_4Y3O, 0x0720);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCableComponent, 0x0740);
		}

		// class ASurv_Car_Zil130_C : public ACv2_BaseCar_4W_C
		TEST_METHOD(BlueprintGeneratedClass__Surv_Car_Zil130__Surv_Car_Zil130_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurv_Car_Zil130_C, 0x0940);
		}

		// class UPointer_City_C : public UPointer_Root_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Pointer_City__Pointer_City_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_City_C, UnknownData_9S1S, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_City_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_City_C, Border_3, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_City_C, MAP_RoundProgress, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_City_C, TextBlock_78, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_City_C, TextMarker, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_City_C, Zone, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_City_C, OldAlliedsPoint, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_City_C, OldAxisPoints, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_City_C, DeltaAxis, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_City_C, DeltaAllieds, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_City_C, Distance, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointer_City_C, 0x026C);
		}

		// class ADestructibleActor : public AActor
		TEST_METHOD(Class__ApexDestruction__DestructibleActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleActor, DestructibleComponent, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleActor, UnknownData_5BT4, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleActor, OnActorFracture, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADestructibleActor, 0x0388);
		}

		// class UDestructibleComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__ApexDestruction__DestructibleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_L19F, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_11DY, 0x0849);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, FractureEffects, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, bEnableHardSleeping, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_AFUN, 0x0861);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, LargeChunkThreshold, 0x0864);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_XWCQ, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, OnComponentFracture, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_8STF, 0x0888);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleComponent, 0x0920);
		}

		// class UDestructibleFractureSettings : public UObject
		TEST_METHOD(Class__ApexDestruction__DestructibleFractureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, CellSiteCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, FractureMaterialDesc, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, RandomSeed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_34FC, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, VoronoiSites, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, OriginalSubmeshCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_4PTS, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, Materials, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, ChunkParameters, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_ZYHX, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleFractureSettings, 0x00B8);
		}

		// class UDestructibleMesh : public USkeletalMesh
		TEST_METHOD(Class__ApexDestruction__DestructibleMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, DefaultDestructibleParameters, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, FractureEffects, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, UnknownData_7KO4, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleMesh, 0x0380);
		}

		// class Agarbage2_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__garbage2__garbage2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agarbage2_C, 0x0370);
		}

		// class AWheeledVehicle : public APawn
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheeledVehicle, Mesh, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheeledVehicle, VehicleMovement, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWheeledVehicle, 0x03D8);
		}

		// class UWheeledVehicleMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicleMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_ENIF, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_FP5F, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WheelSetups, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Mass, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragCoefficient, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisWidth, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisHeight, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, bReverseAsBrake, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_BCT1, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragArea, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, EstimatedMaxEngineSpeed, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxEngineRPM, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DebugDragMagnitude, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, InertiaTensorScale, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoad, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoadFiltered, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoad, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoadFiltered, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThresholdLongitudinalSpeed, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, LowForwardSpeedSubStepCount, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HighForwardSpeedSubStepCount, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_S7UN, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Wheels, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_NN5U, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_YAUJ, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOAvoidanceRadius, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOAvoidanceHeight, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceConsiderationRadius, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOSteeringStep, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOThrottleStep, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceUID, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceGroup, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, GroupsToAvoid, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, GroupsToIgnore, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceWeight, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, PendingLaunchVelocity, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ReplicatedState, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_N1BF, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawSteeringInput, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawThrottleInput, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawBrakeInput, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_CJ91, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInput, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInput, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInput, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInput, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, IdleBrakeInput, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, StopThreshold, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WrongDirectionThreshold, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInputRate, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInputRate, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInputRate, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInputRate, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_O6CX, 0x02AD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent, 0x02D8);
		}

		// class AStove_03older_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Stove_03older_Rig__Stove_03older_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStove_03older_Rig_C, 0x03C2);
		}

		// class UWheeledVehicleMovementComponent4W : public UWheeledVehicleMovementComponent
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicleMovementComponent4W)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, EngineSetup, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, DifferentialSetup, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, UnknownData_RHTS, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, TransmissionSetup, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, SteeringCurve, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, AckermannAccuracy, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, UnknownData_PGG0, 0x0434);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent4W, 0x0438);
		}

		// class USimpleWheeledVehicleMovementComponent : public UWheeledVehicleMovementComponent
		TEST_METHOD(Class__PhysXVehicles__SimpleWheeledVehicleMovementComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleWheeledVehicleMovementComponent, 0x02D8);
		}

		// class UTireConfig : public UDataAsset
		TEST_METHOD(Class__PhysXVehicles__TireConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, FrictionScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, UnknownData_HM0D, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, TireFrictionScales, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, UnknownData_381O, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireConfig, 0x0050);
		}

		// class UVehicleAnimInstance : public UAnimInstance
		TEST_METHOD(Class__PhysXVehicles__VehicleAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_TCFC, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_N0D1, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, WheeledVehicleMovementComponent, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_D1NV, 0x08A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleAnimInstance, 0x08B0);
		}

		// class UVehicleWheel : public UObject
		TEST_METHOD(Class__PhysXVehicles__VehicleWheel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, CollisionMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bDontCreateShape, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAutoAdjustCollisionSize, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_G84T, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Offset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeRadius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeWidth, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Mass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DampingRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SteerAngle, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAffectedByHandbrake, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_PEFZ, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireConfig, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffMaxLoad, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffValue, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LongStiffValue, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionForceOffset, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxRaise, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxDrop, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionNaturalFrequency, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionDampingRatio, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SweepType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_DPX4, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxBrakeTorque, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxHandBrakeTorque, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_EKI9, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, VehicleSim, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, WheelIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongSlip, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatSlip, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugNormalizedTireLoad, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_0GL4, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugWheelTorque, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongForce, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatForce, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Location, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, OldLocation, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Velocity, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_HHK8, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleWheel, 0x00F0);
		}

		// class Acontainer6_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__container6__container6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acontainer6_C, 0x0378);
		}

		// class ATankVehicle : public AWheeledVehicle
		TEST_METHOD(Class__VehiclesPlugin__TankVehicle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATankVehicle, 0x03D8);
		}

		// class AWheeledVehicle10W : public AWheeledVehicle
		TEST_METHOD(Class__VehiclesPlugin__WheeledVehicle10W)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWheeledVehicle10W, 0x03D8);
		}

		// class AWheeledVehicle12W : public AWheeledVehicle
		TEST_METHOD(Class__VehiclesPlugin__WheeledVehicle12W)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWheeledVehicle12W, 0x03D8);
		}

		// class AWheeledVehicle14W : public AWheeledVehicle
		TEST_METHOD(Class__VehiclesPlugin__WheeledVehicle14W)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWheeledVehicle14W, 0x03D8);
		}

		// class AWheeledVehicle16W : public AWheeledVehicle
		TEST_METHOD(Class__VehiclesPlugin__WheeledVehicle16W)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWheeledVehicle16W, 0x03D8);
		}

		// class AWheeledVehicle6W : public AWheeledVehicle
		TEST_METHOD(Class__VehiclesPlugin__WheeledVehicle6W)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWheeledVehicle6W, 0x03D8);
		}

		// class AWheeledVehicle8W : public AWheeledVehicle
		TEST_METHOD(Class__VehiclesPlugin__WheeledVehicle8W)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWheeledVehicle8W, 0x03D8);
		}

		// class UWheeledVehicleMovementComponent10W : public UWheeledVehicleMovementComponent4W
		TEST_METHOD(Class__VehiclesPlugin__WheeledVehicleMovementComponent10W)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent10W, 0x0438);
		}

		// class UWheeledVehicleMovementComponent12W : public UWheeledVehicleMovementComponent4W
		TEST_METHOD(Class__VehiclesPlugin__WheeledVehicleMovementComponent12W)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent12W, 0x0438);
		}

		// class UWheeledVehicleMovementComponent14W : public UWheeledVehicleMovementComponent4W
		TEST_METHOD(Class__VehiclesPlugin__WheeledVehicleMovementComponent14W)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent14W, 0x0438);
		}

		// class UWheeledVehicleMovementComponent16W : public UWheeledVehicleMovementComponent4W
		TEST_METHOD(Class__VehiclesPlugin__WheeledVehicleMovementComponent16W)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent16W, 0x0438);
		}

		// class UWheeledVehicleMovementComponent6W : public UWheeledVehicleMovementComponent4W
		TEST_METHOD(Class__VehiclesPlugin__WheeledVehicleMovementComponent6W)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent6W, 0x0438);
		}

		// class UWheeledVehicleMovementComponent8W : public UWheeledVehicleMovementComponent4W
		TEST_METHOD(Class__VehiclesPlugin__WheeledVehicleMovementComponent8W)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent8W, 0x0438);
		}

		// class UWheeledVehicleMovementComponentTank : public UWheeledVehicleMovementComponent
		TEST_METHOD(Class__VehiclesPlugin__WheeledVehicleMovementComponentTank)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponentTank, EngineSetup, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponentTank, TransmissionSetup, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponentTank, SteeringCurve, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponentTank, AckermannAccuracy, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponentTank, SteeringLeftInput, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponentTank, SteeringRightInput, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponentTank, BrakeLeftInput, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponentTank, BrakeRightInput, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponentTank, RawSteeringLeftInput, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponentTank, RawSteeringRightInput, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponentTank, bRawBrakeRightInput, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponentTank, bRawBrakeLeftInput, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponentTank, IdleBrakeInputLeft, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponentTank, IdleBrakeInputRight, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponentTank, SteeringLeftRate, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponentTank, SteeringRightRate, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponentTank, BrakeLeftRate, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponentTank, BrakeRightRate, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponentTank, RepTankState, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponentTank, NumRollers, 0x046C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponentTank, 0x0470);
		}

		// class UCompasLine_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CompasLine__CompasLine_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompasLine_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompasLine_C, CanvasPanel_4, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompasLine_C, Fon, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompasLine_C, Image_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompasLine_C, Image_2, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompasLine_C, Image_3, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompasLine_C, MarkersOverlay, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompasLine_C, Actors, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompasLine_C, WidgetsActors, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompasLine_C, LocationsArray, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompasLine_C, WidgetsLocation, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompasLine_C, DeleteIndex, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompasLine_C, 0x027C);
		}

		// class ACv3_GameMode_C : public AGameMode
		TEST_METHOD(BlueprintGeneratedClass__Cv3_GameMode__Cv3_GameMode_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_GameMode_C, UberGraphFrame, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_GameMode_C, DefaultSceneRoot, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_GameMode_C, IS_SINGLEMODE, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv3_GameMode_C, 0x0449);
		}

		// class UDmgTypeBP_Environmental_C : public UDamageType
		TEST_METHOD(BlueprintGeneratedClass__DmgTypeBP_Environmental__DmgTypeBP_Environmental_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDmgTypeBP_Environmental_C, 0x0040);
		}

		// class UMaterialExpressionSpriteTextureSampler : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Paper2D__MaterialExpressionSpriteTextureSampler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, bSampleAdditionalTextures, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, UnknownData_VOX3, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, AdditionalSlotIndex, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, SlotDisplayName, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpriteTextureSampler, 0x01D8);
		}

		// class APaperCharacter : public ACharacter
		TEST_METHOD(Class__Paper2D__PaperCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperCharacter, Sprite, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperCharacter, UnknownData_EFDR, 0x0788);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperCharacter, 0x0790);
		}

		// class UPaperFlipbook : public UObject
		TEST_METHOD(Class__Paper2D__PaperFlipbook)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, FramesPerSecond, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, UnknownData_SMYE, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, KeyFrames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, DefaultMaterial, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, CollisionSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, UnknownData_KNR4, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperFlipbook, 0x0050);
		}

		// class APaperFlipbookActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperFlipbookActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperFlipbookActor, RenderComponent, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperFlipbookActor, 0x0370);
		}

		// class UPaperFlipbookComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperFlipbookComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, SourceFlipbook, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, Material, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, PlayRate, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, UnknownData_OQ59, 0x06CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, AccumulatedTime, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, CachedFrameIndex, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, SpriteColor, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, CachedBodySetup, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, OnFinishedPlaying, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperFlipbookComponent, 0x0700);
		}

		// class APaperGroupedSpriteActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperGroupedSpriteActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperGroupedSpriteActor, RenderComponent, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperGroupedSpriteActor, 0x0370);
		}

		// class UPaperGroupedSpriteComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperGroupedSpriteComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, InstanceMaterials, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, PerInstanceSpriteData, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, UnknownData_7TJS, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperGroupedSpriteComponent, 0x06F0);
		}

		// class UPaperRuntimeSettings : public UObject
		TEST_METHOD(Class__Paper2D__PaperRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bEnableSpriteAtlasGroups, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bEnableTerrainSplineEditing, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bResizeSpriteDataToMatchTextures, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, UnknownData_MU8I, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperRuntimeSettings, 0x0030);
		}

		// class UPaperSprite : public UObject
		TEST_METHOD(Class__Paper2D__PaperSprite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_A5QV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, SourceUV, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, SourceDimension, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, SourceTexture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AdditionalSourceTextures, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceUV, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceDimension, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceTexture, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, DefaultMaterial, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AlternateMaterial, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, Sockets, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, SpriteCollisionDomain, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_E8PO, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, PixelsPerUnrealUnit, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BodySetup, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AlternateMaterialSplitIndex, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_NMKD, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedRenderData, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSprite, 0x00C0);
		}

		// class APaperSpriteActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperSpriteActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperSpriteActor, RenderComponent, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperSpriteActor, 0x0370);
		}

		// class UPaperSpriteAtlas : public UObject
		TEST_METHOD(Class__Paper2D__PaperSpriteAtlas)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteAtlas, 0x0028);
		}

		// class UPaperSpriteBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Paper2D__PaperSpriteBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteBlueprintLibrary, 0x0028);
		}

		// class UPaperSpriteComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperSpriteComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, SourceSprite, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, MaterialOverride, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, SpriteColor, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, UnknownData_E9ID, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteComponent, 0x06E0);
		}

		// class APaperTerrainActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperTerrainActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, DummyRoot, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, SplineComponent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTerrainActor, RenderComponent, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperTerrainActor, 0x0380);
		}

		// class UPaperTerrainComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Paper2D__PaperTerrainComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, TerrainMaterial, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, bClosedSpline, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, bFilledSpline, 0x0699);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_A8BL, 0x069A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, AssociatedSpline, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, RandomSeed, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, SegmentOverlapAmount, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, TerrainColor, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, ReparamStepsPerSegment, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, SpriteCollisionDomain, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_68TP, 0x06C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, CollisionThickness, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_YG4F, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, CachedBodySetup, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_TE1E, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainComponent, 0x06F0);
		}

		// class UPaperTerrainMaterial : public UDataAsset
		TEST_METHOD(Class__Paper2D__PaperTerrainMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainMaterial, Rules, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainMaterial, InteriorFill, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainMaterial, 0x0048);
		}

		// class UPaperTerrainSplineComponent : public USplineComponent
		TEST_METHOD(Class__Paper2D__PaperTerrainSplineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainSplineComponent, UnknownData_0H9J, 0x0780);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainSplineComponent, 0x07C0);
		}

		// class UPaperTileLayer : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerWidth, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerHeight, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, UnknownData_O7X8, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, CollisionThicknessOverride, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, CollisionOffsetOverride, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerColor, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedWidth, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedHeight, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, UnknownData_TU9H, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedCells, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, TileSet, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedGrid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileLayer, 0x0098);
		}

		// class UPaperTileMap : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, MapWidth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, MapHeight, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileWidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileHeight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, PixelsPerUnrealUnit, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerTileX, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerTileY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerLayer, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SelectedTileSet, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, Material, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileLayers, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, CollisionThickness, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SpriteCollisionDomain, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, ProjectionMode, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_Q2PE, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, HexSideLength, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_5WME, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, BodySetup, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, LayerNameIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_ZGJW, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileMap, 0x00A8);
		}

		// class APaperTileMapActor : public AActor
		TEST_METHOD(Class__Paper2D__PaperTileMapActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaperTileMapActor, RenderComponent, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaperTileMapActor, 0x0370);
		}

		// class UPaperTileMapComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperTileMapComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UnknownData_WS0V, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, MapHeight, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileWidth, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileHeight, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, DefaultLayerTileSet, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, Material, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileLayers, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileMapColor, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UseSingleLayerIndex, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, bUseSingleLayer, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UnknownData_LD1L, 0x06FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileMap, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UnknownData_8MGR, 0x0708);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileMapComponent, 0x0710);
		}

		// class UPaperTileSet : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileSheet, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AdditionalSourceTextures, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, BorderMargin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, PerTileSpacing, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, DrawingOffset, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, WidthInTiles, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, HeightInTiles, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AllocatedWidth, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AllocatedHeight, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, PerTileData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Terrains, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileWidth, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileHeight, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Margin, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Spacing, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileSet, 0x00A8);
		}

		// class UTileMapBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Paper2D__TileMapBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileMapBlueprintLibrary, 0x0028);
		}

		// class AArchVisCharacter : public ACharacter
		TEST_METHOD(Class__ArchVisCharacter__ArchVisCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, LookUpAxisName, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, LookUpAtRateAxisName, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, TurnAxisName, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, TurnAtRateAxisName, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MoveForwardAxisName, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MoveRightAxisName, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MouseSensitivityScale_Pitch, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MouseSensitivityScale_Yaw, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, UnknownData_OPU3, 0x07E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AArchVisCharacter, 0x07F0);
		}

		// class UArchVisCharMovementComponent : public UCharacterMovementComponent
		TEST_METHOD(Class__ArchVisCharacter__ArchVisCharMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, RotationalAcceleration, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, RotationalDeceleration, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MaxRotationalVelocity, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MinPitch, 0x073C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MaxPitch, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingFriction, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingSpeed, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingAcceleration, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, UnknownData_E8LI, 0x0750);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArchVisCharMovementComponent, 0x0770);
		}

		// class AWall_Cross_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Wall_Cross_BP__Wall_Cross_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWall_Cross_BP_C, 0x0370);
		}

		// class AMap_Coord_Actors_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Map_Coord_Actors__Map_Coord_Actors_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMap_Coord_Actors_C, DefaultSceneRoot, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMap_Coord_Actors_C, 0x0370);
		}

		// class AFences_02_x3_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Fences_02_x3__Fences_02_x3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFences_02_x3_C, StaticMesh2, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFences_02_x3_C, StaticMesh1, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFences_02_x3_C, 0x0388);
		}

		// class UZ_InventoryInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__Z_InventoryInterface__Z_InventoryInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZ_InventoryInterface_C, 0x0028);
		}

		// class AFurniture3_12_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture3_12_Rig__Furniture3_12_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture3_12_Rig_C, 0x03C2);
		}

		// class ACv3_ScenarioShkafBase_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv3_ScenarioShkafBase__Cv3_ScenarioShkafBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_ScenarioShkafBase_C, Cupboard_Metal_01, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_ScenarioShkafBase_C, DefaultSceneRoot, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_ScenarioShkafBase_C, VillageController, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_ScenarioShkafBase_C, ResourceType, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv3_ScenarioShkafBase_C, 0x0381);
		}

		// class AFurniture2_13_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture2_13_Rig__Furniture2_13_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture2_13_Rig_C, 0x03C2);
		}

		// class ALamp_2_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Lamp_3__Lamp_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALamp_2_C, 0x0370);
		}

		// class UChatMessageString_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ChatMessageString__ChatMessageString_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatMessageString_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatMessageString_C, Border_1, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatMessageString_C, Button_Mute, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatMessageString_C, Image_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatMessageString_C, MessageText, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatMessageString_C, MuteIcon, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatMessageString_C, Nick, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatMessageString_C, IsMuteNow, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatMessageString_C, UnknownData_1U3B, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatMessageString_C, ChatRef, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatMessageString_C, ChatStr, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChatMessageString_C, 0x0290);
		}

		// class APlayground_Object_10_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Playground_Object_11__Playground_Object_10_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayground_Object_10_C, 0x0378);
		}

		// class UFoliageInstancedStaticMeshComponent : public UHierarchicalInstancedStaticMeshComponent
		TEST_METHOD(Class__Foliage__FoliageInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakePointDamage, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakeRadialDamage, 0x0910);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageInstancedStaticMeshComponent, 0x0920);
		}

		// class UFoliageStatistics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Foliage__FoliageStatistics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageStatistics, 0x0028);
		}

		// class UFoliageType : public UObject
		TEST_METHOD(Class__Foliage__FoliageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UpdateGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Density, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DensityAdjustmentFactor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Radius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Scaling, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_M3O9, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleY, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleZ, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskByChannel, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMask, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_C4SW, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskThreshold, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_YMLP, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ZOffset, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_3WAO, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AlignMaxAngle, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_QWVR, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RandomPitchAngle, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, GroundSlopeAngle, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Height, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_U6CO, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayer, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_CE45, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionScale, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumLayerWeight, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MeshBounds, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LowBoundOriginRadius, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Mobility, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_LMBB, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CullDistance, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_TPXI, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverriddenLightMapRes, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_DPS0, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, BodyInstance, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomNavigableGeometry, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightingChannels, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_H7OZ, 0x0372);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_97JF, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomDepthStencilValue, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionRadius, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ShadeRadius, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, NumSteps, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, InitialSeedDensity, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AverageSpreadDistance, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SpreadVariance, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SeedsPerStep, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DistributionSeed, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialSeedOffset, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bCanGrowInShade, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSpawnsInShade, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_5DZ8, 0x03A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialAge, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxAge, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverlapPriority, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ProceduralScale, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleCurve, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ChangeCount, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_PIF7, 0x0436);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType, 0x0438);
		}

		// class UFoliageType_InstancedStaticMesh : public UFoliageType
		TEST_METHOD(Class__Foliage__FoliageType_InstancedStaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, Mesh, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, OverrideMaterials, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, ComponentClass, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, UnknownData_4WZ7, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_InstancedStaticMesh, 0x0460);
		}

		// class AInstancedFoliageActor : public AActor
		TEST_METHOD(Class__Foliage__InstancedFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstancedFoliageActor, UnknownData_277O, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInstancedFoliageActor, 0x03B8);
		}

		// class AInteractiveFoliageActor : public AStaticMeshActor
		TEST_METHOD(Class__Foliage__InteractiveFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, CapsuleComponent, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, TouchingActorEntryPosition, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageVelocity, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageForce, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliagePosition, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamageImpulseScale, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageTouchImpulseScale, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffness, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffnessQuadratic, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamping, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxDamageImpulse, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxTouchImpulse, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxForce, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, Mass, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, UnknownData_00TK, 0x03D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInteractiveFoliageActor, 0x03D8);
		}

		// class UInteractiveFoliageComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Foliage__InteractiveFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageComponent, UnknownData_ZRKQ, 0x0720);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveFoliageComponent, 0x0730);
		}

		// class AProceduralFoliageBlockingVolume : public AVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageBlockingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageBlockingVolume, ProceduralFoliageVolume, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageBlockingVolume, 0x03A8);
		}

		// class UProceduralFoliageComponent : public UActorComponent
		TEST_METHOD(Class__Foliage__ProceduralFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, FoliageSpawner, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, TileOverlap, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, UnknownData_ME3Q, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, SpawningVolume, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, ProceduralGuid, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageComponent, 0x0118);
		}

		// class UProceduralFoliageSpawner : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, RandomSeed, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, TileSize, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, NumUniqueTiles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, MinimumQuadTreeSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_NEX8, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, FoliageTypes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, bNeedsSimulation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_GLIC, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageSpawner, 0x0070);
		}

		// class UProceduralFoliageTile : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageTile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, FoliageSpawner, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_QKGE, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, InstancesArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_KC0R, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageTile, 0x0158);
		}

		// class AProceduralFoliageVolume : public AVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageVolume, ProceduralComponent, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageVolume, 0x03A8);
		}

		// class AWall_Exit_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Wall_Exit_BP__Wall_Exit_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWall_Exit_BP_C, 0x0370);
		}

		// class ACv2_Game_HUD_C : public AHUD
		TEST_METHOD(BlueprintGeneratedClass__Cv2_Game_HUD__Cv2_Game_HUD_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, UberGraphFrame, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, DefaultSceneRoot, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, AnimateStep_NewTrack_0_4DEC8D124E0ED1CCF8824AB590C054B8, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, AnimateStep__Direction_4DEC8D124E0ED1CCF8824AB590C054B8, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, UnknownData_1667, 0x0465);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, AnimateStep, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, InfoWidget, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, InventoryWidget, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, InputModeArray, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, MessageWidget, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, KillerSheepBaseWidget, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, ChooseOfSideWidget, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, RenderCharacter, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, UseChooseOfSide_, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, UnknownData_SEV6, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, ChatWidgetBASE, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, BlackScreen, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, MapWidget, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, RenderCraftActror, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, LandscapeSize, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, InGameMenu, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, EndGameWidget, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, damageDirection, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, PointerWidget, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, UseTutorial, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, UnknownData_6TZL, 0x0501);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, TutorialBaseWidget, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, BeginXP, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, BeginKills, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, BeginDeaths, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, IsMainChat_SHOW, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, UnknownData_DXON, 0x051D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, Landscape_Pivot, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, HideWidgetArray, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, HideWidgetVisibility, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, HUD_is_Hiden, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, UnknownData_II2T, 0x0549);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, CharacterBlockTimes, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, AdminScreenWidget, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, NewInventroyBase, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, BloodWidget, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, SelectSpawn, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, SelectCharacterStructure, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, SelectdetSide, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, FastSpawnMode, 0x05F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, UnknownData_PC8K, 0x05F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, SelectSpawnPortable, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, AmmoPrymaryStr, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, CurentHandSlot, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, UnknownData_3X5P, 0x0629);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, AmmoSecondaryStr, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, IsDebugMode, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, CtrlIsDown, 0x0659);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, UnknownData_1UMX, 0x065A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, CheckMenuSlotsTimer, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, DeadLocation, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, UnknownData_P1TA, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, TalkWidget, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, TalkMessageArray, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, VoiceTime, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, UnknownData_0G79, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, GameOverWidget, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, AdminActorRef, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, LevelUpWidget, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, GlobalMenuBase, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, StartDuration, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, InventoryProportion, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, CanSpawn, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, UnknownData_8VD4, 0x06C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, SurvChooseOfSide, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Game_HUD_C, RespawnWidget, 0x06D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_Game_HUD_C, 0x06D8);
		}

		// class UMenu_MainMenu_ServersList_C : public UMenu_InGame_Panel_ROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Menu_MainMenu_ServersList__Menu_MainMenu_ServersList_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServersList_C, UnknownData_2EP6, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServersList_C, UberGraphFrame, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServersList_C, SearchAnim, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServersList_C, BackButton, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServersList_C, Button_3, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServersList_C, Connectbyip, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServersList_C, ConnectToIp, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServersList_C, EditableText_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServersList_C, Image_2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServersList_C, IP, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServersList_C, Refresh, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServersList_C, Search, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServersList_C, ServerName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServersList_C, Table, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServersList_C, Parent, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServersList_C, SerchingVisibility, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenu_MainMenu_ServersList_C, 0x0289);
		}

		// class AWall_RoomClosed_BP_01_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Wall_RoomClosed_BP_01__Wall_RoomClosed_BP_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWall_RoomClosed_BP_01_C, 0x0370);
		}

		// class UControlPointMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__ControlPointMeshComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlPointMeshComponent, 0x0720);
		}

		// class ALandscapeProxy : public AActor
		TEST_METHOD(Class__Landscape__LandscapeProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SplineComponent, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeGuid, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeSectionOffset, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MaxLODLevel, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistanceFactor, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODFalloff, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_I6DX, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingLOD, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, DefaultPhysMaterial, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StreamingDistanceMultiplier, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_3RFU, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterial, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeHoleMaterial, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NegativeZBoundsExtension, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, PositiveZBoundsExtension, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeComponents, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionComponents, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, FoliageComponents, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_ZNLG, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bHasLandscapeGrass, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_VJI3, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingResolution, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_SIR3, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightingChannels, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_CWWQ, 0x045D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_KCXO, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CustomDepthStencilValue, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightmassSettings, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionMipLevel, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SimpleCollisionMipLevel, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionThickness, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_BZBG, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, BodyInstance, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_VM46, 0x06C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentSizeQuads, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SubsectionSizeQuads, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NumSubsections, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_5AIL, 0x06D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NavigationGeometryGatheringMode, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseLandscapeForCullingInvisibleHLODVertices, 0x06D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_QUFC, 0x06D6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeProxy, 0x0778);
		}

		// class ALandscape : public ALandscapeProxy
		TEST_METHOD(Class__Landscape__Landscape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscape, UnknownData_88WG, 0x0778);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscape, 0x0780);
		}

		// class ULandscapeComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseX, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseY, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ComponentSizeQuads, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SubsectionSizeQuads, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NumSubsections, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_W1NG, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterial, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideHoleMaterial, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstances, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapLayerAllocations, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapTextures, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, XYOffsetmapTexture, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapScaleBias, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapSubsectionOffset, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_ZZ5S, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapScaleBias, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapTexture, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CachedLocalBox, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionComponent, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MapBuildDataId, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, IrrelevantLights, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionMipLevel, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SimpleCollisionMipLevel, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NegativeZBoundsExtension, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, PositiveZBoundsExtension, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StaticLightingResolution, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ForcedLOD, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODBias, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StateId, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, BakedTextureMaterialGuid, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_Z84B, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, GIBakedBaseColorTexture, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileBlendableLayerMask, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_DB2P, 0x07C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterface, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileWeightNormalmapTexture, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_TS58, 0x07E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeComponent, 0x0810);
		}

		// class ALandscapeGizmoActor : public AActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActor, 0x0368);
		}

		// class ALandscapeGizmoActiveActor : public ALandscapeGizmoActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActiveActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeGizmoActiveActor, UnknownData_2BCU, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActiveActor, 0x03B8);
		}

		// class ULandscapeGizmoRenderComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeGizmoRenderComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGizmoRenderComponent, 0x0690);
		}

		// class ULandscapeGrassType : public UObject
		TEST_METHOD(Class__Landscape__LandscapeGrassType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassVarieties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassMesh, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassDensity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, PlacementJitter, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, StartCullDistance, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, EndCullDistance, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, RandomRotation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, AlignToSurface, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_CVQD, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGrassType, 0x0058);
		}

		// class ULandscapeHeightfieldCollisionComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeHeightfieldCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, ComponentLayerInfos, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseX, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseY, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionSizeQuads, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionScale, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SimpleCollisionSizeQuads, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_LIWN, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionQuadFlags, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, HeightfieldGuid, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CachedLocalBox, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, RenderComponent, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_TAZB, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CookedPhysicalMaterials, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_FADE, 0x0730);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeHeightfieldCollisionComponent, 0x0770);
		}

		// class ULandscapeInfo : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeActor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeGuid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentSizeQuads, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, SubsectionSizeQuads, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentNumSubsections, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, DrawScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_JLFP, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, Proxies, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_UOW8, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfo, 0x0200);
		}

		// class ULandscapeInfoMap : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfoMap, UnknownData_KEEQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfoMap, 0x0080);
		}

		// class ULandscapeLayerInfoObject : public UObject
		TEST_METHOD(Class__Landscape__LandscapeLayerInfoObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, PhysMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, Hardness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerUsageDebugColor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, UnknownData_83QU, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeLayerInfoObject, 0x0050);
		}

		// class ULandscapeMaterialInstanceConstant : public UMaterialInstanceConstant
		TEST_METHOD(Class__Landscape__LandscapeMaterialInstanceConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, UnknownData_7QZT, 0x01B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMaterialInstanceConstant, 0x01B8);
		}

		// class ULandscapeMeshCollisionComponent : public ULandscapeHeightfieldCollisionComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, MeshGuid, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, UnknownData_0PEH, 0x0780);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshCollisionComponent, 0x0790);
		}

		// class ALandscapeMeshProxyActor : public AActor
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeMeshProxyActor, LandscapeMeshProxyComponent, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeMeshProxyActor, 0x0370);
		}

		// class ULandscapeMeshProxyComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, LandscapeGuid, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyComponentBases, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyLOD, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, UnknownData_8M53, 0x0741);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshProxyComponent, 0x0750);
		}

		// class ULandscapeSplinesComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeSplinesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, ControlPoints, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, Segments, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, CookedForeignMeshComponents, 0x06B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplinesComponent, 0x06C0);
		}

		// class ULandscapeSplineControlPoint : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Width, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, SideFalloff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, EndFalloff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, UnknownData_6EX7, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, ConnectedSegments, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Points, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Bounds, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, UnknownData_8VA4, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LocalMeshComponent, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineControlPoint, 0x0098);
		}

		// class ULandscapeSplineSegment : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Connections, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, SplineInfo, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Points, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Bounds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, UnknownData_5NCQ, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, LocalMeshComponents, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineSegment, 0x00B0);
		}

		// class ALandscapeStreamingProxy : public ALandscapeProxy
		TEST_METHOD(Class__Landscape__LandscapeStreamingProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, LandscapeActor, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, UnknownData_AUL0, 0x0794);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeStreamingProxy, 0x07A0);
		}

		// class UMaterialExpressionLandscapeGrassOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeGrassOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeGrassOutput, GrassTypes, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeGrassOutput, 0x0070);
		}

		// class UMaterialExpressionLandscapeLayerBlend : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, Layers, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, ExpressionGUID, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerBlend, 0x0080);
		}

		// class UMaterialExpressionLandscapeLayerCoords : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerCoords)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, CustomUVType, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_WLD2, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingScale, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingRotation, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanU, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanV, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_D04Q, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerCoords, 0x0078);
		}

		// class UMaterialExpressionLandscapeLayerSample : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ParameterName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, PreviewWeight, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ExpressionGUID, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, UnknownData_D2YS, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSample, 0x0080);
		}

		// class UMaterialExpressionLandscapeLayerSwitch : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerUsed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerNotUsed, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ParameterName, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_CHGL, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ExpressionGUID, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_V59V, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSwitch, 0x00F0);
		}

		// class UMaterialExpressionLandscapeLayerWeight : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, base, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Layer, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ParameterName, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, PreviewWeight, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ConstBase, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ExpressionGUID, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerWeight, 0x00F8);
		}

		// class UMaterialExpressionLandscapeVisibilityMask : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeVisibilityMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeVisibilityMask, ExpressionGUID, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeVisibilityMask, 0x0070);
		}

		// class AActor : public UObject
		TEST_METHOD(Class__Engine__Actor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, PrimaryActorTick, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, CustomTimeDilation, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RemoteRole, 0x0087);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Owner, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDriverName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ReplicatedMovement, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InitialLifeSpan, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AttachmentReplication, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Role, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDormancy, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AutoReceiveInput, 0x0112);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_LVU7, 0x0113);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputPriority, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputComponent, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetCullDistanceSquared, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetTag, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_JQZD, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetUpdateFrequency, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, MinNetUpdateFrequency, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetPriority, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_0WAG, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, SpawnCollisionHandlingMethod, 0x013E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_PSG0, 0x013F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Instigator, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Children, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RootComponent, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ControllingMatineeActors, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_1CX5, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Layers, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ParentComponent, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Tags, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, HiddenEditorViews, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeAnyDamage, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakePointDamage, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorBeginOverlap, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorEndOverlap, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnBeginCursorOver, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndCursorOver, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnClicked, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnReleased, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchBegin, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnd, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnter, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchLeave, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorHit, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnDestroyed, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndPlay, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_AQF4, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, BlueprintCreatedComponents, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InstanceComponents, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_OA0V, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActor, 0x0368);
		}

		// class UCv2_ActionComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__Cv2_ActionComponent__Cv2_ActionComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_ActionComponent_C, UberGraphFrame, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_ActionComponent_C, Character, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_ActionComponent_C, FollowNPCs, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCv2_ActionComponent_C, 0x0110);
		}

		// class UBuildPatchManifest : public UObject
		TEST_METHOD(Class__BuildPatchServices__BuildPatchManifest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ManifestFileVersion, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, bIsFileData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, UnknownData_4MLY, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, BuildVersion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchExe, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchCommand, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqIds, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqPath, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqArgs, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, FileManifestList, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ChunkList, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, CustomFields, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuildPatchManifest, 0x0120);
		}

		// class APawn : public AActor
		TEST_METHOD(Class__Engine__Pawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_7Y73, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_L5Y0, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, BaseEyeHeight, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessPlayer, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessAI, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_6PIC, 0x037A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AIControllerClass, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, PlayerState, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, RemoteViewPitch, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_4L9D, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastHitBy, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, Controller, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_KJA8, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, ControlInputVector, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastControlInputVector, 0x03BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APawn, 0x03C8);
		}

		// class ACharacter : public APawn
		TEST_METHOD(Class__Engine__Character)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, Mesh, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CharacterMovement, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CapsuleComponent, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BasedMovement, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedBasedMovement, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, AnimRootMotionTranslationScale, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseTranslationOffset, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseRotationOffset, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedServerLastTransformUpdateTimeStamp, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedMovementMode, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, bInBaseReplication, 0x0465);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_0XPW, 0x0466);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CrouchedEyeHeight, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_JCHP, 0x046E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpKeyHoldTime, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxHoldTime, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxCount, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpCurrentCount, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_Y4OB, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnReachedJumpApex, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_LQ98, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, MovementModeChangedDelegate, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnCharacterMovementUpdated, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, SavedRootMotion, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_PU2M, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ClientRootMotionParams, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RootMotionRepMoves, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RepRootMotion, 0x0620);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACharacter, 0x0780);
		}

		// class AController : public AActor
		TEST_METHOD(Class__Engine__Controller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_HJEM, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Pawn, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_8FI9, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Character, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, PlayerState, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, TransformComponent, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, ControlRotation, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_VAYG, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, StateName, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, OnInstigatedAnyDamage, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AController, 0x03D0);
		}

		// class APlayerController : public AController
		TEST_METHOD(Class__Engine__PlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, Player, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_S2TT, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, AcknowledgedPawn, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ControllingDirTrackInst, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_W6RA, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, MyHUD, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManager, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManagerClass, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bAutoManageActiveCameraTarget, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_Q668, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, TargetViewRotation, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_WUVW, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SmoothTargetViewRotationSpeed, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenActors, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenPrimitiveComponents, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_BEX7, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorStateSynchTime, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncLocation, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncRotation, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClientCap, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_5L39, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatManager, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatClass, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerInput, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ActiveForceFeedbackEffects, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_TFFP, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_ZKRO, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetPlayerIndex, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_SIW5, 0x0535);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PendingSwapConnection, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetConnection, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_WOPA, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputYawScale, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputPitchScale, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputRollScale, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_9XKA, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ForceFeedbackScale, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClickEventKeys, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultMouseCursor, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentMouseCursor, 0x05B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultClickTraceChannel, 0x05B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentClickTraceChannel, 0x05B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HitResultTraceDistance, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_XGWG, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InactiveStateInputComponent, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_0CPF, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentTouchInterface, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_SEJL, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpectatorPawn, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpawnLocation, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_DHE3, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bIsLocalPlayerController, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_R2KQ, 0x06B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SeamlessTravelCount, 0x06BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastCompletedSeamlessTravelCount, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_6395, 0x06BE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerController, 0x06C0);
		}

		// class UActorComponent : public UObject
		TEST_METHOD(Class__Engine__ActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_L9R3, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, PrimaryComponentTick, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, ComponentTags, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, AssetUserData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_EA8I, 0x00AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, CreationMethod, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_MLYB, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UCSModifiedProperties, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentActivated, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentDeactivated, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_EU2G, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorComponent, 0x00F0);
		}

		// class USceneComponent : public UActorComponent
		TEST_METHOD(Class__Engine__SceneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_G87R, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolume, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachParent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachSocketName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachChildren, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ClientAttachedChildren, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_Y2VS, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeLocation, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeRotation, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeScale3D, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_30UX, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ComponentVelocity, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, Mobility, 0x01BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, DetailMode, 0x01BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_K97F, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolumeChangedDelegate, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_R2R3, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneComponent, 0x0290);
		}

		// class UPrimitiveComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PrimitiveComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_Z36C, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MinDrawDistance, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LDMaxDrawDistance, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CachedMaxDrawDistance, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, DepthPriorityGroup, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, ViewOwnerDepthPriorityGroup, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, IndirectLightingCacheQuality, 0x02A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, bHasCustomNavigableGeometry, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CanBeCharacterBase, 0x02AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_MXBC, 0x02AF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CanCharacterStepUpOn, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightingChannels, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilWriteMask, 0x02B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_EGC5, 0x02B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilValue, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, TranslucencySortPriority, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VisibilityId, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_PVEQ, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LpvBiasMultiplier, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_WTR3, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BoundsScale, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LastSubmitTime, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LastRenderTime, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LastRenderTimeOnScreen, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreActors, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreComponents, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_MTFI, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BodyInstance, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentHit, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentBeginOverlap, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentEndOverlap, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentWake, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentSleep, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_UAO5, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnBeginCursorOver, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnEndCursorOver, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnClicked, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnReleased, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchBegin, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnd, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnter, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchLeave, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_D38U, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LODParentPrimitive, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, PostPhysicsComponentTick, 0x0638);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimitiveComponent, 0x0690);
		}

		// class UMeshComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__MeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, OverrideMaterials, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_XRJ9, 0x06A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshComponent, 0x06B8);
		}

		// class USkinnedMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__SkinnedMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkeletalMesh, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MasterPoseComponent, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_CQKA, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_HPAC, 0x0729);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, PhysicsAssetOverride, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, ForcedLodModel, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MinLodModel, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_HXW3, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, LODInfo, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, StreamingDistanceMultiplier, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, WireframeColor, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_58A3, 0x0789);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_0D3G, 0x07A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MeshComponentUpdateFlag, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_OQWD, 0x07A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_8BJZ, 0x07A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CustomSortAlternateIndexMode, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_AO13, 0x07AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_BD1S, 0x07B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CapsuleIndirectShadowMinVisibility, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_WB6V, 0x07B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedLocalBounds, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, bCachedLocalBoundsUpToDate, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, bEnableUpdateRateOptimizations, 0x07E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, bDisplayDebugUpdateRateOptimizations, 0x07EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_A5RM, 0x07EB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkinnedMeshComponent, 0x0840);
		}

		// class USkeletalMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__SkeletalMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_3YRO, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationMode, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_UKHR, 0x0849);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimBlueprintGeneratedClass, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimClass, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimScriptInstance, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, SubInstances, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PostProcessAnimInstance, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationData, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_VA8F, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedBoneSpaceTransforms, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedComponentSpaceTransforms, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_8OYU, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, GlobalAnimRateScale, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UseAsyncScene, 0x0914);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_KQIL, 0x0915);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_T4DJ, 0x0919);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, KinematicBonesUpdateType, 0x091C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PhysicsTransformUpdateMode, 0x091D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_M4WB, 0x091E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_210R, 0x0921);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, DisallowedAnimCurves, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_1P0J, 0x0939);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothBlendWeight, 0x093C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_2QAX, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, RootBoneTranslation, 0x0944);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_XJWZ, 0x0951);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, bUseRefPoseOnInitAnim, 0x0954);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_XL91, 0x0955);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_QDES, 0x0959);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BodySetup, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, bForceRefpose, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_REG8, 0x0969);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_VHC0, 0x096D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedAnimCurveUidVersion, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_YFY4, 0x0972);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LineCheckBoundsScale, 0x0974);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_JQNS, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnConstraintBroken, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_YO23, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingSimulationFactory, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportDistanceThreshold, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportRotationThreshold, 0x0A8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_QVXJ, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnAnimInitialized, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_INWA, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, SequenceToPlay, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimToPlay, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_45UZ, 0x0CB9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, DefaultPosition, 0x0CBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, DefaultPlayRate, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LastPoseTickFrame, 0x0CC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LastPoseTickTime, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_WIAX, 0x0CCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, bNeedsQueuedAnimEventsDispatched, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_J1YU, 0x0DB1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshComponent, 0x0DC0);
		}

		// class UAnimInstance : public UObject
		TEST_METHOD(Class__Engine__AnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, DeltaTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_JKKE, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, CurrentSkeleton, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, RootMotionMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, bRunUpdatesInWorkerThreads, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, bCanUseParallelUpdateAnimation, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, bUseMultiThreadedAnimationUpdate, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, bWarnAboutBlueprintUsage, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_V54L, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageBlendingOut, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageStarted, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageEnded, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnAllMontageInstancesEnded, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_U76K, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, bQueueMontageEvents, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_HC2P, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, ActiveAnimNotifyState, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_G7X0, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimInstance, 0x03B8);
		}

		// class UBlueprintFunctionLibrary : public UObject
		TEST_METHOD(Class__Engine__BlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintFunctionLibrary, 0x0028);
		}

		// class UDataAsset : public UObject
		TEST_METHOD(Class__Engine__DataAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataAsset, NativeClass, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataAsset, 0x0030);
		}

		// class UStaticMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__StaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_KYO5, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, PreviousLODLevel, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, MinLOD, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, SubDivisionStepSize, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StaticMesh, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, WireframeColorOverride, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_UDPN, 0x06D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, OverriddenLightMapRes, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldIndirectShadowMinVisibility, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldSelfShadowBias, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingDistanceMultiplier, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LODData, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingTextureData, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LightmassSettings, 0x0708);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshComponent, 0x0720);
		}

		// class UInstancedStaticMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__InstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMData, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstancingRandomSeed, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceStartCullDistance, 0x0734);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceEndCullDistance, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_I6CE, 0x073C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceReorderTable, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, RemovedInstances, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UseDynamicInstanceBuffer, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, KeepInstanceBufferCPUAccess, 0x0761);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_ICI4, 0x0762);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PhysicsSerializer, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumPendingLightmaps, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_IGQX, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, CachedMappings, 0x0800);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstancedStaticMeshComponent, 0x0810);
		}

		// class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
		TEST_METHOD(Class__Engine__HierarchicalInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_RNQ5, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, SortedInstances, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, NumBuiltInstances, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_ORR2, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, BuiltInstanceBounds, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBounds, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBoundsList, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceIndexList, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_BG6C, 0x0891);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, OcclusionLayerNumNodes, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, CacheMeshExtendedBounds, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_044N, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, bDisableCollision, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_WHW3, 0x08DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalInstancedStaticMeshComponent, 0x0900);
		}

		// class AStaticMeshActor : public AActor
		TEST_METHOD(Class__Engine__StaticMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, StaticMeshComponent, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, bStaticMeshReplicateMovement, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, NavigationGeometryGatheringMode, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, UnknownData_TXMT, 0x0372);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaticMeshActor, 0x0378);
		}

		// class ABrush : public AActor
		TEST_METHOD(Class__Engine__Brush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushType, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_9GSA, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushColor, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, PolyFlags, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_DR50, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, Brush, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushComponent, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_PKCB, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, SavedSelections, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrush, 0x03A0);
		}

		// class AVolume : public ABrush
		TEST_METHOD(Class__Engine__Volume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolume, 0x03A0);
		}

		// class UMaterialInterface : public UObject
		TEST_METHOD(Class__Engine__MaterialInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_GGEO, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, SubsurfaceProfile, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_LDBL, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, LightmassSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_C1J4, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, TextureStreamingData, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_B6EC, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInterface, 0x0070);
		}

		// class UMaterialInstance : public UMaterialInterface
		TEST_METHOD(Class__Engine__MaterialInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysMaterial, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, Parent, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_VKMV, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, FontParameterValues, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, ScalarParameterValues, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, TextureParameterValues, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, VectorParameterValues, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, bOverrideBaseProperties, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_GVR4, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, BasePropertyOverrides, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_YDQI, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstance, 0x01B0);
		}

		// class UMaterialInstanceConstant : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceConstant)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceConstant, 0x01B0);
		}

		// class UMaterialExpression : public UObject
		TEST_METHOD(Class__Engine__MaterialExpression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Material, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Function, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Desc, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, BorderColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, UnknownData_6Y8G, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Outputs, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpression, 0x0060);
		}

		// class UMaterialExpressionCustomOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustomOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustomOutput, 0x0060);
		}

		// class UAnimNotify : public UObject
		TEST_METHOD(Class__Engine__AnimNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify, UnknownData_Q0K3, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify, 0x0038);
		}

		// class UAnimNotifyState : public UObject
		TEST_METHOD(Class__Engine__AnimNotifyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState, UnknownData_DUCR, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState, 0x0030);
		}

		// class UBlueprintAsyncActionBase : public UObject
		TEST_METHOD(Class__Engine__BlueprintAsyncActionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintAsyncActionBase, 0x0028);
		}

		// class UBlueprintGeneratedClass : public UClass
		TEST_METHOD(Class__Engine__BlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, NumReplicatedProperties, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_FQUZ, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, DynamicBindingObjects, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentTemplates, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, Timelines, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, SimpleConstructionScript, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, InheritableComponentHandler, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFramePointerProperty, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFunction, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, CookedComponentInstancingData, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_HO0B, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGeneratedClass, 0x02D8);
		}

		// class ACameraActor : public AActor
		TEST_METHOD(Class__Engine__CameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AutoActivateForPlayer, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_DX3C, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, CameraComponent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, SceneComponent, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_6RAZ, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_8OKS, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AspectRatio, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, FOVAngle, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessBlendWeight, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_GLNE, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessSettings, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraActor, 0x08A0);
		}

		// class UCameraComponent : public USceneComponent
		TEST_METHOD(Class__Engine__CameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, FieldOfView, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoWidth, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoNearClipPlane, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoFarClipPlane, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, AspectRatio, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_9H2B, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, ProjectionMode, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_BU1T, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessBlendWeight, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessSettings, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_MIF9, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_U557, 0x0809);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraComponent, 0x0810);
		}

		// class UUserDefinedStruct : public UScriptStruct
		TEST_METHOD(Class__Engine__UserDefinedStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Guid, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedStruct, 0x00A8);
		}

		// class UAISystemBase : public UObject
		TEST_METHOD(Class__Engine__AISystemBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemClassName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemModuleName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, bInstantiateAISystemOnClient, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_P0P2, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystemBase, 0x0050);
		}

		// class UCrowdManagerBase : public UObject
		TEST_METHOD(Class__Engine__CrowdManagerBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManagerBase, 0x0028);
		}

		// class UNavigationQueryFilter : public UObject
		TEST_METHOD(Class__Engine__NavigationQueryFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, Areas, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, IncludeFlags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, ExcludeFlags, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, UnknownData_24G9, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationQueryFilter, 0x0048);
		}

		// class UModel : public UObject
		TEST_METHOD(Class__Engine__Model)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModel, UnknownData_6S5R, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModel, 0x0580);
		}

		// class ANavigationData : public AActor
		TEST_METHOD(Class__Engine__NavigationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RenderingComp, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, NavDataConfig, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_GAJZ, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RuntimeGeneration, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_OBDC, 0x03CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, ObservedPathsTickInterval, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, DataVersion, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_BPKN, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, SupportedAreas, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_5FGW, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationData, 0x0510);
		}

		// class AAbstractNavData : public ANavigationData
		TEST_METHOD(Class__Engine__AbstractNavData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAbstractNavData, 0x0510);
		}

		// class UChannel : public UObject
		TEST_METHOD(Class__Engine__Channel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, Connection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, UnknownData_GH3F, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChannel, 0x0068);
		}

		// class UActorChannel : public UChannel
		TEST_METHOD(Class__Engine__ActorChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, Actor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_A3FS, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorChannel, 0x0230);
		}

		// class UAnimationAsset : public UObject
		TEST_METHOD(Class__Engine__AnimationAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_ZKET, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, Skeleton, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_LX6D, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, MetaData, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, AssetUserData, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationAsset, 0x0078);
		}

		// class UBlendSpaceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__BlendSpaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_740O, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, bRotationBlendInMeshSpace, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_RZN0, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, AnimLength, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, InterpolationParam, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, TargetWeightInterpolationSpeedPerSec, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, NotifyTriggerMode, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_1D7R, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, PerBoneBlend, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleIndexWithMarkers, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_HRVJ, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleData, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, GridSamples, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, BlendParameters, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpaceBase, 0x0140);
		}

		// class UBlendSpace : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, AxisToScaleAnimation, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, UnknownData_WKL5, 0x0141);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace, 0x0148);
		}

		// class UAimOffsetBlendSpace : public UBlendSpace
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace, 0x0148);
		}

		// class UBlendSpace1D : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace1D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, bScaleAnimation, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, UnknownData_X29N, 0x0141);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace1D, 0x0148);
		}

		// class UAimOffsetBlendSpace1D : public UBlendSpace1D
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace1D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace1D, 0x0148);
		}

		// class AAmbientSound : public AActor
		TEST_METHOD(Class__Engine__AmbientSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSound, AudioComponent, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAmbientSound, 0x0370);
		}

		// class UDeveloperSettings : public UObject
		TEST_METHOD(Class__Engine__DeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeveloperSettings, UnknownData_509D, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeveloperSettings, 0x0038);
		}

		// class UAnimationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AnimationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, CompressCommandletVersion, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_7T1O, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, KeyEndEffectorsMatchNameArray, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, DefaultCompressionAlgorithm, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, RotationCompressionFormat, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, TranslationCompressionFormat, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_SHPA, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, MaxCurveError, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, AlternativeCompressionThreshold, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, ForceRecompression, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bOnlyCheckForMissingSkeletalMeshes, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bForceBelowThreshold, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bFirstRecompressUsingCurrentOrDefault, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bRaiseMaxErrorToExisting, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bTryFixedBitwiseCompression, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bTryPerTrackBitwiseCompression, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bTryLinearKeyRemovalCompression, 0x006B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bTryIntervalKeyRemoval, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bEnablePerformanceLog, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bStripAnimationDataOnDedicatedServer, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_O2FR, 0x006F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSettings, 0x0070);
		}

		// class UBlueprintCore : public UObject
		TEST_METHOD(Class__Engine__BlueprintCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, SkeletonGeneratedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, GeneratedClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, bLegacyNeedToPurgeSkelRefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, bLegacyGeneratedClassIsAuthoritative, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_4CO7, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, BlueprintGuid, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_5XLI, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintCore, 0x0050);
		}

		// class UBlueprint : public UBlueprintCore
		TEST_METHOD(Class__Engine__Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_0J3I, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ParentClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, PRIVATE_InnermostPreviousCDO, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_MT8A, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, SimpleConstructionScript, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentTemplates, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, Timelines, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, InheritableComponentHandler, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintType, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_BU44, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintSystemVersion, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_E3BU, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, bNativize, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_Q1DQ, 0x0191);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprint, 0x0198);
		}

		// class UAnimBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__AnimBlueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, TargetSkeleton, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, Groups, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bUseMultiThreadedAnimationUpdate, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bWarnAboutBlueprintUsage, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_JFVL, 0x01B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprint, 0x01C0);
		}

		// class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__Engine__AnimBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_YLGE, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, BakedStateMachines, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, TargetSkeleton, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, AnimNotifies, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, RootAnimNodeIndex, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_AD6S, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, OrderedSavedPoseIndices, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_8503, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, SyncGroupNames, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprintGeneratedClass, 0x0348);
		}

		// class UAnimClassData : public UObject
		TEST_METHOD(Class__Engine__AnimClassData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_P3U0, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, BakedStateMachines, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, TargetSkeleton, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNotifies, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, RootAnimNodeIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_CRLI, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, OrderedSavedPoseIndices, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, RootAnimNodeProperty, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNodeProperties, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, SyncGroupNames, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassData, 0x0098);
		}

		// class UAnimClassInterface : public UInterface
		TEST_METHOD(Class__Engine__AnimClassInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassInterface, 0x0028);
		}

		// class UAnimSequenceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__AnimSequenceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, Notifies, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, SequenceLength, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RateScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RawCurveData, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequenceBase, 0x00A0);
		}

		// class UAnimCompositeBase : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimCompositeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompositeBase, 0x00A0);
		}

		// class UAnimComposite : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimComposite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimComposite, AnimationTrack, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimComposite, 0x00B0);
		}

		// class UAnimCompress : public UObject
		TEST_METHOD(Class__Engine__AnimCompress)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, Description, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_JVR6, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, TranslationCompressionFormat, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, RotationCompressionFormat, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, ScaleCompressionFormat, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_RD02, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, MaxCurveError, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_24OQ, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress, 0x0048);
		}

		// class UAnimCompress_Automatic : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_Automatic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_Automatic, MaxEndEffectorError, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_Automatic, UnknownData_GL82, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_Automatic, 0x0050);
		}

		// class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_BitwiseCompressOnly)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_BitwiseCompressOnly, 0x0048);
		}

		// class UAnimCompress_LeastDestructive : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_LeastDestructive)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_LeastDestructive, 0x0048);
		}

		// class UAnimCompress_RemoveLinearKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveLinearKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxPosDiff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxAngleDiff, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxScaleDiff, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxEffectorDiff, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MinEffectorDiff, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, EffectorDiffSocket, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, ParentKeyScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, UnknownData_DG33, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveLinearKeys, 0x0068);
		}

		// class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
		TEST_METHOD(Class__Engine__AnimCompress_PerTrackCompression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxZeroingThreshold, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxPosDiffBitwise, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxAngleDiffBitwise, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxScaleDiffBitwise, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedRotationFormats, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedTranslationFormats, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedScaleFormats, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_CEFK, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ResampledFramerate, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MinKeysForResampling, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_O58V, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TrackHeightBias, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisorExponent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_6JNP, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, RotationErrorSourceRatio, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TranslationErrorSourceRatio, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ScaleErrorSourceRatio, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxErrorPerTrackRatio, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, PerturbationProbeSize, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_7O49, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_PerTrackCompression, 0x00E8);
		}

		// class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveEverySecondKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, MinKeys, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, UnknownData_ODFA, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveEverySecondKey, 0x0050);
		}

		// class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveTrivialKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxPosDiff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxAngleDiff, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxScaleDiff, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, UnknownData_MTJD, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveTrivialKeys, 0x0058);
		}

		// class UAnimMetaData : public UObject
		TEST_METHOD(Class__Engine__AnimMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMetaData, 0x0028);
		}

		// class UAnimMontage : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendIn, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendInTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_B2RT, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOut, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTriggerTime, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncGroup, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncSlotIndex, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_5BLX, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, MarkerData, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, CompositeSections, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SlotAnimTracks, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPoints, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionTranslation, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionRotation, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, RootMotionRootLock, 0x0182);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_I7P3, 0x0183);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointMarkers, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointStateNotifyIndices, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurve, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurveName, 0x01D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMontage, 0x01D8);
		}

		// class UAnimNotify_PlayParticleEffect : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlayParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, PSTemplate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_8PMO, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_4ZUG, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, SocketName, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayParticleEffect, 0x0090);
		}

		// class UAnimNotify_PlaySound : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlaySound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, Sound, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, VolumeMultiplier, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, PitchMultiplier, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_H5UH, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, AttachName, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlaySound, 0x0058);
		}

		// class ASoviet_Store_01_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Soviet_Store_01__Soviet_Store_01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Table_08older, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, StaticMesh12, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, StaticMesh11, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, StaticMesh10, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, chair9, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, _SpawnFurnitur_01, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, _SpawnFurnitur_16, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, ChildActor, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, _SpawnFurnitur_03, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, _SpawnFurnitur_11, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, StaticMesh4, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, StaticMesh3, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, shelf1, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, _SpawnFurnitur_08, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, _SpawnFurnitur_14, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, StaticMesh9, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, StaticMesh8, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, StaticMesh7, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Store_01_Text_Magazin_Text_02, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Store_01_Text_Magazin_Text_01, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Store_lamp_02, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Store_lamp_03, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Store_lamp_04, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Store_lamp_05, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Store_lamp_01, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, StaticMesh6, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, StaticMesh5, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Store_01_signs_01, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Store_01_signs_03, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Store_01_signs_04, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Magazin_Posters_01, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Magazin_Posters_03, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Magazin_Posters_04, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Magazin_Posters_05, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Store01_glass, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Magazin_Posters_02, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Store_01_signs_02, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Store_Ventilation_02, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Store_Ventilation_01, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Store_clock, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, StaticMesh2, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, StaticMesh1, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Store_pandus_stair_03, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Store_pandus_stair_02, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Store_pandus_Stair_01, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Store_door_01_Detail_01, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Store_door_01_Rama, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Store_door_01_Magazin_01_Doors, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Store_01_perila, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Store01_Window_02, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Store01_Window_01, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASoviet_Store_01_C, Electrical_Box_01, 0x0510);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASoviet_Store_01_C, 0x0518);
		}

		// class UAnimNotify_ResetClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetClothingSimulation, 0x0038);
		}

		// class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_DisableRootMotion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_DisableRootMotion, 0x0030);
		}

		// class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_TimedParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, SocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, bDestroyAtEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, UnknownData_ZL7K, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedParticleEffect, 0x0060);
		}

		// class UAnimNotifyState_Trail : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, FirstSocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, SecondSocketName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_AAJO, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleCurve, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_65MH, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_Trail, 0x0060);
		}

		// class UAnimSequence : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, NumFrames, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_ZBUC, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, TrackToSkeletonMapTable, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_WE61, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AdditiveAnimType, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseType, 0x014D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_OHPQ, 0x014E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseSeq, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefFrameIndex, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, EncodingPkgVersion, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RetargetSource, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, Interpolation, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bEnableRootMotion, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RootMotionRootLock, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bForceRootLock, 0x016B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bRootMotionSettingsCopiedFromMontage, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_6K6E, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AuthoredSyncMarkers, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_OKPN, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequence, 0x0198);
		}

		// class UAnimSet : public UObject
		TEST_METHOD(Class__Engine__AnimSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_832S, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, TrackBoneNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, LinkupCache, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BoneUseAnimTranslation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceUseMeshTranslation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UseTranslationBoneNames, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceMeshTranslationBoneNames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, PreviewSkelMeshName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BestRatioSkelMeshName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_5QN0, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSet, 0x00F0);
		}

		// class UAnimSingleNodeInstance : public UAnimInstance
		TEST_METHOD(Class__Engine__AnimSingleNodeInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, CurrentAsset, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, PostEvaluateAnimEvent, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSingleNodeInstance, 0x03D0);
		}

		// class UAnimStateMachineTypes : public UObject
		TEST_METHOD(Class__Engine__AnimStateMachineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStateMachineTypes, 0x0028);
		}

		// class UApplicationLifecycleComponent : public UActorComponent
		TEST_METHOD(Class__Engine__ApplicationLifecycleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillDeactivateDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasReactivatedDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillEnterBackgroundDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasEnteredForegroundDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillTerminateDelegate, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UApplicationLifecycleComponent, 0x0140);
		}

		// class UArrowComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ArrowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowColor, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowSize, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, bIsScreenSizeScaled, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_0CKJ, 0x0699);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ScreenSize, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_60JJ, 0x06A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrowComponent, 0x06B0);
		}

		// class UAssetImportData : public UObject
		TEST_METHOD(Class__Engine__AssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetImportData, 0x0028);
		}

		// class UAssetManager : public UObject
		TEST_METHOD(Class__Engine__AssetManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_1K84, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, ObjectReferenceList, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsGlobalAsyncScanEnvironment, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldGuessTypeAndName, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldUseSynchronousLoad, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsLoadingFromPakFiles, 0x026B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldAcquireMissingChunksOnLoad, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bOnlyCookProductionAssets, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsBulkScanning, 0x026E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsManagementDatabaseCurrent, 0x026F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bUpdateManagementDatabaseAfterScan, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIncludeOnlyOnDiskAssets, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_7MOT, 0x0272);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, NumberOfSpawnedNotifications, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_PV1B, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManager, 0x03D0);
		}

		// class UAssetManagerSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AssetManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypesToScan, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, DirectoriesToExclude, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetRules, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bOnlyCookProductionAssets, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldGuessTypeAndNameInEditor, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldAcquireMissingChunksOnLoad, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, UnknownData_XXZL, 0x006B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetIdRedirects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypeRedirects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, AssetPathRedirects, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManagerSettings, 0x00A0);
		}

		// class UAssetMappingTable : public UObject
		TEST_METHOD(Class__Engine__AssetMappingTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetMappingTable, MappedAssets, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetMappingTable, 0x0038);
		}

		// class UAssetUserData : public UObject
		TEST_METHOD(Class__Engine__AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetUserData, 0x0028);
		}

		// class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetBase, UnknownData_2BXJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetBase, 0x0070);
		}

		// class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAsset, Completed, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAsset, 0x0080);
		}

		// class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClass, Completed, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClass, 0x0080);
		}

		// class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetList, Completed, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetList, 0x0080);
		}

		// class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClassList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClassList, Completed, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClassList, 0x0080);
		}

		// class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionChangePrimaryAssetBundles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionChangePrimaryAssetBundles, Completed, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionChangePrimaryAssetBundles, 0x0080);
		}

		// class AInfo : public AActor
		TEST_METHOD(Class__Engine__Info)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInfo, 0x0368);
		}

		// class AAtmosphericFog : public AInfo
		TEST_METHOD(Class__Engine__AtmosphericFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAtmosphericFog, AtmosphericFogComponent, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAtmosphericFog, 0x0370);
		}

		// class UAtmosphericFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AtmosphericFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, SunMultiplier, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, FogMultiplier, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityMultiplier, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityOffset, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceScale, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, AltitudeScale, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceOffset, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, GroundOffset, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, StartDistance, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, SunDiscScale, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultBrightness, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultLightColor, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_ULCM, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, PrecomputeParams, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, TransmittanceTexture, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, IrradianceTexture, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_FS7D, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtmosphericFogComponent, 0x0470);
		}

		// class UAudioComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AudioComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Sound, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, InstanceParameters, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SoundClassOverride, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_YNOR, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_3CFK, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_NA1K, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AudioComponentUserID, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMin, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMax, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMin, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMax, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeMultiplier, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Priority, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SubtitlePriority, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeWeightedPriorityScale, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchMultiplier, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, HighFrequencyGainMultiplier, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, LowPassFilterFrequency, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_VMK1, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationSettings, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationOverrides, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySettings, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_9RQV, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioFinished, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_7Z5Q, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioPlaybackPercent, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_XZ0T, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnQueueSubtitles, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_DWF3, 0x06E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioComponent, 0x06F0);
		}

		// class UAudioSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AudioSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundClassName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundConcurrencyName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultBaseSoundMix, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSoundClass, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultReverbSendLevel, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, LowPassFilterResonance, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MaximumConcurrentStreams, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_JO2X, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, QualityLevels, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_HLB3, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DialogueFilenameFormat, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_ZZU9, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSettings, 0x00D8);
		}

		// class AAudioVolume : public AVolume
		TEST_METHOD(Class__Engine__AudioVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Priority, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_R73D, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Settings, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, AmbientZoneSettings, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_MVG1, 0x03E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAudioVolume, 0x03E8);
		}

		// class UAutomationTestSettings : public UObject
		TEST_METHOD(Class__Engine__AutomationTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EngineTestModules, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorTestModules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AutomationTestmap, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorPerformanceTestMaps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AssetsToOpen, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BuildPromotionTest, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, MaterialEditorPromotionTest, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ParticleEditorPromotionTest, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BlueprintEditorPromotionTest, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, TestLevelFolders, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ExternalTools, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ImportExportTestDefinitions, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, LaunchOnSettings, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, DefaultScreenshotResolution, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationTestSettings, 0x0328);
		}

		// class UAvoidanceManager : public UObject
		TEST_METHOD(Class__Engine__AvoidanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_48KA, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DefaultTimeToLive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterAvoid, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterClean, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DeltaTimeToPredict, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, ArtificialRadiusExpansion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, TestHeightDifference, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, HeightCheckMargin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_T268, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvoidanceManager, 0x00E0);
		}

		// class UBillboardComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__BillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, Sprite, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UnknownData_6IA0, 0x0699);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, ScreenSize, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, U, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UL, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, V, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, VL, 0x06AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBillboardComponent, 0x06B0);
		}

		// class UBlendableInterface : public UInterface
		TEST_METHOD(Class__Engine__BlendableInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendableInterface, 0x0028);
		}

		// class USkeleton : public UObject
		TEST_METHOD(Class__Engine__Skeleton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_ORN3, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BoneTree, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, RefLocalPoses, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_4KYV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBoneGuid, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBones, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, Sockets, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_5YWQ, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SmartNames, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_M5UX, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BlendProfiles, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SlotGroups, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_8GFN, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, AssetUserData, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeleton, 0x03A0);
		}

		// class UBlendProfile : public UObject
		TEST_METHOD(Class__Engine__BlendProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, UnknownData_CYFN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, OwningSkeleton, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, ProfileEntries, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendProfile, 0x0048);
		}

		// class ABlockingVolume : public AVolume
		TEST_METHOD(Class__Engine__BlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlockingVolume, 0x03A0);
		}

		// class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintMapLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintMapLibrary, 0x0028);
		}

		// class UGameInstance : public UObject
		TEST_METHOD(Class__Engine__GameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_YFN0, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, LocalPlayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, OnlineSession, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_FY12, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstance, 0x00E8);
		}

		// class UPlatformGameInstance : public UGameInstance
		TEST_METHOD(Class__Engine__PlatformGameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillDeactivateDelegate, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasReactivatedDelegate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillEnterBackgroundDelegate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasEnteredForegroundDelegate, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillTerminateDelegate, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForRemoteNotificationsDelegate, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForUserNotificationsDelegate, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationFailedToRegisterForRemoteNotificationsDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedRemoteNotificationDelegate, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedLocalNotificationDelegate, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedScreenOrientationChangedNotificationDelegate, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, UnknownData_OT7W, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformGameInstance, 0x01A0);
		}

		// class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintPlatformLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPlatformLibrary, 0x0028);
		}

		// class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintSetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintSetLibrary, 0x0028);
		}

		// class UBodySetup : public UObject
		TEST_METHOD(Class__Engine__BodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, AggGeom, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BoneName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysicsType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_LA49, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_XF2S, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysMaterial, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, CollisionReponse, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, CollisionTraceFlag, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_1E5R, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, DefaultInstance, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, WalkableSlopeOverride, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BuildScale, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BuildScale3D, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_YLMY, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBodySetup, 0x0398);
		}

		// class UBoneMaskFilter : public UObject
		TEST_METHOD(Class__Engine__BoneMaskFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoneMaskFilter, BlendPoses, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoneMaskFilter, 0x0038);
		}

		// class UBookMark : public UObject
		TEST_METHOD(Class__Engine__BookMark)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, HiddenLevels, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark, 0x0050);
		}

		// class UBookMark2D : public UObject
		TEST_METHOD(Class__Engine__BookMark2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Zoom2D, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Location, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, UnknownData_2K7A, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark2D, 0x0038);
		}

		// class UShapeComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ShapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeColor, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, UnknownData_TXM2, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeBodySetup, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, UnknownData_DMC7, 0x06A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, AreaClass, 0x06A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShapeComponent, 0x06B0);
		}

		// class UBoxComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__BoxComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, BoxExtent, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, UnknownData_C12I, 0x06BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxComponent, 0x06C0);
		}

		// class AReflectionCapture : public AActor
		TEST_METHOD(Class__Engine__ReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AReflectionCapture, CaptureComponent, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AReflectionCapture, 0x0370);
		}

		// class ABoxReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__BoxReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABoxReflectionCapture, 0x0370);
		}

		// class UReflectionCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffsetComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, ReflectionSourceType, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_UGMA, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Cubemap, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, SourceCubemapAngle, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Brightness, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffset, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_BDHS, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, StateId, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_RUTC, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReflectionCaptureComponent, 0x0320);
		}

		// class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__BoxReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, BoxTransitionDistance, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, UnknownData_T3AK, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewInfluenceBox, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewCaptureBox, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, UnknownData_MUQ7, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxReflectionCaptureComponent, 0x0340);
		}

		// class UBreakpoint : public UObject
		TEST_METHOD(Class__Engine__Breakpoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_O9GG, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, Node, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_HB4F, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBreakpoint, 0x0040);
		}

		// class UBrushBuilder : public UObject
		TEST_METHOD(Class__Engine__BrushBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, BitmapFilename, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Tooltip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_1LU4, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Vertices, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Polys, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Layer, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_6K0I, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBuilder, 0x0080);
		}

		// class UBrushComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__BrushComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, Brush, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, BrushBodySetup, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, PrePivot, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, UnknownData_T6NP, 0x06AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushComponent, 0x06B0);
		}

		// class ABrushShape : public ABrush
		TEST_METHOD(Class__Engine__BrushShape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrushShape, 0x03A0);
		}

		// class UButtonStyleAsset : public UObject
		TEST_METHOD(Class__Engine__ButtonStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonStyleAsset, ButtonStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonStyleAsset, 0x0260);
		}

		// class UCameraAnim : public UObject
		TEST_METHOD(Class__Engine__CameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, CameraInterpGroup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, AnimLength, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BoundingBox, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_6IHR, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BaseFOV, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_RBBU, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessSettings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessBlendWeight, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_9F2A, 0x0564);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnim, 0x0570);
		}

		// class UCameraAnimInst : public UObject
		TEST_METHOD(Class__Engine__CameraAnimInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, CamAnim, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, InterpGroupInst, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_IBJJ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlayRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_OBKH, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveTrack, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveInst, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlaySpace, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_JFNB, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimInst, 0x0110);
		}

		// class ACameraBlockingVolume : public AVolume
		TEST_METHOD(Class__Engine__CameraBlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraBlockingVolume, 0x03A0);
		}

		// class UCameraModifier : public UObject
		TEST_METHOD(Class__Engine__CameraModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_NAWL, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Priority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_XOI9, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, CameraOwner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaInTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaOutTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Alpha, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_AYBZ, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier, 0x0048);
		}

		// class UCameraModifier_CameraShake : public UCameraModifier
		TEST_METHOD(Class__Engine__CameraModifier_CameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ActiveShakes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, SplitScreenShakeScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, UnknownData_K940, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier_CameraShake, 0x0060);
		}

		// class UCameraShake : public UObject
		TEST_METHOD(Class__Engine__CameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_VGG0, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationDuration, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationBlendInTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationBlendOutTime, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, RotOscillation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, LocOscillation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, FOVOscillation, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimPlayRate, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimScale, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimBlendInTime, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimBlendOutTime, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, RandomAnimSegmentDuration, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, Anim, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_4GWJ, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, CameraOwner, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_EDG8, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, ShakeScale, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillatorTimeRemaining, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimInst, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_SRN3, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShake, 0x0160);
		}

		// class UCanvas : public UObject
		TEST_METHOD(Class__Engine__Canvas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DrawColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_C2VH, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_26IA, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ColorModulate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DefaultTexture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, GradientTexture0, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ReporterGraph, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_LGE5, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvas, 0x02C0);
		}

		// class UTexture : public UObject
		TEST_METHOD(Class__Engine__Texture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_U10Y, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LightingGuid, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, NumCinematicMipLevels, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_NLBR, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, AssetUserData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, CachedCombinedLODBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_OB3D, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, CompressionSettings, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, Filter, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODGroup, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_FQ3A, 0x006B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture, 0x00C8);
		}

		// class UTextureRenderTarget : public UTexture
		TEST_METHOD(Class__Engine__TextureRenderTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, TargetGamma, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, UnknownData_44HV, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget, 0x00D0);
		}

		// class UTextureRenderTarget2D : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeX, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeY, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, ClearColor, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressX, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressY, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, UnknownData_ITR0, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, UnknownData_AJ1L, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, RenderTargetFormat, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, UnknownData_QRRL, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, UnknownData_4TXU, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, OverrideFormat, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, UnknownData_3I4I, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget2D, 0x0100);
		}

		// class UCanvasRenderTarget2D : public UTextureRenderTarget2D
		TEST_METHOD(Class__Engine__CanvasRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, OnCanvasRenderTargetUpdate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, World, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, bShouldClearRenderTargetOnReceiveUpdate, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, UnknownData_REG5, 0x0119);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasRenderTarget2D, 0x0120);
		}

		// class UCapsuleComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__CapsuleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, CapsuleHalfHeight, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, CapsuleRadius, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, CapsuleHeight, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, UnknownData_WSM6, 0x06BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCapsuleComponent, 0x06C0);
		}

		// class UMovementComponent : public UActorComponent
		TEST_METHOD(Class__Engine__MovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedComponent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedPrimitive, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_XGWZ, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, Velocity, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_2SPF, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintAxisSetting, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_DNG5, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintNormal, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintOrigin, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_J0LD, 0x0131);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovementComponent, 0x0138);
		}

		// class UNavMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__NavMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, NavAgentProps, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, FixedPathBrakingDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, UnknownData_MWER, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, MovementState, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, UnknownData_649G, 0x0164);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMovementComponent, 0x0170);
		}

		// class UPawnMovementComponent : public UNavMovementComponent
		TEST_METHOD(Class__Engine__PawnMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnMovementComponent, PawnOwner, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnMovementComponent, 0x0178);
		}

		// class UCharacterMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__CharacterMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_LC3J, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CharacterOwner, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_CNHM, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GravityScale, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxStepHeight, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpZVelocity, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOffJumpZFactor, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorAngle, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorZ, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MovementMode, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CustomMovementMode, 0x01AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_TDFM, 0x01AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundFriction, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeed, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeedCrouched, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSwimSpeed, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxFlySpeed, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxCustomMovementSpeed, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxAcceleration, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinAnalogWalkSpeed, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFrictionFactor, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFriction, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_YM3G, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationWalking, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFalling, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationSwimming, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFlying, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControl, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostMultiplier, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostVelocityThreshold, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, FallingLateralFriction, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CrouchedHalfHeight, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Buoyancy, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchRadiusThreshold, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchAdditionalHeight, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RotationRate, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_5YXP, 0x023A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DeferredUpdatedMoveComponent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxOutOfWaterStepHeight, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, OutofWaterZ, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Mass, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, bEnablePhysicsInteraction, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, bTouchForceScaledToMass, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, bPushForceScaledToMass, 0x0256);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, bPushForceUsingZOffset, 0x0257);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, bScalePushForceToVelocity, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_5U15, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, StandingDownwardForceScale, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, InitialPushForceFactor, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForceFactor, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForcePointZOffsetFactor, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, TouchForceFactor, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTouchForce, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxTouchForce, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RepulsionForce, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_IUP7, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CrouchedSpeedMultiplier, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UpperImpactNormalScale, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Acceleration, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateLocation, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateRotation, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateVelocity, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastTransformUpdateTimeStamp, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingImpulseToApply, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingForceToApply, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnalogInputModifier, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_G38K, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationTimeStep, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationIterations, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometry, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometryAsProxy, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawn, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawnAsProxy, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothLocationTime, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothRotationTime, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothLocationTime, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothRotationTime, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkRadius, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkHalfHeight, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMaxSmoothUpdateDistance, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkNoSmoothUpdateDistance, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSmoothingMode, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_VRWK, 0x031D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LedgeCheckThreshold, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOutOfWaterPitch, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentFloor, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultLandMovementMode, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultWaterMovementMode, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundMovementMode, 0x03C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_NW5P, 0x03C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_01R8, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceConsiderationRadius, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RequestedVelocity, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceUID, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceGroup, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToAvoid, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToIgnore, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceWeight, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingLaunchVelocity, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_MKEE, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterval, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionTimer, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterpSpeed, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleUp, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleDown, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavWalkingFloorDistTolerance, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PostPhysicsTickFunction, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_759V, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTimeBetweenTimeStampResets, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_OP57, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentRootMotion, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_ECJI, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RootMotionParams, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnimRootMotionVelocity, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, bWasSimulatingRootMotion, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_3HS6, 0x070D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_LHAQ, 0x0711);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterMovementComponent, 0x0718);
		}

		// class UZ_Inventory_Information_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Z_Inventory_Information__Z_Inventory_Information_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, AmmoIcon, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, AmmoText, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, Cost, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, Description, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, Discount, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, Fon, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, HorizontalBox_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, HorizontalBoxAmmo, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, Image_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, Image_2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, Image_3, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, Image_8, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, Image_9, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, Image_10, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, Image_11, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, Image_Bottom, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, Image_Top, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, IntIcon1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, IntIcon2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, IntIcon3, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, IntIcon4, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, IntIcon5, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, MagImage_2, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, MagImage_3, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, MagImage_4, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, MagImage_5, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, MagImage_6, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, MagImage_7, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, MagImage_8, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, MagImage_9, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, MagImage_10, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, MainIcon, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, Mass, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, NameText, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, TextBlock_1, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, TextBlock_2, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, TextBlock_3, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, VerticalBoxInteraction, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, VerticalMagazines, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, Loot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, IntIconsArray, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, InteractionVisibility, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, UnknownData_18GK, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, CostVar, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Information_C, MagazinesIconsArray, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZ_Inventory_Information_C, 0x03C8);
		}

		// class UCheatManager : public UObject
		TEST_METHOD(Class__Engine__CheatManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerRef, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, UnknownData_PH8C, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheatManager, 0x0078);
		}

		// class UCheckBoxStyleAsset : public UObject
		TEST_METHOD(Class__Engine__CheckBoxStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxStyleAsset, CheckBoxStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxStyleAsset, 0x0518);
		}

		// class UChildActorComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ChildActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorClass, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorTemplate, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, UnknownData_8BUO, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildActorComponent, 0x02C0);
		}

		// class UPlayer : public UObject
		TEST_METHOD(Class__Engine__Player)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_VWXK, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, PlayerController, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, CurrentNetSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredInternetSpeed, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredLanSpeed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_2PN7, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayer, 0x0048);
		}

		// class UNetConnection : public UPlayer
		TEST_METHOD(Class__Engine__NetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Children, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Driver, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMapClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMap, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OpenChannels, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, SentTemporaries, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ViewTarget, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OwningActor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, MaxPacket, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_OT22, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PlayerId, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_WHYE, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, LastReceiveTime, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_0LYD, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ChannelsToTick, 0x33628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_8653, 0x33638);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetConnection, 0x33660);
		}

		// class UChildConnection : public UNetConnection
		TEST_METHOD(Class__Engine__ChildConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildConnection, Parent, 0x33660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildConnection, 0x33668);
		}

		// class UPlatformInterfaceBase : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceBase, AllDelegates, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceBase, 0x0038);
		}

		// class UCloudStorageBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__CloudStorageBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, LocalCloudFiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, UnknownData_QT5S, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCloudStorageBase, 0x0050);
		}

		// class UCollisionProfile : public UDeveloperSettings
		TEST_METHOD(Class__Engine__CollisionProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, Profiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, DefaultChannelResponses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, EditProfiles, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, ProfileRedirects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, CollisionChannelRedirects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, UnknownData_I22N, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollisionProfile, 0x0158);
		}

		// class UCommandlet : public UObject
		TEST_METHOD(Class__Engine__Commandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpWebLink, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamDescriptions, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, UnknownData_BQVX, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCommandlet, 0x0080);
		}

		// class UDynamicBlueprintBinding : public UObject
		TEST_METHOD(Class__Engine__DynamicBlueprintBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicBlueprintBinding, 0x0028);
		}

		// class UComponentDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__ComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComponentDelegateBinding, ComponentDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComponentDelegateBinding, 0x0038);
		}

		// class UEngine : public UObject
		TEST_METHOD(Class__Engine__Engine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_LBTC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFont, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFontName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFont, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFontName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFont, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFontName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFont, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFontName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFont, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFontName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFonts, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_217P, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFontNames, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClassName, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClass, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClassName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClass, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClassName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClass, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClassName, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClassName, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClass, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClassName, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClass, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClass, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClassName, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClassName, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClass, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AIControllerClassName, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettings, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClass, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClassName, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBlueprintBaseClassName, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingletonClassName, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingleton, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManagerClassName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManager, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTexture, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTextureName, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTexture, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTextureName, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTexture, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTextureName, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTexture, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTextureName, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTexture, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTextureName, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTexture, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTextureName, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterial, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterialName, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterial, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterialName, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterial, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterialName, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterial, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterialName, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityMaterial, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityName, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterial, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterialName, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterial, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterialName, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterial, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterialName, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterial, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterialName, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_ColorOnly, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_ColorOnly, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_AlphaAsColor, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_AlphaAsColor, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_RedOnly, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_RedOnly, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_GreenOnly, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_GreenOnly, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_BlueOnly, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_BlueOnly, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugEditorMaterialName, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterial, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialX, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialXAxis, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialY, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialYAxis, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZ, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZAxis, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialPrismatic, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterial, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterialName, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterial, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterialName, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterial, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingOnlyBrightness, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShaderComplexityColors, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, QuadComplexityColors, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightComplexityColors, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StationaryLightOverlapColors, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LODColorationColors, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HLODColorationColors, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingAccuracyColors, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxPixelShaderAdditiveComplexityCount, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxES2PixelShaderAdditiveComplexityCount, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinLightMapDensity, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, IdealLightMapDensity, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxLightMapDensity, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_NJQZ, 0x05FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityGrayscaleScale, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityColorScale, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityVertexMappedColor, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensitySelectedColor, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StatColorMappings, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterial, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterialName, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveGameNameRedirects, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveClassRedirects, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActivePluginRedirects, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveStructRedirects, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTexture, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTextureName, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTexture, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTextureName, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTexture, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTextureName, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTexture, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTextureName, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_6WWK, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewport, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DeferredCommands, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TickCycles, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameCycles, 0x073C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ClientCycles, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NearClipPlane, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_M76R, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaximumLoopIterationCount, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_C167, 0x0751);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, FixedFrameRate, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmoothedFrameRateRange, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_Y0I3, 0x0769);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NumPawnsAllowedToBeSpawnedInAFrame, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_7NNW, 0x0771);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WorldBox, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushWire, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_AddWire, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SubtractWire, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SemiSolidWire, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_NonSolidWire, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WireBackground, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_ScaleBoxHi, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_VolumeCollision, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BSPCollision, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_OrthoBackground, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_Volume, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushShape, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingDistanceFactor, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_MJCY, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameScreenshotSaveDirectory, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionType, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_WFJ2, 0x07C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionDescription, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionGameMode, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MeshLODRange, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_1AA8, 0x07ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraRotationThreshold, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraTranslationThreshold, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PrimitiveProbablyVisibleTime, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxOcclusionPixelsFraction, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_24KK, 0x0801);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResize, 0x0804);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResizeWarn, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_PJWD, 0x080C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PendingDroppedNotes, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicErrorCorrection, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetClientTicksPerSecond, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DisplayGamma, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinDesiredFrameRate, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultSelectedMaterialColor, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColor, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionOutlineColor, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubduedSelectionOutlineColor, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColorOverride, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bIsOverridingSelectedColor, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_CTX5, 0x0899);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_IA7C, 0x089D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bEnableVisualLogRecordingOnStart, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_4HSV, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ScreenSaverInhibitorSemaphore, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_COU6, 0x08AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ParticleEventManagerClassPath, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_REGY, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensity, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionMeshSectionHighlightIntensity, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BSPSelectionHighlightIntensity, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HoverHighlightIntensity, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensityBillboards, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_ZKAD, 0x08E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetDriverDefinitions, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ServerActors, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RuntimeServerActors, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_CDHD, 0x0D01);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NextWorldContextHandle, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_FSQJ, 0x0D1C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngine, 0x0DEC);
		}

		// class UScriptViewportClient : public UObject
		TEST_METHOD(Class__Engine__ScriptViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptViewportClient, UnknownData_1FP0, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptViewportClient, 0x0030);
		}

		// class UGameViewportClient : public UScriptViewportClient
		TEST_METHOD(Class__Engine__GameViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_21T1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, ViewportConsole, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, DebugProperties, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_C7DV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, World, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, GameInstance, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_LYHA, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameViewportClient, 0x0610);
		}

		// class UConsole : public UObject
		TEST_METHOD(Class__Engine__Console)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_ZZV8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, ConsoleTargetPlayer, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_Black, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_White, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_N9F0, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, HistoryBuffer, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_4KQE, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsole, 0x0130);
		}

		// class UControlChannel : public UChannel
		TEST_METHOD(Class__Engine__ControlChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlChannel, UnknownData_24P5, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlChannel, 0x0080);
		}

		// class UControlRigInterface : public UInterface
		TEST_METHOD(Class__Engine__ControlRigInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlRigInterface, 0x0028);
		}

		// class UStreamingSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__StreamingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_KP8I, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMultiplier, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMinTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, MinBulkDataSizeForAsyncLoading, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_SHAH, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, AsyncLoadingTimeLimit, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityAsyncLoadingExtraTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingActorsUpdateTimeLimit, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsRegistrationGranularity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingUnregisterComponentsTimeLimit, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsUnregistrationGranularity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_4LC5, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamingSettings, 0x0068);
		}

		// class AStove_04older_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Stove_04older_Rig__Stove_04older_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStove_04older_Rig_C, 0x03C2);
		}

		// class UGarbageCollectionSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__GarbageCollectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, TimeBetweenPurgingPendingKillObjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, UnknownData_V5N7, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, NumRetriesBeforeForcingGC, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsNotConsideredByGC, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, SizeOfPermanentObjectPool, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInGame, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInEditor, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, UnknownData_OOTP, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGarbageCollectionSettings, 0x0058);
		}

		// class ACullDistanceVolume : public AVolume
		TEST_METHOD(Class__Engine__CullDistanceVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, CullDistances, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, UnknownData_CC6J, 0x03B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACullDistanceVolume, 0x03B8);
		}

		// class UCurveBase : public UObject
		TEST_METHOD(Class__Engine__CurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveBase, UnknownData_QMJ9, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveBase, 0x0030);
		}

		// class UCurveEdPresetCurve : public UObject
		TEST_METHOD(Class__Engine__CurveEdPresetCurve)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveEdPresetCurve, 0x0028);
		}

		// class UCurveFloat : public UCurveBase
		TEST_METHOD(Class__Engine__CurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, FloatCurve, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, bIsEventCurve, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, UnknownData_PUSU, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveFloat, 0x00A8);
		}

		// class UCurveLinearColor : public UCurveBase
		TEST_METHOD(Class__Engine__CurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, FloatCurves, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColor, 0x01F0);
		}

		// class UCurveSourceInterface : public UInterface
		TEST_METHOD(Class__Engine__CurveSourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveSourceInterface, 0x0028);
		}

		// class UCurveTable : public UObject
		TEST_METHOD(Class__Engine__CurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveTable, UnknownData_ETMS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveTable, 0x0080);
		}

		// class UCurveVector : public UCurveBase
		TEST_METHOD(Class__Engine__CurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveVector, FloatCurves, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveVector, 0x0180);
		}

		// class UDamageType : public UObject
		TEST_METHOD(Class__Engine__DamageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_HM1A, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageImpulse, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleImpulse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleDamageSpreadScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageFalloff, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_O268, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType, 0x0040);
		}

		// class UPrimaryDataAsset : public UDataAsset
		TEST_METHOD(Class__Engine__PrimaryDataAsset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryDataAsset, 0x0030);
		}

		// class UDataTable : public UObject
		TEST_METHOD(Class__Engine__DataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, RowStruct, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_PJRC, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTable, 0x0080);
		}

		// class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DataTableFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTableFunctionLibrary, 0x0028);
		}

		// class ADebugCameraController : public APlayerController
		TEST_METHOD(Class__Engine__DebugCameraController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_TXR7, 0x06C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, DrawFrustum, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_G8W7, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SpeedScale, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialMaxSpeed, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialAccel, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialDecel, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_ZLER, 0x0700);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraController, 0x0708);
		}

		// class AHUD : public AActor
		TEST_METHOD(Class__Engine__HUD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PlayerOwner, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_XPMJ, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PostRenderedActors, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_LNR6, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugDisplay, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ToggledDebugCategories, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, Canvas, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugCanvas, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugTextList, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetDesiredClass, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetActor, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_LXR3, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHUD, 0x0450);
		}

		// class ADebugCameraHUD : public AHUD
		TEST_METHOD(Class__Engine__DebugCameraHUD)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraHUD, 0x0450);
		}

		// class UDebugDrawService : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DebugDrawService)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugDrawService, 0x0028);
		}

		// class ADecalActor : public AActor
		TEST_METHOD(Class__Engine__DecalActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADecalActor, decal, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADecalActor, 0x0370);
		}

		// class UDecalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__DecalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalMaterial, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, SortOrder, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeScreenSize, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeStartDelay, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeDuration, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_3UI3, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalSize, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_W5C0, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecalComponent, 0x02D0);
		}

		// class ADefaultPawn : public APawn
		TEST_METHOD(Class__Engine__DefaultPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseTurnRate, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseLookUpRate, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MovementComponent, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, CollisionComponent, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MeshComponent, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, UnknownData_6ZID, 0x03E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPawn, 0x03F0);
		}

		// class APhysicsVolume : public AVolume
		TEST_METHOD(Class__Engine__PhysicsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, TerminalVelocity, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, Priority, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, FluidFriction, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, UnknownData_N218, 0x03AD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsVolume, 0x03B0);
		}

		// class ADefaultPhysicsVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__DefaultPhysicsVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPhysicsVolume, 0x03B0);
		}

		// class UDemoNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__DemoNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetConnection, UnknownData_E0R3, 0x33660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetConnection, 0x33680);
		}

		// class UNetDriver : public UObject
		TEST_METHOD(Class__Engine__NetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_1IGN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClassName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxDownloadSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_QE0C, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetServerMaxTickRate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxInternetClientRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxClientRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerTravelPause, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, SpawnPrioritySeconds, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RelevantTimeout, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, KeepAliveTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, InitialConnectTimeout, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ConnectionTimeout, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, TimeoutMultiplierForUnoptimizedBuilds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNoTimeouts, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_6AUK, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerConnection, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ClientConnections, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_KI6V, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, World, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_KRHN, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClass, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RoleProperty, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RemoteRoleProperty, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetDriverName, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_WAL6, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, Time, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_5U2I, 0x013C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetDriver, 0x0458);
		}

		// class UDemoNetDriver : public UNetDriver
		TEST_METHOD(Class__Engine__DemoNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_6FXX, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, RollbackNetStartupActors, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_TDG0, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, CheckpointSaveMaxMSPerFrame, 0x0934);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_7JR6, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, bIsLocalReplay, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_LSAF, 0x0969);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetDriver, 0x0990);
		}

		// class UPendingNetGame : public UObject
		TEST_METHOD(Class__Engine__PendingNetGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_5QH5, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, NetDriver, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, DemoNetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_GT6U, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPendingNetGame, 0x00C8);
		}

		// class UDemoPendingNetGame : public UPendingNetGame
		TEST_METHOD(Class__Engine__DemoPendingNetGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoPendingNetGame, 0x00C8);
		}

		// class UDestructibleInterface : public UInterface
		TEST_METHOD(Class__Engine__DestructibleInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleInterface, 0x0028);
		}

		// class UTextureLODSettings : public UObject
		TEST_METHOD(Class__Engine__TextureLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLODSettings, TextureLODGroups, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLODSettings, 0x0038);
		}

		// class UDeviceProfile : public UTextureLODSettings
		TEST_METHOD(Class__Engine__DeviceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, DeviceType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, BaseProfileName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, Parent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_Y9XA, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, CVars, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_C486, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfile, 0x00D0);
		}

		// class UDeviceProfileManager : public UObject
		TEST_METHOD(Class__Engine__DeviceProfileManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, Profiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, UnknownData_V76Y, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfileManager, 0x0110);
		}

		// class USoundBase : public UObject
		TEST_METHOD(Class__Engine__SoundBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundClassObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_HPWY, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundConcurrencySettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencyOverrides, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, MaxConcurrentResolutionRule, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_1W2S, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, MaxConcurrentPlayCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Duration, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_KCK1, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, AttenuationSettings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Priority, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_ZTB0, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixSends, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SourceEffectChain, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, BusSends, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_KQDO, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundBase, 0x00A8);
		}

		// class UDialogueSoundWaveProxy : public USoundBase
		TEST_METHOD(Class__Engine__DialogueSoundWaveProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueSoundWaveProxy, UnknownData_LL9G, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueSoundWaveProxy, 0x00C8);
		}

		// class UDialogueVoice : public UObject
		TEST_METHOD(Class__Engine__DialogueVoice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Gender, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Plurality, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_QBKC, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, LocalizationGUID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_J1KF, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueVoice, 0x0040);
		}

		// class UDialogueWave : public UObject
		TEST_METHOD(Class__Engine__DialogueWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, UnknownData_VXXJ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SpokenText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SubtitleOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, ContextMappings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, LocalizationGUID, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueWave, 0x0070);
		}

		// class ALight : public AActor
		TEST_METHOD(Class__Engine__Light)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, LightComponent, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, UnknownData_XNQ1, 0x0371);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALight, 0x0378);
		}

		// class ADirectionalLight : public ALight
		TEST_METHOD(Class__Engine__DirectionalLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADirectionalLight, 0x0378);
		}

		// class ULightComponentBase : public USceneComponent
		TEST_METHOD(Class__Engine__LightComponentBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightGuid, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Brightness, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Intensity, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightColor, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_LZTV, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, IndirectLightingIntensity, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, VolumetricScatteringIntensity, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_WMJ9, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponentBase, 0x02BC);
		}

		// class ULightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__LightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDrawDistance, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDistanceFadeRange, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_3RN5, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowMapChannel, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_PPI0, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MinRoughness, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowResolutionScale, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowBias, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSharpen, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ContactShadowLength, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_LZJT, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightingChannels, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_1EGC, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionMaterial, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionScale, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_51D7, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESTexture, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_AMDV, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESBrightnessScale, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionFadeDistance, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, DisabledBrightness, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_1ORU, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomScale, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomThreshold, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomTint, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, bUseRayTracedDistanceFieldShadows, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_01JB, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, RayStartOffsetDepthScale, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_FGLD, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponent, 0x03C0);
		}

		// class UDirectionalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__DirectionalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_J14H, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionMaskDarkness, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionDepthRange, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightShaftOverrideDirection, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, WholeSceneDynamicShadowRadius, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceMovableLight, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceStationaryLight, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowCascades, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeDistributionExponent, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeTransitionFraction, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowDistanceFadeoutFraction, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_E0PV, 0x03F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowCascadeCount, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowDistance, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DistanceFieldShadowDistance, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceAngle, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, TraceDistance, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightmassSettings, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_QA4U, 0x041D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ModulatedShadowColor, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_ZIXB, 0x0425);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDirectionalLightComponent, 0x0430);
		}

		// class UDistribution : public UObject
		TEST_METHOD(Class__Engine__Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistribution, UnknownData_EYER, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistribution, 0x0030);
		}

		// class UDistributionFloat : public UDistribution
		TEST_METHOD(Class__Engine__DistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloat, UnknownData_QHNV, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloat, 0x0038);
		}

		// class UDistributionFloatConstant : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, UnknownData_3D2E, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstant, 0x0040);
		}

		// class UDistributionFloatConstantCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstantCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstantCurve, 0x0050);
		}

		// class UDistributionFloatParameterBase : public UDistributionFloatConstant
		TEST_METHOD(Class__Engine__DistributionFloatParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinInput, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxInput, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinOutput, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxOutput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParamMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, UnknownData_652J, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParameterBase, 0x0060);
		}

		// class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
		TEST_METHOD(Class__Engine__DistributionFloatParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParticleParameter, 0x0060);
		}

		// class UDistributionFloatUniform : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniform, 0x0040);
		}

		// class UDistributionFloatUniformCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniformCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniformCurve, 0x0050);
		}

		// class UDistributionVector : public UDistribution
		TEST_METHOD(Class__Engine__DistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVector, UnknownData_6RE0, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVector, 0x0038);
		}

		// class UDistributionVectorConstant : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_T74S, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, LockedAxes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_EI6R, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstant, 0x0050);
		}

		// class UDistributionVectorConstantCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_B3YR, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_X3JQ, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstantCurve, 0x0058);
		}

		// class UDistributionVectorParameterBase : public UDistributionVectorConstant
		TEST_METHOD(Class__Engine__DistributionVectorParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinInput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxInput, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinOutput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxOutput, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParamModes, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, UnknownData_06FI, 0x008B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParameterBase, 0x0090);
		}

		// class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
		TEST_METHOD(Class__Engine__DistributionVectorParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParticleParameter, 0x0090);
		}

		// class UDistributionVectorUniform : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Max, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Min, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_XJ0W, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, MirrorFlags, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_QTEJ, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniform, 0x0060);
		}

		// class UDistributionVectorUniformCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_55V6, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, MirrorFlags, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_YNRA, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_3RPI, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniformCurve, 0x0060);
		}

		// class ADocumentationActor : public AActor
		TEST_METHOD(Class__Engine__DocumentationActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADocumentationActor, UnknownData_L6TA, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADocumentationActor, 0x0370);
		}

		// class UDPICustomScalingRule : public UObject
		TEST_METHOD(Class__Engine__DPICustomScalingRule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDPICustomScalingRule, 0x0028);
		}

		// class UDrawFrustumComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__DrawFrustumComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumColor, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAngle, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAspectRatio, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumStartDist, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumEndDist, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_OKQD, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, Texture, 0x06A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawFrustumComponent, 0x06B0);
		}

		// class USphereComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__SphereComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereComponent, SphereRadius, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereComponent, UnknownData_VMSA, 0x06B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereComponent, 0x06C0);
		}

		// class UDrawSphereComponent : public USphereComponent
		TEST_METHOD(Class__Engine__DrawSphereComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawSphereComponent, 0x06C0);
		}

		// class UEdGraph : public UObject
		TEST_METHOD(Class__Engine__EdGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Schema, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Nodes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, UnknownData_M5DK, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraph, 0x00C0);
		}

		// class UEdGraphNode : public UObject
		TEST_METHOD(Class__Engine__EdGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_HICV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, DeprecatedPins, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeWidth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeHeight, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, AdvancedPinDisplay, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, EnabledState, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_DWVG, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_Q770, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeComment, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_Z0HF, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorMsg, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeGuid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode, 0x0098);
		}

		// class UEdGraphNode_Documentation : public UEdGraphNode
		TEST_METHOD(Class__Engine__EdGraphNode_Documentation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Link, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Excerpt, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode_Documentation, 0x00B8);
		}

		// class UEdGraphPin_Deprecated : public UObject
		TEST_METHOD(Class__Engine__EdGraphPin_Deprecated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinToolTip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, Direction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, UnknownData_JH2V, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultValue, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, AutogeneratedDefaultValue, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultObject, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultTextValue, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, LinkedTo, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, SubPins, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ParentPin, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ReferencePassThroughConnection, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphPin_Deprecated, 0x0140);
		}

		// class UEdGraphSchema : public UObject
		TEST_METHOD(Class__Engine__EdGraphSchema)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphSchema, 0x0028);
		}

		// class AEmitter : public AActor
		TEST_METHOD(Class__Engine__Emitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, ParticleSystemComponent, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, UnknownData_P3EZ, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleSpawn, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleBurst, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleDeath, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleCollide, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitter, 0x03B8);
		}

		// class AEmitterCameraLensEffectBase : public AEmitter
		TEST_METHOD(Class__Engine__EmitterCameraLensEffectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffect, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffectNonExtremeContent, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseCamera, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, RelativeTransform, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseFOV, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_SG1L, 0x0405);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, EmittersToTreatAsSame, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, DistFromCamera, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_ZJTP, 0x041C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitterCameraLensEffectBase, 0x0420);
		}

		// class UInventory_widget_BASE_C : public UZ_InventoryBASE_ROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Inventory_widget_base__Inventory_widget_BASE_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, UberGraphFrame, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, ShowCraft, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, BackPackSlot, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, Body, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, Category0, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, CategoryEquip, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, Container, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, ContainerName, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, Face, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, Fon, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, Grenades, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, Hemlet, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, HemletSlot, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, Image_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, Image_3, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, Image_4, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, InventoryRenderWidget, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, Legs, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, Melee, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, outside, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, Player_Condition_BASE, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, Pr_2, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, Pr_3, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, Pymary, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, Sc_2, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, Sc_3, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, Secondary, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, Shoes, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, Weapons, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, Z_InventoryCRAFTPanel, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, InventorySlotsWidgets, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, Slots, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, ContainerSlotsWidgets, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, TempLoot, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, TempDragObj, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, IsCraftShow, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, UnknownData_0HPG, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_widget_BASE_C, AdditionalBackPackSlots, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventory_widget_BASE_C, 0x03B0);
		}

		// class UEndUserSettings : public UObject
		TEST_METHOD(Class__Engine__EndUserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndUserSettings, UnknownData_8NUQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndUserSettings, bSendAnonymousUsageDataToEpic, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndUserSettings, bSendMeanTimeBetweenFailureDataToEpic, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndUserSettings, bAllowUserIdInUsageData, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndUserSettings, UnknownData_A6TC, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndUserSettings, 0x0038);
		}

		// class UEngineBaseTypes : public UObject
		TEST_METHOD(Class__Engine__EngineBaseTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineBaseTypes, 0x0028);
		}

		// class UEngineHandlerComponentFactory : public UHandlerComponentFactory
		TEST_METHOD(Class__Engine__EngineHandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineHandlerComponentFactory, 0x0028);
		}

		// class ULocalMessage : public UObject
		TEST_METHOD(Class__Engine__LocalMessage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalMessage, 0x0028);
		}

		// class UEngineMessage : public ULocalMessage
		TEST_METHOD(Class__Engine__EngineMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, FailedPlaceMessage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, MaxedOutMessage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, EnteredMessage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, LeftMessage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, GlobalNameChange, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, SpecEnteredMessage, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewPlayerMessage, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewSpecMessage, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineMessage, 0x00A8);
		}

		// class UEngineTypes : public UObject
		TEST_METHOD(Class__Engine__EngineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineTypes, 0x0028);
		}

		// class AExponentialHeightFog : public AInfo
		TEST_METHOD(Class__Engine__ExponentialHeightFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, Component, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, UnknownData_I9BE, 0x0371);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AExponentialHeightFog, 0x0378);
		}

		// class UExponentialHeightFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ExponentialHeightFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogDensity, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogInscatteringColor, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_O5WZ, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemap, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemapAngle, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringTextureTint, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FullyDirectionalInscatteringColorDistance, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, NonDirectionalInscatteringColorDistance, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringExponent, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringStartDistance, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringColor, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogHeightFalloff, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogMaxOpacity, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, StartDistance, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogCutoffDistance, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bEnableVolumetricFog, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_8HSO, 0x02F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogScatteringDistribution, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogAlbedo, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogEmissive, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogExtinctionScale, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogDistance, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogStaticLightingScatteringIntensity, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bOverrideLightColorsWithFogInscatteringColors, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_JW3W, 0x031D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExponentialHeightFogComponent, 0x0320);
		}

		// class UExporter : public UObject
		TEST_METHOD(Class__Engine__Exporter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, SupportedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportRootScope, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatExtension, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatDescription, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, PreferredFormatIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, TextIndent, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_RG41, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExporter, 0x0068);
		}

		// class UFloatingPawnMovement : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__FloatingPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, MaxSpeed, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Acceleration, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Deceleration, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, TurningBoost, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, UnknownData_GF1V, 0x0189);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatingPawnMovement, 0x0190);
		}

		// class UFont : public UObject
		TEST_METHOD(Class__Engine__Font)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_RGYH, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, FontCacheType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_RF7O, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Characters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Textures, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, IsRemapped, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, EmScale, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Ascent, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Descent, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Leading, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Kerning, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ImportOptions, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, NumCharacters, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_3GJX, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, MaxCharHeight, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ScalingFactor, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontSize, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, CompositeFont, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_IDA1, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFont, 0x01B8);
		}

		// class UFontFace : public UObject
		TEST_METHOD(Class__Engine__FontFace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_XKN9, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, SourceFilename, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, Hinting, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LoadingPolicy, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LayoutMethod, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_F0GD, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFace, 0x0058);
		}

		// class UFontImportOptions : public UObject
		TEST_METHOD(Class__Engine__FontImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontImportOptions, Data, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontImportOptions, 0x00D8);
		}

		// class UForceFeedbackAttenuation : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackAttenuation, 0x00D0);
		}

		// class UForceFeedbackComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ForceFeedbackComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, ForceFeedbackEffect, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_S6I1, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, IntensityMultiplier, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationSettings, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationOverrides, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, OnForceFeedbackFinished, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_N1IE, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackComponent, 0x0370);
		}

		// class UForceFeedbackEffect : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, ChannelDetails, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, Duration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, UnknownData_HDLK, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackEffect, 0x0040);
		}

		// class UGameEngine : public UEngine
		TEST_METHOD(Class__Engine__GameEngine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, ServerFlushLogInterval, 0x0DEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, GameInstance, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, UnknownData_CZRN, 0x0DF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEngine, 0x0E40);
		}

		// class AGameModeBase : public AInfo
		TEST_METHOD(Class__Engine__GameModeBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, OptionsString, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSessionClass, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameStateClass, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerControllerClass, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerStateClass, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, HUDClass, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPawnClass, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, SpectatorClass, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ReplaySpectatorPlayerControllerClass, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSession, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameState, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPlayerName, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, UnknownData_8E3B, 0x03E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameModeBase, 0x03F8);
		}

		// class UMessage_GlobalString_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Message_GlobalString__Message_GlobalString_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_GlobalString_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_GlobalString_C, Show, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_GlobalString_C, Image_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_GlobalString_C, MessageText, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_GlobalString_C, MessagePeriod, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_GlobalString_C, Lasttime, 0x0224);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMessage_GlobalString_C, 0x0228);
		}

		// class AGameMode : public AGameModeBase
		TEST_METHOD(Class__Engine__GameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MatchState, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_P6A2, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumSpectators, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumPlayers, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumBots, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MinRespawnDelay, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumTravellingPlayers, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, EngineMessageClass, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerArray, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerStateLifeSpan, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, bHandleDedicatedServerReplays, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_O4VJ, 0x0435);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameMode, 0x0438);
		}

		// class AGameNetworkManager : public AInfo
		TEST_METHOD(Class__Engine__GameNetworkManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, AdjustedNetSpeed, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, LastNetSpeedUpdateTime, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, TotalNetBandwidth, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MinDynamicBandwidth, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxDynamicBandwidth, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_XLMC, 0x037D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyRxCheatTime, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyTxCheatTime, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, BadPingThreshold, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForRxStandby, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForTxStandby, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentForBadPing, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, JoinInProgressStandbyWaitTime, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MoveRepSize, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXPOSITIONERRORSQUARED, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXNEARZEROVELOCITYSQUARED, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, CLIENTADJUSTUPDATECOST, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXCLIENTUPDATEINTERVAL, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxMoveDeltaTime, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTime, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeThrottled, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleAtNetSpeed, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleOverPlayerCount, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientAuthorativePosition, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_0OAR, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientErrorUpdateRateLimit, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyDetection, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyResolution, 0x03CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_XCCB, 0x03CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMaxTimeMargin, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMinTimeMargin, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyResolutionRate, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyDriftAllowance, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyForceCorrectionsDuringResolution, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bUseDistanceBasedRelevancy, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_BIM7, 0x03E2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameNetworkManager, 0x03F0);
		}

		// class UGameplayStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__GameplayStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayStatics, 0x0028);
		}

		// class AGameSession : public AInfo
		TEST_METHOD(Class__Engine__GameSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSpectators, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPlayers, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPartySize, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSplitscreensPerConnection, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, bRequiresPushToTalk, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, UnknownData_QCZT, 0x0376);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, SessionName, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameSession, 0x0380);
		}

		// class AGameStateBase : public AInfo
		TEST_METHOD(Class__Engine__GameStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, GameModeClass, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, AuthorityGameMode, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, SpectatorClass, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, PlayerArray, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, bReplicatedHasBegunPlay, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_JWHA, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ReplicatedWorldTimeSeconds, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsDelta, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsUpdateFrequency, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_VRMJ, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameStateBase, 0x03A8);
		}

		// class AGameState : public AGameStateBase
		TEST_METHOD(Class__Engine__GameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, MatchState, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, PreviousMatchState, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, ElapsedTime, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, UnknownData_4MDX, 0x03BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameState, 0x03C8);
		}

		// class UGameUserSettings : public UObject
		TEST_METHOD(Class__Engine__GameUserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseVSync, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_TXG1, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeX, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeY, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeX, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeY, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosY, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FullscreenMode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedFullscreenMode, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, PreferredFullscreenMode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, version, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, AudioQualityLevel, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FrameRateLimit, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_QIE9, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenWidth, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDesiredScreenHeight, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_W8F0, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenHeight, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenWidth, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenHeight, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkResult, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkResult, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkSteps, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkSteps, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkMultiplier, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseHDRDisplayOutput, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_9982, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, HDRDisplayOutputNits, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_69ZM, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, OnGameUserSettingsUINeedsUpdate, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameUserSettings, 0x0108);
		}

		// class ASpotLight : public ALight
		TEST_METHOD(Class__Engine__SpotLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpotLight, SpotLightComponent, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpotLight, 0x0380);
		}

		// class AGeneratedMeshAreaLight : public ASpotLight
		TEST_METHOD(Class__Engine__GeneratedMeshAreaLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeneratedMeshAreaLight, 0x0380);
		}

		// class UHapticFeedbackEffect_Base : public UObject
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Base)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Base, 0x0028);
		}

		// class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Buffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, Amplitudes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, SampleRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, UnknownData_141Q, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Buffer, 0x0068);
		}

		// class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Curve, HapticDetails, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Curve, 0x0118);
		}

		// class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, SoundWave, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, UnknownData_X3AW, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_SoundWave, 0x0060);
		}

		// class USpatializationPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__Engine__SpatializationPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpatializationPluginSourceSettingsBase, 0x0028);
		}

		// class UOcclusionPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__Engine__OcclusionPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOcclusionPluginSourceSettingsBase, 0x0028);
		}

		// class UReverbPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__Engine__ReverbPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbPluginSourceSettingsBase, 0x0028);
		}

		// class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__ImportanceSamplingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportanceSamplingLibrary, 0x0028);
		}

		// class UImportantToggleSettingInterface : public UInterface
		TEST_METHOD(Class__Engine__ImportantToggleSettingInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportantToggleSettingInterface, 0x0028);
		}

		// class UInGameAdManager : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__InGameAdManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, UnknownData_MMW6, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClickedBannerDelegates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClosedAdDelegates, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameAdManager, 0x0060);
		}

		// class UInheritableComponentHandler : public UObject
		TEST_METHOD(Class__Engine__InheritableComponentHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, Records, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, UnnecessaryComponents, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInheritableComponentHandler, 0x0048);
		}

		// class UInputDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__InputDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputDelegateBinding, 0x0028);
		}

		// class UInputActionDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputActionDelegateBinding, InputActionDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputActionDelegateBinding, 0x0038);
		}

		// class UInputAxisDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisDelegateBinding, InputAxisDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisDelegateBinding, 0x0038);
		}

		// class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisKeyDelegateBinding, InputAxisKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisKeyDelegateBinding, 0x0038);
		}

		// class UInputComponent : public UActorComponent
		TEST_METHOD(Class__Engine__InputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_PVI2, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputComponent, 0x0168);
		}

		// class UInputKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeyDelegateBinding, InputKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeyDelegateBinding, 0x0038);
		}

		// class UInputSettings : public UObject
		TEST_METHOD(Class__Engine__InputSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisConfig, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_8DPE, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, FOVScale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DoubleClickTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, bCaptureMouseOnLaunch, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseCaptureMode, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, bDefaultViewportMouseLock, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseLockMode, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ActionMappings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisMappings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, bAlwaysShowTouchInterface, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, bShowConsoleOnFourFingerTap, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_P46K, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultTouchInterface, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKey, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKeys, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputSettings, 0x00B0);
		}

		// class UInputTouchDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputTouchDelegateBinding, InputTouchDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputTouchDelegateBinding, 0x0038);
		}

		// class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
		TEST_METHOD(Class__Engine__InputVectorAxisDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputVectorAxisDelegateBinding, 0x0038);
		}

		// class UInterface_AssetUserData : public UInterface
		TEST_METHOD(Class__Engine__Interface_AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_AssetUserData, 0x0028);
		}

		// class UInterface_CollisionDataProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_CollisionDataProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_CollisionDataProvider, 0x0028);
		}

		// class UInterface_PostProcessVolume : public UInterface
		TEST_METHOD(Class__Engine__Interface_PostProcessVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PostProcessVolume, 0x0028);
		}

		// class UInterpCurveEdSetup : public UObject
		TEST_METHOD(Class__Engine__InterpCurveEdSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, Tabs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, ActiveTab, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, UnknownData_2B87, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpCurveEdSetup, 0x0040);
		}

		// class UInterpData : public UObject
		TEST_METHOD(Class__Engine__InterpData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, PathBuildTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpGroups, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CurveEdSetup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, UnknownData_GF70, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CachedDirectorGroup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, AllEventNames, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpData, 0x0070);
		}

		// class UInterpFilter : public UObject
		TEST_METHOD(Class__Engine__InterpFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpFilter, Caption, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter, 0x0038);
		}

		// class UInterpFilter_Classes : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Classes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Classes, 0x0038);
		}

		// class UInterpFilter_Custom : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Custom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Custom, 0x0038);
		}

		// class UInterpGroup : public UObject
		TEST_METHOD(Class__Engine__InterpGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_E4ZR, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, InterpTracks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_JQ9K, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroup, 0x0050);
		}

		// class UInterpGroupCamera : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CameraAnimInst, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CompressTolerance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, UnknownData_F437, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupCamera, 0x0060);
		}

		// class UInterpGroupDirector : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupDirector, 0x0050);
		}

		// class UInterpGroupInst : public UObject
		TEST_METHOD(Class__Engine__InterpGroupInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, Group, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, GroupActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, TrackInst, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInst, 0x0048);
		}

		// class UInterpGroupInstCamera : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstCamera)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstCamera, 0x0048);
		}

		// class UInterpGroupInstDirector : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstDirector, 0x0048);
		}

		// class UInterpToMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__InterpToMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, Duration, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_NOKJ, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, BehaviourType, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_OJPE, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_O858, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToReverse, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToStop, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitBeginDelegate, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitEndDelegate, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnResetDelegate, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationTimeStep, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationIterations, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, ControlPoints, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_5VFZ, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpToMovementComponent, 0x01D8);
		}

		// class UInterpTrack : public UObject
		TEST_METHOD(Class__Engine__InterpTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_CC70, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, SubTracks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackInstClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, ActiveCondition, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_TUS3, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackTitle, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_C6FF, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrack, 0x0070);
		}

		// class UInterpTrackFloatBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackFloatBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, FloatTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, UnknownData_KAZE, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatBase, 0x0090);
		}

		// class UInterpTrackAnimControl : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, SlotName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, AnimSeqs, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, UnknownData_2TAJ, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAnimControl, 0x00B0);
		}

		// class UInterpTrackVectorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVectorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, VectorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, UnknownData_BD59, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorBase, 0x0090);
		}

		// class UInterpTrackAudioMaster : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAudioMaster, 0x0090);
		}

		// class UInterpTrackBoolProp : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, BoolTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, PropertyName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackBoolProp, 0x0088);
		}

		// class UInterpTrackColorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorProp, 0x0098);
		}

		// class UInterpTrackColorScale : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorScale, 0x0090);
		}

		// class UInterpTrackDirector : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, CutTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, UnknownData_UJDB, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackDirector, 0x0088);
		}

		// class UInterpTrackEvent : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, EventTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, UnknownData_9E52, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackEvent, 0x0088);
		}

		// class UInterpTrackFade : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_YOFD, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, FadeColor, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_0YHF, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFade, 0x00A8);
		}

		// class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimBlueprintClass, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, ParamName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, UnknownData_IY0F, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatAnimBPParam, 0x00B0);
		}

		// class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatMaterialParam, 0x00A8);
		}

		// class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatParticleParam, ParamName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatParticleParam, 0x0098);
		}

		// class UInterpTrackFloatProp : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatProp, 0x0098);
		}

		// class UInterpTrackInst : public UObject
		TEST_METHOD(Class__Engine__InterpTrackInst)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInst, 0x0028);
		}

		// class UInterpTrackInstAnimControl : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, UnknownData_N1FF, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAnimControl, 0x0030);
		}

		// class UInterpTrackInstAudioMaster : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAudioMaster, 0x0028);
		}

		// class UInterpTrackInstProperty : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, InterpProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, PropertyOuterObjectInst, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstProperty, 0x0038);
		}

		// class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_F6QN, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, BoolProperty, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, ResetBool, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_N6TM, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstBoolProp, 0x0050);
		}

		// class UInterpTrackInstColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_5005, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, ResetColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_S7ML, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorProp, 0x0048);
		}

		// class UInterpTrackInstColorScale : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorScale, 0x0028);
		}

		// class UInterpTrackInstDirector : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstDirector, OldViewTarget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstDirector, 0x0030);
		}

		// class UInterpTrackInstEvent : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, UnknownData_5QNJ, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstEvent, 0x0030);
		}

		// class UInterpTrackInstFade : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFade, 0x0028);
		}

		// class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, AnimScriptInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, ResetFloat, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, UnknownData_O6U0, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatAnimBPParam, 0x0040);
		}

		// class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, ResetFloats, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatMaterialParam, 0x0060);
		}

		// class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, ResetFloat, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, UnknownData_SVA1, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatParticleParam, 0x0030);
		}

		// class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_GNDR, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, ResetFloat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_HJ1T, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatProp, 0x0048);
		}

		// class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, UnknownData_JJIR, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, ResetColor, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstLinearColorProp, 0x0050);
		}

		// class UInterpTrackInstMove : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetLocation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetRotation, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstMove, 0x0040);
		}

		// class UInterpTrackInstParticleReplay : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, UnknownData_8JM7, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstParticleReplay, 0x0030);
		}

		// class UInterpTrackInstSlomo : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSlomo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, OldTimeDilation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, UnknownData_6V55, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSlomo, 0x0030);
		}

		// class UInterpTrackInstSound : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, UnknownData_1KDB, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, PlayAudioComp, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSound, 0x0038);
		}

		// class UInterpTrackInstToggle : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_3DS9, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, LastUpdatePosition, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_EDE4, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstToggle, 0x0038);
		}

		// class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, ResetVectors, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorMaterialParam, 0x0060);
		}

		// class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_41PZ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, ResetVector, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_5G36, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorProp, 0x0050);
		}

		// class UInterpTrackInstVisibility : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, UnknownData_FVT8, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, LastUpdatePosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVisibility, 0x0030);
		}

		// class UInterpTrackLinearColorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackLinearColorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, LinearColorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, UnknownData_63XS, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorBase, 0x0090);
		}

		// class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
		TEST_METHOD(Class__Engine__InterpTrackLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorProp, 0x0098);
		}

		// class UInterpTrackMove : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, PosTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, EulerTrack, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookupTrack, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookAtGroupName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LinCurveTension, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, AngCurveTension, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_FNBD, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, RotMode, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_G0DF, 0x00C5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMove, 0x00C8);
		}

		// class UInterpTrackMoveAxis : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackMoveAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, MoveAxis, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, UnknownData_GFAU, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, LookupTrack, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMoveAxis, 0x00A8);
		}

		// class UInterpTrackParticleReplay : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackParticleReplay, TrackKeys, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackParticleReplay, 0x0080);
		}

		// class UInterpTrackSlomo : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackSlomo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSlomo, 0x0090);
		}

		// class UInterpTrackSound : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, Sounds, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, UnknownData_RH6H, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSound, 0x00A8);
		}

		// class UInterpTrackToggle : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, ToggleTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, UnknownData_UTCK, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackToggle, 0x0088);
		}

		// class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorMaterialParam, 0x00A8);
		}

		// class UInterpTrackVectorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorProp, 0x0098);
		}

		// class UInterpTrackVisibility : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, VisibilityTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, UnknownData_ZA4F, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVisibility, 0x0088);
		}

		// class UIntSerialization : public UObject
		TEST_METHOD(Class__Engine__IntSerialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt16Variable, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_LGR0, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt32Variable, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt64Variable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt8Variable, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_3W12, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt16Variable, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_UP2G, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt64Variable, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt8Variable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_0SMI, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt32Variable, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntSerialization, 0x0050);
		}

		// class AKillZVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__KillZVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKillZVolume, 0x03B0);
		}

		// class UKismetArrayLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetArrayLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetArrayLibrary, 0x0028);
		}

		// class UKismetGuidLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetGuidLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetGuidLibrary, 0x0028);
		}

		// class UKismetInputLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInputLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInputLibrary, 0x0028);
		}

		// class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInternationalizationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInternationalizationLibrary, 0x0028);
		}

		// class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMaterialLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMaterialLibrary, 0x0028);
		}

		// class UKismetMathLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMathLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMathLibrary, 0x0028);
		}

		// class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetNodeHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetNodeHelperLibrary, 0x0028);
		}

		// class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetRenderingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetRenderingLibrary, 0x0028);
		}

		// class UKismetStringLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringLibrary, 0x0028);
		}

		// class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringTableLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringTableLibrary, 0x0028);
		}

		// class UKismetSystemLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetSystemLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetSystemLibrary, 0x0028);
		}

		// class UKismetTextLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetTextLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetTextLibrary, 0x0028);
		}

		// class ULayer : public UObject
		TEST_METHOD(Class__Engine__Layer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, UnknownData_9MVO, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, ActorStats, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULayer, 0x0048);
		}

		// class ULevel : public UObject
		TEST_METHOD(Class__Engine__Level)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_EVHE, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, OwningWorld, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, Model, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ModelComponents, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ActorCluster, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingUnbuiltComponents, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingDirtyResources, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelScriptActor, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListStart, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListEnd, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavDataChunks, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightmapTotalSize, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ShadowmapTotalSize, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StaticNavigableGeometry, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StreamingTextureGuids, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_MU4W, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, bIsLightingScenario, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_QHGX, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelBuildDataId, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_X614, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, MapBuildData, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightBuildLevelOffset, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_JHQV, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, WorldSettings, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_CMLG, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, AssetUserData, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_2CI3, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevel, 0x0330);
		}

		// class ULevelActorContainer : public UObject
		TEST_METHOD(Class__Engine__LevelActorContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelActorContainer, Actors, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelActorContainer, 0x0038);
		}

		// class ALevelBounds : public AActor
		TEST_METHOD(Class__Engine__LevelBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, bAutoUpdateBounds, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, UnknownData_DLW3, 0x0369);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelBounds, 0x0370);
		}

		// class ALevelScriptActor : public AActor
		TEST_METHOD(Class__Engine__LevelScriptActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelScriptActor, UnknownData_ARVR, 0x0369);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelScriptActor, 0x0370);
		}

		// class ULevelScriptBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__LevelScriptBlueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelScriptBlueprint, UnknownData_ZIBC, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelScriptBlueprint, 0x01A0);
		}

		// class UWorld : public UObject
		TEST_METHOD(Class__Engine__World)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_0Z2G, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LineBatcher, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLineBatcher, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ForegroundLineBatcher, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetworkManager, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PhysicsCollisionHandler, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ExtraReferencedObjects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PerModuleDataObjects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevels, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsPrefix, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingVisibility, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingInvisibility, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DemoNetDriver, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, MyParticleEventManager, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DefaultPhysicsVolume, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_DG6M, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NavigationSystem, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AuthorityGameMode, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, GameState, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AISystem, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AvoidanceManager, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, Levels, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LevelCollections, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_FGDG, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevel, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, OwningGameInstance, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ParameterCollectionInstances, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForRenderingToTarget, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForDrawMaterialToRenderTarget, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_1OF7, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, WorldComposition, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_EVCA, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_IY4O, 0x0993);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorld, 0x09A0);
		}

		// class ULevelStreaming : public UObject
		TEST_METHOD(Class__Engine__LevelStreaming)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PackageName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, WorldAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PackageNameToLoad, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LODPackageNames, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_8MUM, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelTransform, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_GEQT, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelLODIndex, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_P9AW, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, DrawColor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, EditorStreamingVolumes, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, MinTimeBetweenVolumeUnloadRequests, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_8BCY, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, Keywords, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelLoaded, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelUnloaded, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelShown, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelHidden, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LoadedLevel, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PendingUnloadLevel, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_GZYP, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreaming, 0x0160);
		}

		// class ULevelStreamingAlwaysLoaded : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingAlwaysLoaded)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingAlwaysLoaded, 0x0160);
		}

		// class ULevelStreamingKismet : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingKismet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingKismet, 0x0160);
		}

		// class ULevelStreamingPersistent : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingPersistent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingPersistent, 0x0160);
		}

		// class ALevelStreamingVolume : public AVolume
		TEST_METHOD(Class__Engine__LevelStreamingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingLevelNames, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_PVIC, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingUsage, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_5OH0, 0x03B5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelStreamingVolume, 0x03B8);
		}

		// class ULightmappedSurfaceCollection : public UObject
		TEST_METHOD(Class__Engine__LightmappedSurfaceCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, SourceModel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, Surfaces, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmappedSurfaceCollection, 0x0040);
		}

		// class UTexture2D : public UTexture
		TEST_METHOD(Class__Engine__Texture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, StreamingIndex, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, LevelIndex, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, FirstResourceMemMip, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, ImportedSize, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_MBAW, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, ForceMipLevelsToBeResidentTimestamp, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, bTemporarilyDisableStreaming, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, bIsStreamable, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_8VR3, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_DHUJ, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressX, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressY, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_XHP7, 0x00F2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2D, 0x0110);
		}

		// class ULightMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__LightMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapTexture2D, UnknownData_K5FT, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapTexture2D, 0x0118);
		}

		// class ALightmassCharacterIndirectDetailVolume : public AVolume
		TEST_METHOD(Class__Engine__LightmassCharacterIndirectDetailVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassCharacterIndirectDetailVolume, 0x03A0);
		}

		// class ALightmassImportanceVolume : public AVolume
		TEST_METHOD(Class__Engine__LightmassImportanceVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassImportanceVolume, 0x03A0);
		}

		// class ALightmassPortal : public AActor
		TEST_METHOD(Class__Engine__LightmassPortal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightmassPortal, PortalComponent, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassPortal, 0x0370);
		}

		// class ULightmassPortalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__LightmassPortalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPortalComponent, PreviewBox, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPortalComponent, UnknownData_JOWV, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPortalComponent, 0x02A0);
		}

		// class ULightmassPrimitiveSettingsObject : public UObject
		TEST_METHOD(Class__Engine__LightmassPrimitiveSettingsObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPrimitiveSettingsObject, LightmassSettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPrimitiveSettingsObject, 0x0040);
		}

		// class ULineBatchComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__LineBatchComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineBatchComponent, UnknownData_6OYB, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULineBatchComponent, 0x06D0);
		}

		// class ULocalPlayer : public UPlayer
		TEST_METHOD(Class__Engine__LocalPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_D1I5, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ViewportClient, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_52J7, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, AspectRatioAxisConstraint, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_BQ0V, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, PendingLevelPlayerControllerClass, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_I4LI, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ControllerId, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_A8OX, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayer, 0x01C8);
		}

		// class ALODActor : public AActor
		TEST_METHOD(Class__Engine__LODActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, StaticMeshComponent, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, SubActors, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODDrawDistance, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODLevel, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, SubObjects, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, UnknownData_8JQ0, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALODActor, 0x03A0);
		}

		// class UMapBuildDataRegistry : public UObject
		TEST_METHOD(Class__Engine__MapBuildDataRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, LevelLightingQuality, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, UnknownData_OU78, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapBuildDataRegistry, 0x0178);
		}

		// class UMaterial : public UMaterialInterface
		TEST_METHOD(Class__Engine__Material)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysMaterial, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, DiffuseColor, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, SpecularColor, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BaseColor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Metallic, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Specular, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Roughness, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Normal, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, EmissiveColor, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Opacity, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, OpacityMask, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDomain, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendMode, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, DecalBlendMode, 0x0302);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDecalResponse, 0x0303);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModel, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_W1OJ, 0x0305);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, OpacityMaskClipValue, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_A2CS, 0x030D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, WorldPositionOffset, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, WorldDisplacement, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TessellationMultiplier, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, SubsurfaceColor, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ClearCoat, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ClearCoatRoughness, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, AmbientOcclusion, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Refraction, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, CustomizedUVs, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialAttributes, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PixelDepthOffset, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_UCQC, 0x07E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, NumCustomizedUVs, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyLightingMode, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_SW70, 0x07E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyDirectionalLightingIntensity, 0x07EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_J35U, 0x07F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowDensityScale, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowDensityScale, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondDensityScale, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondOpacity, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentBackscatteringExponent, 0x0804);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentMultipleScatteringExtinction, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowStartOffset, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, D3D11TessellationMode, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_PDW1, 0x0821);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_NLTV, 0x0825);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaxDisplacement, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_9YHR, 0x082D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, EditorX, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, EditorY, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, EditorPitch, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, EditorYaw, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Expressions, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialFunctionInfos, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialParameterCollectionInfos, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_SGMF, 0x0871);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UsageFlagWarnings, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendableLocation, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_E9CL, 0x0879);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendablePriority, 0x087C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendableOutputAlpha, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionMode, 0x0881);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_H46I, 0x0882);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionDepthBias, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StateId, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_FOGK, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ExpressionTextureReferences, 0x0978);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterial, 0x0988);
		}

		// class UMaterialBillboardComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__MaterialBillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialBillboardComponent, Elements, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialBillboardComponent, 0x06A0);
		}

		// class UMaterialExpressionAbs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAbs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, Input, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAbs, 0x0098);
		}

		// class UMaterialExpressionActorPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionActorPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionActorPositionWS, 0x0060);
		}

		// class UMaterialExpressionAdd : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAdd)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, B, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstA, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstB, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAdd, 0x00D8);
		}

		// class UMaterialExpressionTextureBase : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, Texture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, SamplerType, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, UnknownData_0MBW, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, UnknownData_WHRS, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureBase, 0x0070);
		}

		// class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, Coordinates, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, TextureObject, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, MipValue, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, CoordinatesDX, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, CoordinatesDY, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, MipValueMode, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, SamplerSource, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_FX5Y, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, ConstCoordinate, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, ConstMipValue, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_JQT5, 0x0194);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSample, 0x0198);
		}

		// class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ParameterName, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ExpressionGUID, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, Group, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter, 0x01B8);
		}

		// class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2D, 0x01B8);
		}

		// class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionAntialiasedTextureMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Threshold, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Channel, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, UnknownData_J1VJ, 0x01BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAntialiasedTextureMask, 0x01C0);
		}

		// class UMaterialExpressionAppendVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAppendVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, B, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAppendVector, 0x00D0);
		}

		// class UMaterialExpressionArccosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, Input, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosine, 0x0098);
		}

		// class UMaterialExpressionArccosineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, Input, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosineFast, 0x0098);
		}

		// class UMaterialExpressionArcsine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, Input, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsine, 0x0098);
		}

		// class UMaterialExpressionArcsineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, Input, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsineFast, 0x0098);
		}

		// class UMaterialExpressionArctangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, Input, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent, 0x0098);
		}

		// class UMaterialExpressionArctangent2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, Y, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, X, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2, 0x00D0);
		}

		// class UMaterialExpressionArctangent2Fast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2Fast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, Y, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, X, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2Fast, 0x00D0);
		}

		// class UMaterialExpressionArctangentFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangentFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, Input, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangentFast, 0x0098);
		}

		// class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericFogColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, WorldPosition, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericFogColor, 0x0098);
		}

		// class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightColor, 0x0060);
		}

		// class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightVector, 0x0060);
		}

		// class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionBentNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, Input, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBentNormalCustomOutput, 0x0098);
		}

		// class UMaterialExpressionBlackBody : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlackBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, Temp, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlackBody, 0x0098);
		}

		// class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlendMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, B, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, Alpha, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, PixelAttributeBlendType, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, VertexAttributeBlendType, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_ENC1, 0x011A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlendMaterialAttributes, 0x0120);
		}

		// class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBreakMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, MaterialAttributes, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBreakMaterialAttributes, 0x00A0);
		}

		// class UMaterialExpressionBumpOffset : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBumpOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Coordinate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Height, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatioInput, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatio, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ReferencePlane, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ConstCoordinate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_KAOF, 0x0114);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBumpOffset, 0x0118);
		}

		// class UMaterialExpressionCameraPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraPositionWS, 0x0060);
		}

		// class UMaterialExpressionCameraVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraVectorWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraVectorWS, 0x0060);
		}

		// class UMaterialExpressionCeil : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCeil)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, Input, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCeil, 0x0098);
		}

		// class UMaterialExpressionClamp : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Input, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Min, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Max, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, ClampMode, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_44B8, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MinDefault, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MaxDefault, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_015D, 0x0114);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClamp, 0x0118);
		}

		// class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionClearCoatNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, Input, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClearCoatNormalCustomOutput, 0x0098);
		}

		// class UMaterialExpressionCollectionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCollectionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, Collection, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterId, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCollectionParameter, 0x0080);
		}

		// class UMaterialExpressionComment : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeX, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeY, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, Text, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, CommentColor, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, FontSize, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, UnknownData_55L1, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComment, 0x0090);
		}

		// class UMaterialExpressionComponentMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComponentMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, Input, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_B6SA, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComponentMask, 0x00A0);
		}

		// class UMaterialExpressionConstant : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, R, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, UnknownData_V6JI, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant, 0x0068);
		}

		// class UMaterialExpressionConstant2Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant2Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, R, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, G, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant2Vector, 0x0068);
		}

		// class UMaterialExpressionConstant3Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant3Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant3Vector, Constant, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant3Vector, 0x0070);
		}

		// class UMaterialExpressionConstant4Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant4Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant4Vector, Constant, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant4Vector, 0x0070);
		}

		// class UMaterialExpressionConstantBiasScale : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstantBiasScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Input, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Bias, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Scale, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstantBiasScale, 0x00A0);
		}

		// class UMaterialExpressionCosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Input, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Period, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, UnknownData_FKVP, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCosine, 0x00A0);
		}

		// class UMaterialExpressionCrossProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCrossProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, B, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCrossProduct, 0x00D0);
		}

		// class UMaterialExpressionCustom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Code, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, OutputType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, UnknownData_1FFM, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Description, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Inputs, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustom, 0x0098);
		}

		// class UMaterialExpressionDDX : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDX)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, Value, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDX, 0x0098);
		}

		// class UMaterialExpressionDDY : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDY)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, Value, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDY, 0x0098);
		}

		// class UMaterialExpressionDecalDerivative : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalDerivative)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalDerivative, 0x0060);
		}

		// class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalLifetimeOpacity)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalLifetimeOpacity, 0x0060);
		}

		// class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalMipmapLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, TextureSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstWidth, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstHeight, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalMipmapLevel, 0x00A0);
		}

		// class UMaterialExpressionDepthFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, InOpacity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistance, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, OpacityDefault, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistanceDefault, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthFade, 0x00D8);
		}

		// class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthOfFieldFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, FunctionValue, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_00P4, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, Depth, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthOfFieldFunction, 0x00A0);
		}

		// class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDeriveNormalZ)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, InXY, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeriveNormalZ, 0x0098);
		}

		// class UMaterialExpressionDesaturation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDesaturation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Input, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Fraction, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, LuminanceFactors, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDesaturation, 0x00E0);
		}

		// class UMaterialExpressionDistance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, B, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistance, 0x00D0);
		}

		// class UMaterialExpressionDistanceCullFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceCullFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceCullFade, 0x0060);
		}

		// class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceFieldGradient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, Position, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceFieldGradient, 0x0098);
		}

		// class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceToNearestSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, Position, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceToNearestSurface, 0x0098);
		}

		// class UMaterialExpressionDivide : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDivide)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, B, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstA, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstB, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDivide, 0x00D8);
		}

		// class UMaterialExpressionDotProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDotProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, B, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDotProduct, 0x00D0);
		}

		// class UMaterialExpressionDynamicParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParamNames, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, DefaultValue, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDynamicParameter, 0x0080);
		}

		// class UMaterialExpressionEyeAdaptation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionEyeAdaptation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionEyeAdaptation, 0x0060);
		}

		// class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFeatureLevelSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Default, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Inputs, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFeatureLevelSwitch, 0x0178);
		}

		// class UMaterialExpressionFloor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFloor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, Input, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFloor, 0x0098);
		}

		// class UMaterialExpressionFmod : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFmod)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, B, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFmod, 0x00D0);
		}

		// class UMaterialExpressionFontSample : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFontSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, Font, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, FontTexturePage, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, UnknownData_APSO, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSample, 0x0070);
		}

		// class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
		TEST_METHOD(Class__Engine__MaterialExpressionFontSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ParameterName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ExpressionGUID, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, Group, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSampleParameter, 0x0090);
		}

		// class UMaterialExpressionFrac : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFrac)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, Input, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFrac, 0x0098);
		}

		// class UMaterialExpressionFresnel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFresnel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, ExponentIn, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Exponent, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_417S, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFractionIn, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFraction, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_08RN, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Normal, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFresnel, 0x0118);
		}

		// class UMaterialExpressionFunctionInput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Preview, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Description, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, ID, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_DFJP, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, PreviewValue, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_Q3PW, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, SortPriority, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_KROL, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionInput, 0x0130);
		}

		// class UMaterialExpressionFunctionOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, OutputName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, Description, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, SortPriority, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_XWZR, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, A, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_YX4X, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, ID, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_AJ3Y, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionOutput, 0x00D8);
		}

		// class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, MaterialAttributes, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, AttributeGetTypes, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGetMaterialAttributes, 0x00B0);
		}

		// class UMaterialExpressionGIReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGIReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, Default, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, StaticIndirect, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, DynamicIndirect, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGIReplace, 0x0108);
		}

		// class UMaterialExpressionIf : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionIf)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, B, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AGreaterThanB, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AEqualsB, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ALessThanB, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, EqualsThreshold, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstB, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstAEqualsB, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_W9FH, 0x0184);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionIf, 0x0188);
		}

		// class UMaterialExpressionLightmapUVs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmapUVs)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmapUVs, 0x0060);
		}

		// class UMaterialExpressionLightmassReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmassReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Realtime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Lightmass, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmassReplace, 0x00D0);
		}

		// class UMaterialExpressionLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightVector, 0x0060);
		}

		// class UMaterialExpressionLinearInterpolate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLinearInterpolate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, B, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, Alpha, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstA, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstB, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstAlpha, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_GKKZ, 0x0114);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLinearInterpolate, 0x0118);
		}

		// class UMaterialExpressionLogarithm10 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm10)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, X, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm10, 0x0098);
		}

		// class UMaterialExpressionLogarithm2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, X, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm2, 0x0098);
		}

		// class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMakeMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, BaseColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Metallic, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Specular, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Roughness, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, EmissiveColor, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Opacity, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, OpacityMask, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Normal, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldPositionOffset, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldDisplacement, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, TessellationMultiplier, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, SubsurfaceColor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoat, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoatRoughness, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, AmbientOcclusion, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Refraction, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, CustomizedUVs, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, PixelDepthOffset, 0x05A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMakeMaterialAttributes, 0x05D8);
		}

		// class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialFunctionCall)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, MaterialFunction, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, FunctionInputs, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, FunctionOutputs, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialFunctionCall, 0x0088);
		}

		// class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialProxyReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, Realtime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, MaterialProxy, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialProxyReplace, 0x00D0);
		}

		// class UMaterialExpressionMax : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMax)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, B, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstA, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstB, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMax, 0x00D8);
		}

		// class UMaterialExpressionMin : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, B, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstA, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstB, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMin, 0x00D8);
		}

		// class UMaterialExpressionMultiply : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMultiply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, B, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstA, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstB, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMultiply, 0x00D8);
		}

		// class UMaterialExpressionNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Position, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, FilterWidth, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Scale, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Quality, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, NoiseFunction, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_RFF3, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_5U8C, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Levels, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMin, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMax, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, LevelScale, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_QUH4, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, RepeatSize, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNoise, 0x00F8);
		}

		// class UMaterialExpressionNormalize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNormalize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, VectorInput, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNormalize, 0x0098);
		}

		// class UMaterialExpressionObjectBounds : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectBounds)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectBounds, 0x0060);
		}

		// class UMaterialExpressionObjectOrientation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectOrientation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectOrientation, 0x0060);
		}

		// class UMaterialExpressionObjectPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectPositionWS, 0x0060);
		}

		// class UMaterialExpressionObjectRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectRadius, 0x0060);
		}

		// class UMaterialExpressionOneMinus : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionOneMinus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, Input, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionOneMinus, 0x0098);
		}

		// class UMaterialExpressionPanner : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPanner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Coordinate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Time, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Speed, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedX, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedY, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, ConstCoordinate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, bFractionalPart, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_YIQF, 0x0115);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPanner, 0x0118);
		}

		// class UMaterialExpressionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ParameterName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ExpressionGUID, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, Group, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParameter, 0x0080);
		}

		// class UMaterialExpressionParticleColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleColor, 0x0060);
		}

		// class UMaterialExpressionParticleDirection : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleDirection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleDirection, 0x0060);
		}

		// class UMaterialExpressionParticleMacroUV : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMacroUV)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMacroUV, 0x0060);
		}

		// class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMotionBlurFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMotionBlurFade, 0x0060);
		}

		// class UMaterialExpressionParticlePositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticlePositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticlePositionWS, 0x0060);
		}

		// class UMaterialExpressionParticleRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRadius, 0x0060);
		}

		// class UMaterialExpressionParticleRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRandom, 0x0060);
		}

		// class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRelativeTime)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRelativeTime, 0x0060);
		}

		// class UMaterialExpressionParticleSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSize, 0x0060);
		}

		// class UMaterialExpressionParticleSpeed : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSpeed)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSpeed, 0x0060);
		}

		// class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParticleSubUV, UnknownData_LA8G, 0x0199);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUV, 0x01A0);
		}

		// class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceFadeAmount)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceFadeAmount, 0x0060);
		}

		// class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceRandom, 0x0060);
		}

		// class UMaterialExpressionPixelDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelDepth)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelDepth, 0x0060);
		}

		// class UMaterialExpressionPixelNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelNormalWS, 0x0060);
		}

		// class UMaterialExpressionPower : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPower)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, base, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Exponent, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, ConstExponent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_V7EF, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPower, 0x00D8);
		}

		// class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPrecomputedAOMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPrecomputedAOMask, 0x0060);
		}

		// class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedNormal, 0x0060);
		}

		// class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedPosition, 0x0060);
		}

		// class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreviousFrameSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, CurrentFrame, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, PreviousFrame, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreviousFrameSwitch, 0x00D0);
		}

		// class UMaterialExpressionQualitySwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionQualitySwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Default, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Inputs, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionQualitySwitch, 0x0140);
		}

		// class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReflectionVectorWS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, CustomWorldNormal, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_G5HQ, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReflectionVectorWS, 0x00A0);
		}

		// class UMaterialExpressionReroute : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReroute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, Input, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReroute, 0x0098);
		}

		// class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotateAboutAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, NormalizedRotationAxis, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, RotationAngle, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, PivotPoint, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Position, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Period, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_H5IV, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotateAboutAxis, 0x0148);
		}

		// class UMaterialExpressionRotator : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Coordinate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Time, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterX, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterY, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Speed, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, ConstCoordinate, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotator, 0x00E0);
		}

		// class UMaterialExpressionRound : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, Input, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRound, 0x0098);
		}

		// class UMaterialExpressionSaturate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSaturate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, Input, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSaturate, 0x0098);
		}

		// class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, DefaultValue, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, SliderMin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, SliderMax, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, UnknownData_DQN8, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScalarParameter, 0x0090);
		}

		// class UMaterialExpressionSceneColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, InputMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_YVIK, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, Input, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, OffsetFraction, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, ConstInput, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneColor, 0x00E0);
		}

		// class UMaterialExpressionSceneDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneDepth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, InputMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_O7O1, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Input, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Coordinates, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, ConstInput, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneDepth, 0x00E0);
		}

		// class UMaterialExpressionSceneTexelSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexelSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexelSize, 0x0060);
		}

		// class UMaterialExpressionSceneTexture : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, Coordinates, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, SceneTextureId, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, bClampUVs, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, bFiltered, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_QBXQ, 0x009B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexture, 0x00A0);
		}

		// class UMaterialExpressionScreenPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionScreenPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScreenPosition, Mapping, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScreenPosition, UnknownData_Z40I, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScreenPosition, 0x0068);
		}

		// class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, Inputs, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, AttributeSetTypes, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSetMaterialAttributes, 0x0080);
		}

		// class UMaterialExpressionSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSign)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, Input, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSign, 0x0098);
		}

		// class UMaterialExpressionSine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Input, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Period, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, UnknownData_OZFB, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSine, 0x00A0);
		}

		// class UMaterialExpressionSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Cell, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Index, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Seed, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstIndex, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstSeed, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_26VM, 0x0114);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSobol, 0x0118);
		}

		// class UMaterialExpressionSpeedTree : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSpeedTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindType, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODType, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_74OU, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, BillboardThreshold, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, bAccurateWindVelocities, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_90KR, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpeedTree, 0x0070);
		}

		// class UMaterialExpressionSphereMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphereMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, B, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Radius, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Hardness, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, AttenuationRadius, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, HardnessPercent, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphereMask, 0x0148);
		}

		// class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphericalParticleOpacity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, Density, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, ConstantDensity, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, UnknownData_TVHW, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphericalParticleOpacity, 0x00A0);
		}

		// class UMaterialExpressionSquareRoot : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSquareRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, Input, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSquareRoot, 0x0098);
		}

		// class UMaterialExpressionStaticBool : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBool, UnknownData_KQ3V, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBool, 0x0068);
		}

		// class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBoolParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBoolParameter, UnknownData_LO97, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBoolParameter, 0x0088);
		}

		// class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, Input, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, UnknownData_7WTO, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticComponentMaskParameter, 0x00C0);
		}

		// class UMaterialExpressionStaticSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_5SJ1, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, A, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, B, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, Value, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitch, 0x0110);
		}

		// class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitchParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, A, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, B, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitchParameter, 0x00F8);
		}

		// class UMaterialExpressionSubtract : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSubtract)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, B, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstA, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstB, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSubtract, 0x00D8);
		}

		// class UMaterialExpressionTangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Input, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Period, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, UnknownData_NHD0, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangent, 0x00A0);
		}

		// class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionTangentOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, Input, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangentOutput, 0x0098);
		}

		// class UMaterialExpressionTemporalSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTemporalSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Index, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Seed, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstIndex, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstSeed, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_PGJ0, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTemporalSobol, 0x00E0);
		}

		// class UMaterialExpressionTextureCoordinate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureCoordinate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, CoordinateIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UTiling, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, VTiling, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UnknownData_E7RH, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureCoordinate, 0x0070);
		}

		// class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObject, 0x0070);
		}

		// class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObjectParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObjectParameter, 0x01B8);
		}

		// class UMaterialExpressionTextureProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, TextureObject, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, Property, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_6T0N, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureProperty, 0x00A0);
		}

		// class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterCube)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterCube, 0x01B8);
		}

		// class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameterSubUV, UnknownData_7YOL, 0x01B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterSubUV, 0x01C0);
		}

		// class UMaterialExpressionTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, UnknownData_LAYQ, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, Period, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTime, 0x0068);
		}

		// class UMaterialExpressionTransform : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, Input, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformSourceType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformType, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_RTEL, 0x009A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransform, 0x00A0);
		}

		// class UMaterialExpressionTransformPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransformPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, Input, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformSourceType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformType, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_SQHE, 0x009A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransformPosition, 0x00A0);
		}

		// class UMaterialExpressionTruncate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTruncate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, Input, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTruncate, 0x0098);
		}

		// class UMaterialExpressionTwoSidedSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTwoSidedSign)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTwoSidedSign, 0x0060);
		}

		// class UMaterialExpressionVectorNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVectorNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Position, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, NoiseFunction, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_O8GE, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Quality, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_FI29, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, TileSize, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorNoise, 0x00A8);
		}

		// class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, DefaultValue, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorParameter, 0x0090);
		}

		// class UMaterialExpressionVertexColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexColor, 0x0060);
		}

		// class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionVertexInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, Input, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, UnknownData_ELES, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexInterpolator, 0x00A8);
		}

		// class UMaterialExpressionVertexNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexNormalWS, 0x0060);
		}

		// class UMaterialExpressionViewProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, Property, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, UnknownData_NK44, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewProperty, 0x0068);
		}

		// class UMaterialExpressionViewSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewSize, 0x0060);
		}

		// class UMaterialExpressionWorldPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionWorldPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, WorldPositionShaderOffset, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, UnknownData_R020, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionWorldPosition, 0x0068);
		}

		// class UMaterialFunction : public UObject
		TEST_METHOD(Class__Engine__MaterialFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, Description, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, UnknownData_00TP, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, FunctionExpressions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, UnknownData_R3JV, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunction, 0x0068);
		}

		// class AMaterialInstanceActor : public AActor
		TEST_METHOD(Class__Engine__MaterialInstanceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMaterialInstanceActor, TargetActors, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMaterialInstanceActor, 0x0378);
		}

		// class UMaterialInstanceDynamic : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceDynamic, UnknownData_3GZ3, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceDynamic, 0x0200);
		}

		// class UMaterialParameterCollection : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, ScalarParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, VectorParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, UnknownData_FAU7, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollection, 0x0068);
		}

		// class UMaterialParameterCollectionInstance : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollectionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_NVHZ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, Collection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, World, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_6OH9, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollectionInstance, 0x00E8);
		}

		// class AMatineeActor : public AActor
		TEST_METHOD(Class__Engine__MatineeActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeData, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeControllerName, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PlayRate, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_ZK41, 0x037D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ForceStartPosition, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_YRNX, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PreferredSplitScreenNum, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_P1XM, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupActorInfos, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_9HG8, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupInst, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, CameraCuts, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_VKNN, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, InterpPosition, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_06Q6, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ReplicationForceIsPlaying, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_SD4L, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPlay, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnStop, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPause, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_TTTL, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActor, 0x0410);
		}

		// class AMatineeActorCameraAnim : public AMatineeActor
		TEST_METHOD(Class__Engine__MatineeActorCameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActorCameraAnim, CameraAnim, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActorCameraAnim, 0x0418);
		}

		// class UMatineeAnimInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeAnimInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeAnimInterface, 0x0028);
		}

		// class UMatineeInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeInterface, 0x0028);
		}

		// class AMeshMergeCullingVolume : public AVolume
		TEST_METHOD(Class__Engine__MeshMergeCullingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMeshMergeCullingVolume, 0x03A0);
		}

		// class ABOT_SPAWN_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BOT_SPAWN__BOT_SPAWN_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_SPAWN_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_SPAWN_C, Arrow, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_SPAWN_C, Billboard, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_SPAWN_C, CreatureClass, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_SPAWN_C, isNightOnly_, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_SPAWN_C, UnknownData_XY12, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_SPAWN_C, SpawnedCreature, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_SPAWN_C, GameState, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_SPAWN_C, isDisablePatrool, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABOT_SPAWN_C, 0x03A1);
		}

		// class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__MeshVertexPainterKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexPainterKismetLibrary, 0x0028);
		}

		// class UZ_InventoryManager_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__Z_InventoryManager__Z_InventoryManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, UberGraphFrame, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, PlayerInventory, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, UpdateGUITimer, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, LootSeekTimer, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, InventoryIsShow, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, UseContainer_ClintOnly_, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, BlockDrop, 0x0112);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, UseAutomaticGUI_Update, 0x0113);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, UnknownData_VQ1F, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, FloorLootActor, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, ExternalActor, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, Container, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, ContainerInventory, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, ContainerInventory_ClientOnly_, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, FloorComponent, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, ProxyRemovebleLootCount, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, UnknownData_20SP, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, ExternalInventory, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, LocalTemp, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, SplitCount_ServerOnly_, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, DeltaHealth, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, UnknownData_ZYX9, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, HealthTimer, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, HealthCharacter, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, EndHealth, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, IsDoubleClick, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, IsTradeMode, 0x0185);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, UnknownData_4UM9, 0x0186);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, PrymaryIndex, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, SecondaryIndex, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, MeleeIndex, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, GrenadeIndex, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, BackPackDefaultMass, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, UnknownData_2OU1, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, CraftingMainLoot, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, CraftingOtherLoot, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, DebugTimer, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, DBActor, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, Parametr_ContainerOnlyMode, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, Parametr_BlockUse, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, Parametr_DragNDropOnly, 0x01D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, Parametr_CreateBarigaActor, 0x01D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, UnknownData_Y3NP, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, BarigaActor, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, onContainerPosition, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, UnknownData_CKI0, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, ContainerGoOutTimer, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, Parametr_ContainerOutDistance, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, Parametr_BlockAutoMousePosition, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, UnknownData_5GC0, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, Parametr_BarigaDiscountPercent, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, TradeToAll_Server_, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, IsSeekLoot, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryManager_C, IsClassicalmode_ClientOnly_, 0x0206);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZ_InventoryManager_C, 0x0207);
		}

		// class UMicroTransactionBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__MicroTransactionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, AvailableProducts, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastError, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastErrorSolution, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMicroTransactionBase, 0x0068);
		}

		// class UModelComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ModelComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_0C6T, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, ModelBodySetup, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_M8FX, 0x06B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModelComponent, 0x06D0);
		}

		// class UMorphTarget : public UObject
		TEST_METHOD(Class__Engine__MorphTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, BaseSkelMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, UnknownData_W6SW, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMorphTarget, 0x0040);
		}

		// class UNavAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__NavAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAgentInterface, 0x0028);
		}

		// class UNavArea : public UObject
		TEST_METHOD(Class__Engine__NavArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DefaultCost, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, FixedAreaEnteringCost, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DrawColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, SupportedAgents, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, UnknownData_IJOV, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea, 0x0040);
		}

		// class UNavArea_Default : public UNavArea
		TEST_METHOD(Class__Engine__NavArea_Default)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Default, 0x0040);
		}

		// class UNavArea_LowHeight : public UNavArea
		TEST_METHOD(Class__Engine__NavArea_LowHeight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_LowHeight, 0x0040);
		}

		// class UNavArea_Null : public UNavArea
		TEST_METHOD(Class__Engine__NavArea_Null)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Null, 0x0040);
		}

		// class UNavArea_Obstacle : public UNavArea
		TEST_METHOD(Class__Engine__NavArea_Obstacle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Obstacle, 0x0040);
		}

		// class UNavAreaMeta : public UNavArea
		TEST_METHOD(Class__Engine__NavAreaMeta)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta, 0x0040);
		}

		// class UNavAreaMeta_SwitchByAgent : public UNavAreaMeta
		TEST_METHOD(Class__Engine__NavAreaMeta_SwitchByAgent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent0Area, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent1Area, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent2Area, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent3Area, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent4Area, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent5Area, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent6Area, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent7Area, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent8Area, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent9Area, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent10Area, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent11Area, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent12Area, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent13Area, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent14Area, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent15Area, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta_SwitchByAgent, 0x00C0);
		}

		// class UNavCollision : public UObject
		TEST_METHOD(Class__Engine__NavCollision)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_3YQ2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, CylinderCollision, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, BoxCollision, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, AreaClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_37IU, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollision, 0x0110);
		}

		// class UNavEdgeProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NavEdgeProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavEdgeProviderInterface, 0x0028);
		}

		// class UNavigationDataChunk : public UObject
		TEST_METHOD(Class__Engine__NavigationDataChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationDataChunk, NavigationDataName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataChunk, 0x0030);
		}

		// class ANavigationGraph : public ANavigationData
		TEST_METHOD(Class__Engine__NavigationGraph)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraph, 0x0510);
		}

		// class ANavigationGraphNode : public AActor
		TEST_METHOD(Class__Engine__NavigationGraphNode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraphNode, 0x0368);
		}

		// class UNavigationGraphNodeComponent : public USceneComponent
		TEST_METHOD(Class__Engine__NavigationGraphNodeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, Node, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, NextNodeComponent, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, PrevNodeComponent, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, UnknownData_XCE6, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationGraphNodeComponent, 0x02C0);
		}

		// class UNavigationInvokerComponent : public UActorComponent
		TEST_METHOD(Class__Engine__NavigationInvokerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileGenerationRadius, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileRemovalRadius, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationInvokerComponent, 0x00F8);
		}

		// class ANavigationObjectBase : public AActor
		TEST_METHOD(Class__Engine__NavigationObjectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_HLV6, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, CapsuleComponent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, GoodSprite, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, BadSprite, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_LXVX, 0x0389);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationObjectBase, 0x0390);
		}

		// class UNavigationPath : public UObject
		TEST_METHOD(Class__Engine__NavigationPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathUpdatedNotifier, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathPoints, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, RecalculateOnInvalidation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, UnknownData_O48W, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPath, 0x00C0);
		}

		// class UNavigationPathGenerator : public UInterface
		TEST_METHOD(Class__Engine__NavigationPathGenerator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPathGenerator, 0x0028);
		}

		// class UNavigationSystem : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__NavigationSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, MainNavData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, AbstractNavData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, CrowdManagerClass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, UnknownData_7WO8, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, DataGatheringMode, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, UnknownData_9WHS, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, UnknownData_841J, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, ActiveTilesUpdateInterval, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, SupportedAgents, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, DirtyAreasUpdateFreq, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, UnknownData_3TKH, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, NavDataSet, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, NavDataRegistrationQueue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, UnknownData_8H7U, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, OnNavDataRegisteredEvent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, OnNavigationGenerationFinishedDelegate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, UnknownData_ZHB2, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, OperationMode, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystem, UnknownData_QLMT, 0x0235);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystem, 0x0470);
		}

		// class Atrash_box_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__trash_box__trash_box_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Atrash_box_C, 0x0378);
		}

		// class ANavigationTestingActor : public AActor
		TEST_METHOD(Class__Engine__NavigationTestingActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_ROE9, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CapsuleComponent, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, InvokerComponent, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_Z0OD, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, NavAgentProps, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, QueryingExtent, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_MRV8, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, MyNavData, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ProjectedLocation, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_SGWQ, 0x03D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CostDisplayMode, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_35O0, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, TextCanvasOffset, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_VWSY, 0x03E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingTime, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathCost, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingSteps, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_JX1P, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OtherActor, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, FilterClass, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ShowStepIndex, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OffsetFromCornersDistance, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_HN2O, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationTestingActor, 0x0470);
		}

		// class UNavigationTypes : public UObject
		TEST_METHOD(Class__Engine__NavigationTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationTypes, 0x0028);
		}

		// class UNavLinkComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__NavLinkComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, UnknownData_PKRH, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, Links, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, UnknownData_24HH, 0x06A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkComponent, 0x06B0);
		}

		// class UNavRelevantComponent : public UActorComponent
		TEST_METHOD(Class__Engine__NavRelevantComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_VC7L, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_SVBU, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, CachedNavParent, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantComponent, 0x0120);
		}

		// class UNavLinkCustomComponent : public UNavRelevantComponent
		TEST_METHOD(Class__Engine__NavLinkCustomComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_9OOD, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, NavLinkUserId, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_H03Z, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, EnabledAreaClass, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, DisabledAreaClass, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeStart, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeEnd, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkDirection, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_0F0R, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_MOLI, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleOffset, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleExtent, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleAreaClass, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastRadius, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastInterval, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastChannel, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_ZPX8, 0x0189);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomComponent, 0x0230);
		}

		// class UNavLinkCustomInterface : public UInterface
		TEST_METHOD(Class__Engine__NavLinkCustomInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomInterface, 0x0028);
		}

		// class UNavLinkDefinition : public UObject
		TEST_METHOD(Class__Engine__NavLinkDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, Links, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, SegmentLinks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, UnknownData_XGES, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkDefinition, 0x0050);
		}

		// class UNavLinkHostInterface : public UInterface
		TEST_METHOD(Class__Engine__NavLinkHostInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkHostInterface, 0x0028);
		}

		// class ANavLinkProxy : public AActor
		TEST_METHOD(Class__Engine__NavLinkProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_YHFY, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, PointLinks, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SegmentLinks, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SmartLinkComp, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, bSmartLinkIsRelevant, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_WGTB, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, OnSmartLinkReached, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavLinkProxy, 0x03B8);
		}

		// class UNavLinkRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__NavLinkRenderingComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkRenderingComponent, 0x0690);
		}

		// class UNavLinkTrivial : public UNavLinkDefinition
		TEST_METHOD(Class__Engine__NavLinkTrivial)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkTrivial, 0x0050);
		}

		// class ANavMeshBoundsVolume : public AVolume
		TEST_METHOD(Class__Engine__NavMeshBoundsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, SupportedAgents, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, UnknownData_3FOA, 0x03A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavMeshBoundsVolume, 0x03A8);
		}

		// class UNavMeshRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__NavMeshRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMeshRenderingComponent, UnknownData_6N9C, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMeshRenderingComponent, 0x06A0);
		}

		// class UNavModifierComponent : public UNavRelevantComponent
		TEST_METHOD(Class__Engine__NavModifierComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, AreaClass, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, FailsafeExtent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, UnknownData_BSRP, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavModifierComponent, 0x0148);
		}

		// class ANavModifierVolume : public AVolume
		TEST_METHOD(Class__Engine__NavModifierVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, UnknownData_MP8E, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, AreaClass, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavModifierVolume, 0x03B0);
		}

		// class UNavNodeInterface : public UInterface
		TEST_METHOD(Class__Engine__NavNodeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavNodeInterface, 0x0028);
		}

		// class UNavPathObserverInterface : public UInterface
		TEST_METHOD(Class__Engine__NavPathObserverInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavPathObserverInterface, 0x0028);
		}

		// class UNavRelevantInterface : public UInterface
		TEST_METHOD(Class__Engine__NavRelevantInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantInterface, 0x0028);
		}

		// class UNavTestRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__NavTestRenderingComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavTestRenderingComponent, 0x0690);
		}

		// class UNetworkPredictionInterface : public UInterface
		TEST_METHOD(Class__Engine__NetworkPredictionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkPredictionInterface, 0x0028);
		}

		// class UNetworkSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__NetworkSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_J35Q, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArraySize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArrayMemory, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_TV93, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkSettings, 0x0048);
		}

		// class UNodeMappingContainer : public UObject
		TEST_METHOD(Class__Engine__NodeMappingContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, NodeMapping, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceAsset, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingContainer, 0x00A0);
		}

		// class UNodeMappingProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NodeMappingProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingProviderInterface, 0x0028);
		}

		// class ANote : public AActor
		TEST_METHOD(Class__Engine__Note)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANote, 0x0368);
		}

		// class UObjectLibrary : public UObject
		TEST_METHOD(Class__Engine__ObjectLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, ObjectBaseClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bHasBlueprintClasses, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_J5OA, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, WeakObjects, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bUseWeakReferences, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bIsFullyLoaded, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_UFCT, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectLibrary, 0x0160);
		}

		// class UObjectReferencer : public UObject
		TEST_METHOD(Class__Engine__ObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectReferencer, ReferencedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectReferencer, 0x0038);
		}

		// class UOnlineBlueprintCallProxyBase : public UObject
		TEST_METHOD(Class__Engine__OnlineBlueprintCallProxyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineBlueprintCallProxyBase, 0x0028);
		}

		// class Ajb_zabor03_C : public AFence_BaseNet_C
		TEST_METHOD(BlueprintGeneratedClass__jb_zabor03__jb_zabor03_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ajb_zabor03_C, 0x0395);
		}

		// class UOnlineEngineInterface : public UObject
		TEST_METHOD(Class__Engine__OnlineEngineInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterface, 0x0028);
		}

		// class UOnlineSession : public UObject
		TEST_METHOD(Class__Engine__OnlineSession)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSession, 0x0028);
		}

		// class UPackageMapClient : public UPackageMap
		TEST_METHOD(Class__Engine__PackageMapClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMapClient, UnknownData_WZYG, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMapClient, 0x0370);
		}

		// class APainCausingVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__PainCausingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_9KLL, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamagePerSec, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageType, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, PainInterval, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_PU7E, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageInstigator, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_ZYGI, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APainCausingVolume, 0x03D8);
		}

		// class UParticleEmitter : public UObject
		TEST_METHOD(Class__Engine__ParticleEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SubUVDataOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterRenderMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_IBO3, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, LODLevels, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_LCRH, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, PeakActiveParticles, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, InitialAllocationCount, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, MediumDetailSpawnRateScale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, QualityLevelSpawnRateScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, DetailMode, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_GV1B, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_99S5, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SignificanceLevel, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_P83W, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleEmitter, 0x0170);
		}

		// class AParticleEventManager : public AActor
		TEST_METHOD(Class__Engine__ParticleEventManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AParticleEventManager, 0x0368);
		}

		// class UParticleLODLevel : public UObject
		TEST_METHOD(Class__Engine__ParticleLODLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Level, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_X4DU, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, RequiredModule, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Modules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, TypeDataModule, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModule, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventGenerator, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawningModules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModules, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UpdateModules, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, OrbitModules, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventReceiverModules, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_ZF1S, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, PeakActiveParticles, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleLODLevel, 0x00B8);
		}

		// class UParticleModule : public UObject
		TEST_METHOD(Class__Engine__ParticleModule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, UnknownData_1JIT, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, LODValidity, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, UnknownData_HQAN, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModule, 0x0030);
		}

		// class UParticleModuleAccelerationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationBase, UnknownData_TKLQ, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationBase, 0x0038);
		}

		// class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAcceleration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, UnknownData_CCY1, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAcceleration, 0x0090);
		}

		// class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, UnknownData_5TRQ, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationConstant, 0x0048);
		}

		// class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDrag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficient, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficientRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDrag, 0x0078);
		}

		// class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDragScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScaleRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDragScaleOverLife, 0x0078);
		}

		// class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationOverLifetime, AccelOverLife, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationOverLifetime, 0x0088);
		}

		// class UParticleModuleAttractorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAttractorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorBase, 0x0030);
		}

		// class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint0, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Range, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Strength, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorLine, 0x00B8);
		}

		// class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorParticle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Range, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_7OL0, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Strength, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_BSTL, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, SelectionMethod, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_SGL3, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_H9EG, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, LastSelIndex, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorParticle, 0x00C0);
		}

		// class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Range, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Strength, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, UnknownData_ZJOK, 0x00F2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPoint, 0x00F8);
		}

		// class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPointGravity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Radius, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Strength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, StrengthRaw, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPointGravity, 0x0080);
		}

		// class UParticleModuleBeamBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleBeamBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamBase, 0x0030);
		}

		// class UParticleModuleBeamModifier : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, ModifierType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_10PH, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, PositionOptions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Position, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, TangentOptions, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_IU7V, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Tangent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_FMZF, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, StrengthOptions, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Strength, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamModifier, 0x0120);
		}

		// class UParticleModuleBeamNoise : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_YLVM, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency_LowRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_7RSZ, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRange, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRangeScale, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_7Z5M, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseSpeed, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_8SIC, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockRadius, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_7SBV, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockTime, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTension, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_EGYG, 0x0135);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTangentStrength, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTessellation, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_9ERQ, 0x0175);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, FrequencyDistance, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_V7FF, 0x017D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseScale, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamNoise, 0x01B8);
		}

		// class UParticleModuleBeamSource : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_RGE6, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_O2IH, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, Source, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_1ZNC, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangentMethod, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_5CIZ, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangent, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_M4YX, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceStrength, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_LDAS, 0x0131);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamSource, 0x0138);
		}

		// class UParticleModuleBeamTarget : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_WON3, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, Target, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_9BDA, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangentMethod, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_T052, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangent, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_OLXF, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetStrength, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_K34P, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, LockRadius, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_3WL6, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamTarget, 0x0138);
		}

		// class UTutorialMessage_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TutorialMessage__TutorialMessage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialMessage_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialMessage_C, Show, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialMessage_C, Fon, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialMessage_C, Image_2, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialMessage_C, MainText, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialMessage_C, Text, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialMessage_C, 0x0240);
		}

		// class UParticleModuleCameraBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCameraBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraBase, 0x0030);
		}

		// class UParticleModuleCameraOffset : public UParticleModuleCameraBase
		TEST_METHOD(Class__Engine__ParticleModuleCameraOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, CameraOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_52D0, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UpdateMethod, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_JS4N, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraOffset, 0x0070);
		}

		// class UParticleModuleCollisionBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCollisionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionBase, 0x0030);
		}

		// class UParticleModuleCollision : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollision)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactorRotation, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisions, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionCompletionOption, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_GVJ9, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionTypes, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_OOHZ, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_VNTE, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, ParticleMass, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DirScalar, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_GQLA, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, VerticalFudgeFactor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_HSNR, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DelayAmount, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_JUYA, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisionDistance, 0x01B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollision, 0x01B8);
		}

		// class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollisionGPU)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Resilience, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, ResilienceScaleOverLife, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Friction, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomSpread, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomDistribution, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusScale, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusBias, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Response, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, CollisionMode, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, UnknownData_DR7H, 0x00B6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionGPU, 0x00B8);
		}

		// class UParticleModuleColorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleColorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorBase, 0x0030);
		}

		// class UParticleModuleColor : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartAlpha, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, UnknownData_7M0B, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor, 0x00C0);
		}

		// class UParticleModuleColor_Seeded : public UParticleModuleColor
		TEST_METHOD(Class__Engine__ParticleModuleColor_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor_Seeded, RandomSeedInfo, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor_Seeded, 0x00E0);
		}

		// class UParticleModuleColorOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, ColorOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, AlphaOverLife, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, UnknownData_5SV2, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorOverLife, 0x00C0);
		}

		// class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, ColorScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, AlphaScaleOverLife, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, UnknownData_CY05, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorScaleOverLife, 0x00C0);
		}

		// class UParticleModuleEventBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleEventBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventBase, 0x0030);
		}

		// class UParticleModuleEventGenerator : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventGenerator, Events, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventGenerator, 0x0040);
		}

		// class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventGeneratorType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_WE3Q, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverBase, 0x0040);
		}

		// class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverKillParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverKillParticles, UnknownData_DGZO, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverKillParticles, 0x0048);
		}

		// class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, SpawnCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_RDT0, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, InheritVelocityScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, PhysicalMaterials, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_FNDV, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverSpawn, 0x00E8);
		}

		// class UParticleModuleEventSendToGame : public UObject
		TEST_METHOD(Class__Engine__ParticleModuleEventSendToGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventSendToGame, 0x0028);
		}

		// class UParticleModuleKillBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleKillBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBase, 0x0030);
		}

		// class UParticleModuleKillBox : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, LowerLeftCorner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UpperRightCorner, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UnknownData_7J57, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBox, 0x00D8);
		}

		// class UParticleModuleKillHeight : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillHeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, Height, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, UnknownData_Q91I, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillHeight, 0x0070);
		}

		// class UParticleModuleLifetimeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLifetimeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetimeBase, 0x0030);
		}

		// class UParticleModuleLifetime : public UParticleModuleLifetimeBase
		TEST_METHOD(Class__Engine__ParticleModuleLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime, LifeTime, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime, 0x0068);
		}

		// class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
		TEST_METHOD(Class__Engine__ParticleModuleLifetime_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime_Seeded, RandomSeedInfo, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime_Seeded, 0x0088);
		}

		// class UParticleModuleLightBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLightBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLightBase, 0x0030);
		}

		// class UParticleModuleLight : public UParticleModuleLightBase
		TEST_METHOD(Class__Engine__ParticleModuleLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bUseInverseSquaredFalloff, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bAffectsTranslucency, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bPreviewLightRadius, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_WRJY, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, SpawnFraction, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, ColorScaleOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, BrightnessOverLife, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, RadiusScale, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightExponent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightingChannels, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_4S8T, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, VolumetricScatteringIntensity, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bHighQualityLights, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bShadowCastingLights, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_1R4E, 0x013A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight, 0x0140);
		}

		// class UParticleModuleLight_Seeded : public UParticleModuleLight
		TEST_METHOD(Class__Engine__ParticleModuleLight_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight_Seeded, RandomSeedInfo, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight_Seeded, 0x0160);
		}

		// class UParticleModuleLocationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLocationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBase, 0x0030);
		}

		// class UParticleModuleLocation : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, StartLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeOverNPoints, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeThreshold, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation, 0x0088);
		}

		// class UParticleModuleLocation_Seeded : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation_Seeded, RandomSeedInfo, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation_Seeded, 0x00A8);
		}

		// class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationBoneSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_1I77, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceLocations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SelectionMethod, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_1T04, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_3A5S, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, InheritVelocityScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_OA52, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SkelMeshActorParamName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, NumPreSelectedIndices, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_23OW, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBoneSocket, 0x0070);
		}

		// class UParticleModuleLocationDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Location, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, LocationOffset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, ScaleFactor, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Direction, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationDirect, 0x0170);
		}

		// class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, SelectionMethod, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_NU4V, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_7AU8, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceVelocityScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_EA8X, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceRotationScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_S93Y, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitter, 0x0050);
		}

		// class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitterDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitterDirect, EmitterName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitterDirect, 0x0038);
		}

		// class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, UnknownData_M8F7, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, VelocityScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, StartLocation, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveBase, 0x00C0);
		}

		// class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_J7PW, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartRadius, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartHeight, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, HeightAxis, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_V0J3, 0x0139);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder, 0x0140);
		}

		// class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, RandomSeedInfo, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, 0x0160);
		}

		// class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere, StartRadius, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere, 0x00F8);
		}

		// class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere_Seeded, RandomSeedInfo, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere_Seeded, 0x0118);
		}

		// class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, StartOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Height, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Angle, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Thickness, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveTriangle, 0x0128);
		}

		// class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationSkelVertSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_DI1G, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_OMA1, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritVelocityScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SkelMeshActorParamName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidAssociatedBones, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_81Z2, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalToCompare, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckToleranceDegrees, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckTolerance, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidMaterialIndices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_BIAP, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritUVChannel, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationSkelVertSurface, 0x0090);
		}

		// class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset, 0x0088);
		}

		// class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationWorldOffset_Seeded, RandomSeedInfo, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset_Seeded, 0x00A8);
		}

		// class UParticleModuleMaterialBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleMaterialBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMaterialBase, 0x0030);
		}

		// class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshMaterial, MeshMaterials, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshMaterial, 0x0040);
		}

		// class UParticleModuleRotationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationBase, 0x0030);
		}

		// class UParticleModuleMeshRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, StartRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, UnknownData_GHQ3, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation, 0x0088);
		}

		// class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation_Seeded, RandomSeedInfo, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation_Seeded, 0x00A8);
		}

		// class UParticleModuleRotationRateBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateBase, 0x0030);
		}

		// class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate, 0x0080);
		}

		// class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate_Seeded, 0x00A0);
		}

		// class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateMultiplyLife, 0x0080);
		}

		// class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, RotRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, UnknownData_XQMP, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateOverLife, 0x0088);
		}

		// class UParticleModuleOrbitBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrbitBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbitBase, UnknownData_FI9G, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbitBase, 0x0038);
		}

		// class UParticleModuleOrbit : public UParticleModuleOrbitBase
		TEST_METHOD(Class__Engine__ParticleModuleOrbit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, ChainMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_10M8, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetAmount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetOptions, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_J9TK, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationAmount, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationOptions, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_HXJA, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateAmount, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateOptions, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_8O8S, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbit, 0x0148);
		}

		// class AFow_BOT_War_GER_Winter_C : public AFow_BOT_C
		TEST_METHOD(BlueprintGeneratedClass__Fow_BOT_War_GER_Winter__Fow_BOT_War_GER_Winter_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFow_BOT_War_GER_Winter_C, 0x0B20);
		}

		// class UParticleModuleOrientationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrientationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationBase, 0x0030);
		}

		// class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
		TEST_METHOD(Class__Engine__ParticleModuleOrientationAxisLock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, LockAxisFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, UnknownData_HWUN, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationAxisLock, 0x0038);
		}

		// class UParticleModuleParameterBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleParameterBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterBase, 0x0030);
		}

		// class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, DynamicParams, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UpdateFlags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UnknownData_03WP, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic, 0x0048);
		}

		// class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic_Seeded, RandomSeedInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic_Seeded, 0x0068);
		}

		// class UParticleModulePivotOffset : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModulePivotOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModulePivotOffset, PivotOffset, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModulePivotOffset, 0x0038);
		}

		// class UParticleModuleRequired : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRequired)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, Material, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterOrigin, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ScreenAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_07LX, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MinFacingCameraBlendDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxFacingCameraBlendDistance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_5LBG, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SortMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_M39I, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_P0TB, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDuration, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDurationLow, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_ZZHT, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterLoops, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SpawnRate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ParticleBurstMethod, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_7P5I, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BurstList, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelay, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelayLow, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_R4IS, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, InterpolationMethod, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_XVQ7, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Horizontal, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Vertical, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_D6IM, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageTime, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageChanges, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_Y6O5, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVPosition, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVRadius, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_WDXE, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxDrawCount, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UVFlippingMode, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_O0CQ, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, CutoutTexture, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BoundingMode, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, OpacitySourceMode, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_DSYA, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, AlphaThreshold, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterNormalsMode, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_WDSK, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsSphereCenter, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsCylinderDirection, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_CCFA, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NamedMaterialOverrides, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_DSS1, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRequired, 0x0170);
		}

		// class UParticleModuleRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation, StartRotation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation, 0x0068);
		}

		// class UParticleModuleRotation_Seeded : public UParticleModuleRotation
		TEST_METHOD(Class__Engine__ParticleModuleRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation_Seeded, RandomSeedInfo, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation_Seeded, 0x0088);
		}

		// class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, RotationOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, UnknownData_NCFT, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationOverLifetime, 0x0070);
		}

		// class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate, 0x0068);
		}

		// class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate_Seeded, RandomSeedInfo, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate_Seeded, 0x0088);
		}

		// class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateMultiplyLife, 0x0068);
		}

		// class UParticleModuleSizeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSizeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeBase, 0x0030);
		}

		// class UParticleModuleSize : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize, StartSize, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize, 0x0080);
		}

		// class UParticleModuleSize_Seeded : public UParticleModuleSize
		TEST_METHOD(Class__Engine__ParticleModuleSize_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize_Seeded, 0x00A0);
		}

		// class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, LifeMultiplier, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, UnknownData_SGN2, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeMultiplyLife, 0x0088);
		}

		// class UParticleModuleSizeScale : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, SizeScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, UnknownData_LM64, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScale, 0x0088);
		}

		// class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScaleBySpeed)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, SpeedScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, MaxScale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScaleBySpeed, 0x0040);
		}

		// class UParticleModuleSourceMovement : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleSourceMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSourceMovement, SourceMovementScale, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSourceMovement, 0x0080);
		}

		// class UParticleModuleSpawnBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSpawnBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnBase, UnknownData_2041, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnBase, 0x0038);
		}

		// class UParticleModuleSpawn : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, Rate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, RateScale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, ParticleBurstMethod, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_21OE, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstList, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstScale, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_7PL9, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawn, 0x0100);
		}

		// class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawnPerUnit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnitScalar, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_O8KV, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, SpawnPerUnit, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_0N2D, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MovementTolerance, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MaxFrameDistance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_U61M, 0x0085);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnPerUnit, 0x0088);
		}

		// class UParticleModuleSubUVBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSubUVBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVBase, 0x0030);
		}

		// class UParticleModuleSubUV : public UParticleModuleSubUVBase
		TEST_METHOD(Class__Engine__ParticleModuleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, Animation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, SubImageIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, UnknownData_UT87, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUV, 0x0078);
		}

		// class UParticleModuleSubUVMovie : public UParticleModuleSubUV
		TEST_METHOD(Class__Engine__ParticleModuleSubUVMovie)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_F5ZJ, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, FrameRate, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, StartingFrame, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_GYRL, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVMovie, 0x00C0);
		}

		// class UParticleModuleTrailBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTrailBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailBase, 0x0030);
		}

		// class UParticleModuleTrailSource : public UParticleModuleTrailBase
		TEST_METHOD(Class__Engine__ParticleModuleTrailSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_IOIM, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceStrength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_DN37, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetCount, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetDefaults, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SelectionMethod, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_1FFT, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_61C8, 0x0095);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailSource, 0x0098);
		}

		// class UParticleModuleTypeDataBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBase, 0x0030);
		}

		// class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataAnimTrail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_T3J6, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TilingDistance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, DistanceTessellationStepSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TangentTessellationStepSize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, WidthTessellationStepSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_9RGJ, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataAnimTrail, 0x0048);
		}

		// class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBeam2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BeamMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_2R9C, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTile, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTileDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Sheets, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, MaxBeamCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Speed, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, InterpolationPoints, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_0B3Z, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UpVectorStepSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_Q8NM, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BranchParentName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Distance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_EQAG, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperFactor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperScale, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_C3VO, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBeam2, 0x0168);
		}

		// class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataGpu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, EmitterInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, ResourceData, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, CameraMotionBlurAmount, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, UnknownData_OOAN, 0x0455);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataGpu, 0x0460);
		}

		// class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Mesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_200N, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, MeshAlignment, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_OVL0, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_H9TW, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Pitch, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Roll, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Yaw, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, RollPitchYawRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_O0GZ, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, AxisLockOption, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_MPD7, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_N03D, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingUpAxisOption, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingOption, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_3D3G, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_624O, 0x00B5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataMesh, 0x00B8);
		}

		// class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataRibbon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTessellationBetweenParticles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, SheetsPerTrail, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTrailCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxParticleInTrailCount, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_RWJ9, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, RenderAxis, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_LPL4, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentSpawningScalar, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_XXEF, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TilingDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, DistanceTessellationStepSize, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_6N2M, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentTessellationScalar, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataRibbon, 0x0060);
		}

		// class UParticleModuleVectorFieldBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldBase, 0x0030);
		}

		// class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldGlobal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_W5B9, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldTightness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_KC9C, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldGlobal, 0x0040);
		}

		// class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldLocal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, VectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeTranslation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeScale3D, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Intensity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Tightness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, UnknownData_7WUL, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldLocal, 0x0068);
		}

		// class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MinInitialRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MaxInitialRotation, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotation, 0x0048);
		}

		// class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, RotationRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, UnknownData_2F3P, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotationRate, 0x0040);
		}

		// class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScaleRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScale, 0x0070);
		}

		// class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLifeRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScaleOverLife, 0x0070);
		}

		// class UParticleModuleVelocityBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVelocityBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityBase, UnknownData_EEE1, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityBase, 0x0038);
		}

		// class UParticleModuleVelocity : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocityRadial, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity, 0x00C0);
		}

		// class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
		TEST_METHOD(Class__Engine__ParticleModuleVelocity_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity_Seeded, RandomSeedInfo, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity_Seeded, 0x00E0);
		}

		// class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Angle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Velocity, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Direction, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, UnknownData_RGO6, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityCone, 0x00B8);
		}

		// class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityInheritParent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityInheritParent, Scale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityInheritParent, 0x0088);
		}

		// class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, VelOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, UnknownData_DJK0, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityOverLifetime, 0x0090);
		}

		// class UParticleSpriteEmitter : public UParticleEmitter
		TEST_METHOD(Class__Engine__ParticleSpriteEmitter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSpriteEmitter, 0x0170);
		}

		// class UParticleSystem : public UObject
		TEST_METHOD(Class__Engine__ParticleSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SystemUpdateMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_VYGP, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_FPS, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_Delta, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTime, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTickRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_KRTB, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Emitters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, PreviewComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CurveEdSetup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_05DO, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistanceCheckTime, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODMethod, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_WGCY, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistances, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_59CS, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_3ZA2, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, FixedRelativeBoundingBox, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SecondsBeforeInactive, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_IA4P, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Delay, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, DelayLow, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_RE5B, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, bAutoDeactivate, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_2JRJ, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MinTimeBetweenTicks, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificantReaction, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_PFAL, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificanceDelay, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MaxSignificanceLevel, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_V2ZJ, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVPosition, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVRadius, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, OcclusionBoundsMethod, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_B0FK, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CustomOcclusionBounds, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SoloTracking, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, NamedMaterialSlots, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_EZBD, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystem, 0x0138);
		}

		// class UParticleSystemComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ParticleSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, Template, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, EmitterMaterials, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SkelMeshComponents, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_ACWN, 0x06BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, LODMethod, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, RequiredSignificance, 0x06BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_Z2J0, 0x06BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, InstanceParameters, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleSpawn, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleBurst, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleDeath, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleCollide, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OldPosition, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, PartSysVelocity, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTime, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTickRate, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_906B, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SecondsBeforeInactive, 0x0734);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_A10S, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, MaxTimeBeforeForceUpdateTransform, 0x073C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_5UK1, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, ReplayClips, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_D14A, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, CustomTimeDilation, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_NVVB, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachParent, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachSocketName, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachLocationRule, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachRotationRule, 0x07E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachScaleRule, 0x07E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_80YR, 0x07E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnSystemFinished, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_IDI9, 0x0820);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemComponent, 0x08E0);
		}

		// class UParticleSystemReplay : public UObject
		TEST_METHOD(Class__Engine__ParticleSystemReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, ClipIDNumber, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, UnknownData_XXOB, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemReplay, 0x0040);
		}

		// class UPawnNoiseEmitterComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PawnNoiseEmitterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_22SJ, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoisePosition, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, NoiseLifetime, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseVolume, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseTime, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseVolume, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_HV9E, 0x0114);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnNoiseEmitterComponent, 0x0118);
		}

		// class UPhysicalAnimationComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PhysicalAnimationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, StrengthMultiplyer, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_HH1J, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, SkeletalMeshComponent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_BO36, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalAnimationComponent, 0x0130);
		}

		// class UPhysicalMaterial : public UObject
		TEST_METHOD(Class__Engine__PhysicalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Friction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, FrictionCombineMode, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideFrictionCombineMode, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_S1PD, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Restitution, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RestitutionCombineMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideRestitutionCombineMode, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_98L1, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Density, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RaiseMassToPower, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, DestructibleDamageThresholdScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_XNFS, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, PhysicalMaterialProperty, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SurfaceType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_ZYNL, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, TireFrictionScale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, TireFrictionScales, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_V91R, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterial, 0x0080);
		}

		// class UPhysicalMaterialPropertyBase : public UObject
		TEST_METHOD(Class__Engine__PhysicalMaterialPropertyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialPropertyBase, 0x0028);
		}

		// class UPhysicsAsset : public UObject
		TEST_METHOD(Class__Engine__PhysicsAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BoundsBodies, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SkeletalBodySetups, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ConstraintSetup, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_U4OQ, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ThumbnailInfo, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BodySetup, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsAsset, 0x0118);
		}

		// class USkeletalBodySetup : public UBodySetup
		TEST_METHOD(Class__Engine__SkeletalBodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, PhysicalAnimationData, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, UnknownData_IKC4, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalBodySetup, 0x03B0);
		}

		// class UPhysicsCollisionHandler : public UObject
		TEST_METHOD(Class__Engine__PhysicsCollisionHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactThreshold, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactReFireDelay, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, DefaultImpactSound, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, LastImpactSoundTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, UnknownData_QRPS, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsCollisionHandler, 0x0040);
		}

		// class ARigidBodyBase : public AActor
		TEST_METHOD(Class__Engine__RigidBodyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARigidBodyBase, 0x0368);
		}

		// class APhysicsConstraintActor : public ARigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsConstraintActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintComp, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor1, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor2, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, UnknownData_4P8O, 0x0381);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsConstraintActor, 0x0388);
		}

		// class UPhysicsConstraintComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsConstraintComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, UnknownData_3CH2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintSetup, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, OnConstraintBroken, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, UnknownData_9YRZ, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintInstance, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintComponent, 0x04D0);
		}

		// class UPhysicsConstraintTemplate : public UObject
		TEST_METHOD(Class__Engine__PhysicsConstraintTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, UnknownData_N7BL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, ProfileHandles, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultProfile, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, UnknownData_BWOE, 0x0334);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintTemplate, 0x0340);
		}

		// class UPhysicsHandleComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PhysicsHandleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, GrabbedComponent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_690Y, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_9TAO, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearDamping, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearStiffness, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularDamping, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularStiffness, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_S341, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, InterpolationSpeed, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_9ZIM, 0x0184);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsHandleComponent, 0x01A0);
		}

		// class UPhysicsSerializer : public UObject
		TEST_METHOD(Class__Engine__PhysicsSerializer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSerializer, UnknownData_M735, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSerializer, 0x00D0);
		}

		// class UPhysicsSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__PhysicsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultGravityZ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultTerminalVelocity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultFluidFriction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SimulateScratchMemorySize, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, RagdollAggregateThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, TriangleMeshTriangleMinAreaThreshold, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableAsyncScene, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableShapeSharing, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnablePCM, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableStabilization, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bWarnMissingLocks, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnable2DPhysics, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, LockedAxis, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultDegreesOfFreedom, 0x0057);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, BounceThresholdVelocity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, FrictionCombineMode, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, RestitutionCombineMode, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_OPFC, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxAngularVelocity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxDepenetrationVelocity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, ContactOffsetMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MinContactOffset, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxContactOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSimulateSkeletalMeshOnDedicatedServer, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultShapeComplexity, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDefaultHasComplexCollision, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSuppressFaceRemapTable, 0x0077);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSupportUVFromHitResults, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableActiveActors, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableCCD, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableEnhancedDeterminism, 0x007B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxPhysicsDeltaTime, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubstepping, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubsteppingAsync, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_6AQG, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubstepDeltaTime, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubsteps, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SyncSceneSmoothingFactor, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, AsyncSceneSmoothingFactor, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, InitialAverageFrameRate, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysXTreeRebuildRate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_YD59, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicalSurfaces, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSettings, 0x00B0);
		}

		// class UPhysicsSpringComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsSpringComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringStiffness, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringDamping, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringLengthAtRest, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringRadius, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringChannel, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, bIgnoreSelf, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_82BO, 0x02A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringCompression, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_W2BB, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSpringComponent, 0x02C0);
		}

		// class APhysicsThruster : public ARigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsThruster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsThruster, ThrusterComponent, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsThruster, 0x0370);
		}

		// class UPhysicsThrusterComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsThrusterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsThrusterComponent, ThrustStrength, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsThrusterComponent, UnknownData_3UMT, 0x0294);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsThrusterComponent, 0x02A0);
		}

		// class ASceneCapture : public AActor
		TEST_METHOD(Class__Engine__SceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, MeshComp, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture, 0x0370);
		}

		// class APlanarReflection : public ASceneCapture
		TEST_METHOD(Class__Engine__PlanarReflection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, PlanarReflectionComponent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, bShowPreviewPlane, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, UnknownData_DJLM, 0x0379);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlanarReflection, 0x0380);
		}

		// class USceneCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, PrimitiveRenderMode, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_OB18, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenComponents, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenActors, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyComponents, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyActors, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bCaptureEveryFrame, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bCaptureOnMovement, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bAlwaysPersistRenderingState, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_F4JI, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, LODDistanceFactor, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, MaxViewDistanceOverride, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, CaptureSortPriority, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowFlagSettings, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_GMEN, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent, 0x0318);
		}

		// class UPlanarReflectionComponent : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__PlanarReflectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PreviewBox, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, NormalDistortionStrength, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughness, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughnessDistance, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ScreenPercentage, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ExtraFOV, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeStart, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeEnd, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutStart, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutEnd, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeStart, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeEnd, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bRenderSceneTwoSided, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, UnknownData_C3ZO, 0x034D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanarReflectionComponent, 0x0420);
		}

		// class APlaneReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__PlaneReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlaneReflectionCapture, 0x0370);
		}

		// class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__PlaneReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, InfluenceRadiusScale, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, UnknownData_843G, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewInfluenceRadius, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewCaptureBox, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, UnknownData_Y30U, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneReflectionCaptureComponent, 0x0340);
		}

		// class UPlatformEventsComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PlatformEventsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToLaptopModeDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToTabletModeDelegate, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformEventsComponent, 0x0110);
		}

		// class UPlatformInterfaceWebResponse : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceWebResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, OriginalURL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, ResponseCode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, Tag, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, StringResponse, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, BinaryResponse, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, UnknownData_CV9W, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceWebResponse, 0x00B0);
		}

		// class APlayerCameraManager : public AActor
		TEST_METHOD(Class__Engine__PlayerCameraManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PCOwner, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, TransformComponent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_NC89, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultFOV, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_47VI, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultOrthoWidth, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_PEXU, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultAspectRatio, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_KHCM, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCache, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCache, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTarget, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PendingViewTarget, 0x1410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_3PGE, 0x1980);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ModifierList, 0x1998);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultModifiers, 0x19A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamDistance, 0x19B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamOffset, 0x19BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTargetOffset, 0x19C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_21J8, 0x19D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraLensEffects, 0x19E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CachedCameraShakeMod, 0x19F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimInstPool, 0x1A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PostProcessBlendCache, 0x1A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_BCDB, 0x1A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ActiveAnims, 0x1A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeAnims, 0x1A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimCameraActor, 0x1A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_4BAE, 0x1A8A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMin, 0x1A8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMax, 0x1A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMin, 0x1A94);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMax, 0x1A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMin, 0x1A9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMax, 0x1AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_A1HU, 0x1AA4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerCameraManager, 0x1AB0);
		}

		// class UPlayerInput : public UObject
		TEST_METHOD(Class__Engine__PlayerInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_2A81, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, DebugExecBindings, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_4UI0, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, InvertedAxis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_Q1PN, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInput, 0x0398);
		}

		// class APlayerStart : public ANavigationObjectBase
		TEST_METHOD(Class__Engine__PlayerStart)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerStart, PlayerStartTag, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStart, 0x0398);
		}

		// class APlayerStartPIE : public APlayerStart
		TEST_METHOD(Class__Engine__PlayerStartPIE)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStartPIE, 0x0398);
		}

		// class APlayerState : public AInfo
		TEST_METHOD(Class__Engine__PlayerState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Score, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Ping, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_PBEB, 0x036D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerName, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_UYR4, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerId, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_PTJV, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, StartTime, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_6VC4, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, EngineMessageClass, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_DIKQ, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, SavedNetworkAddress, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UniqueId, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_TQDY, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerState, 0x03F8);
		}

		// class UPluginCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__PluginCommandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPluginCommandlet, UnknownData_19DW, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPluginCommandlet, 0x00A0);
		}

		// class APointLight : public ALight
		TEST_METHOD(Class__Engine__PointLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APointLight, PointLightComponent, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APointLight, 0x0380);
		}

		// class UPointLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__PointLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, Radius, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, AttenuationRadius, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, UnknownData_9SYU, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, LightFalloffExponent, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceRadius, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SoftSourceRadius, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceLength, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, LightmassSettings, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, UnknownData_17MI, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointLightComponent, 0x03EC);
		}

		// class UPolys : public UObject
		TEST_METHOD(Class__Engine__Polys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolys, UnknownData_TDC5, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolys, 0x0038);
		}

		// class UPoseableMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__PoseableMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseableMeshComponent, UnknownData_NZK7, 0x0840);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseableMeshComponent, 0x0930);
		}

		// class UPoseAsset : public UAnimationAsset
		TEST_METHOD(Class__Engine__PoseAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, PoseContainer, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, bAdditivePose, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, UnknownData_S3QP, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, BasePoseIndex, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, RetargetSource, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, UnknownData_FXYH, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseAsset, 0x0190);
		}

		// class UPoseWatch : public UObject
		TEST_METHOD(Class__Engine__PoseWatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, Node, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, PoseWatchColour, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, UnknownData_1YSE, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseWatch, 0x0038);
		}

		// class UPostProcessComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PostProcessComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_V2CZ, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Settings, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Priority, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendRadius, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendWeight, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_5UT7, 0x07AD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostProcessComponent, 0x07B0);
		}

		// class APostProcessVolume : public AVolume
		TEST_METHOD(Class__Engine__PostProcessVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_5ZG7, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Settings, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Priority, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendRadius, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendWeight, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_U8L9, 0x08BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APostProcessVolume, 0x08C0);
		}

		// class APrecomputedVisibilityOverrideVolume : public AVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityOverrideVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideVisibleActors, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleActors, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleLevels, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityOverrideVolume, 0x03D0);
		}

		// class APrecomputedVisibilityVolume : public AVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityVolume, 0x03A0);
		}

		// class UPreviewCollectionInterface : public UInterface
		TEST_METHOD(Class__Engine__PreviewCollectionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewCollectionInterface, 0x0028);
		}

		// class UPreviewMeshCollection : public UDataAsset
		TEST_METHOD(Class__Engine__PreviewMeshCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, UnknownData_GOD3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, SkeletalMeshes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewMeshCollection, 0x0050);
		}

		// class UPrimaryAssetLabel : public UPrimaryDataAsset
		TEST_METHOD(Class__Engine__PrimaryAssetLabel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, Rules, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, UnknownData_GGG8, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitAssets, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitBlueprints, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, AssetCollection, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryAssetLabel, 0x0070);
		}

		// class UProjectileMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__ProjectileMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InitialSpeed, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSpeed, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_TYRM, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitTime, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitNormal, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, ProjectileGravityScale, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Buoyancy, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Bounciness, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Friction, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceVelocityStopSimulatingThreshold, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileBounce, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileStop, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingAccelerationMagnitude, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingTargetComponent, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationTimeStep, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationIterations, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_3R30, 0x019C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectileMovementComponent, 0x01A0);
		}

		// class ARadialForceActor : public ARigidBodyBase
		TEST_METHOD(Class__Engine__RadialForceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadialForceActor, ForceComponent, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARadialForceActor, 0x0370);
		}

		// class URadialForceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__RadialForceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, Radius, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, Falloff, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_R6S0, 0x0295);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ImpulseStrength, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_BMA2, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ForceStrength, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, DestructibleDamage, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ObjectTypesToAffect, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_GNB3, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialForceComponent, 0x02C0);
		}

		// class URecastFilter_UseDefaultArea : public UNavigationQueryFilter
		TEST_METHOD(Class__Engine__RecastFilter_UseDefaultArea)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastFilter_UseDefaultArea, 0x0048);
		}

		// class ARecastNavMesh : public ANavigationData
		TEST_METHOD(Class__Engine__RecastNavMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_WT4H, 0x0512);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DrawOffset, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_LZAN, 0x0519);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TilePoolSize, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSizeUU, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellSize, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellHeight, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentRadius, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentHeight, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxHeight, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxSlope, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxStepHeight, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MinRegionArea, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MergeRegionSize, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimplificationError, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimultaneousTileGenerationJobsCount, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileNumberHardLimit, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefTileBits, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefNavPolyBits, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefSaltBits, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultDrawDistance, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxSearchNodes, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxHierarchicalSearchNodes, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionPartitioning, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerPartitioning, 0x056D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_VY7O, 0x056E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionChunkSplits, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerChunkSplits, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_VEGH, 0x057A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSetUpdateInterval, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, HeuristicScale, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, VerticalDeviationFromGroundCompensation, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_DGEN, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARecastNavMesh, 0x0620);
		}

		// class URecastNavMeshDataChunk : public UNavigationDataChunk
		TEST_METHOD(Class__Engine__RecastNavMeshDataChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMeshDataChunk, UnknownData_5QPX, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastNavMeshDataChunk, 0x0040);
		}

		// class URendererSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_3KAD, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MaxMobileCascades, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileMSAASampleCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_QQF2, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_8EF7, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForLights, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForEarlyZPass, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForCSMdepth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_F3Z9, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ReflectionCaptureResolution, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_JX7F, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TessellationAdaptivePixelsPerTriangle, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_DH00, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortPolicy, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_2G8L, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortAxis, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, CustomDepthStencil, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_BFII, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_2GN3, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposure, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_FA7P, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_LWYL, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAntiAliasing, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_PAYV, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_UXTR, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, EarlyZPass, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_QF5W, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_TJLJ, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ClearSceneMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_R313, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_57F8, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GBufferFormat, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_P63I, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_0R4R, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, WireframeCullThreshold, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_SPL1, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileNumDynamicPointLights, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_SN0N, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, SkinCacheSceneMemoryLimitInMB, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_V11W, 0x00BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererSettings, 0x00C0);
		}

		// class URendererOverrideSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererOverrideSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererOverrideSettings, UnknownData_L1J6, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererOverrideSettings, 0x0040);
		}

		// class UReporterBase : public UObject
		TEST_METHOD(Class__Engine__ReporterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterBase, UnknownData_YX8R, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterBase, 0x0030);
		}

		// class UReporterGraph : public UReporterBase
		TEST_METHOD(Class__Engine__ReporterGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterGraph, UnknownData_55QR, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterGraph, 0x00A8);
		}

		// class UReverbEffect : public UObject
		TEST_METHOD(Class__Engine__ReverbEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Density, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Diffusion, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, GainHF, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayHFRatio, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsGain, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsDelay, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateGain, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateDelay, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, AirAbsorptionGainHF, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, RoomRolloffFactor, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbEffect, 0x0058);
		}

		// class URig : public UObject
		TEST_METHOD(Class__Engine__Rig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, TransformBases, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, Nodes, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URig, 0x0048);
		}

		// class URotatingMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__RotatingMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, RotationRate, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, PivotTranslation, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, UnknownData_4ZFY, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URotatingMovementComponent, 0x0158);
		}

		// class URVOAvoidanceInterface : public UInterface
		TEST_METHOD(Class__Engine__RVOAvoidanceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URVOAvoidanceInterface, 0x0028);
		}

		// class USaveGame : public UObject
		TEST_METHOD(Class__Engine__SaveGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USaveGame, 0x0028);
		}

		// class UScene : public UObject
		TEST_METHOD(Class__Engine__Scene)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScene, 0x0028);
		}

		// class ASceneCapture2D : public ASceneCapture
		TEST_METHOD(Class__Engine__SceneCapture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture2D, CaptureComponent2D, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture2D, DrawFrustum, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture2D, 0x0380);
		}

		// class USceneCaptureComponent2D : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_6BF8, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, FOVAngle, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, OrthoWidth, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_3K18, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, TextureTarget, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CaptureSource, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CompositeMode, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_DNHE, 0x0332);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessSettings, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessBlendWeight, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bUseCustomProjectionMatrix, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_SMVW, 0x0845);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomProjectionMatrix, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bEnableClipPlane, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_9373, 0x0891);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneBase, 0x0894);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneNormal, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_93K6, 0x08AD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent2D, 0x08B0);
		}

		// class ACv2_CraftZone_WeaponsTool_C : public ACv2_CraftZone_C
		TEST_METHOD(BlueprintGeneratedClass__Cv2_CraftZone_WeaponsTool__Cv2_CraftZone_WeaponsTool_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_CraftZone_WeaponsTool_C, 0x0399);
		}

		// class USceneCaptureComponentCube : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponentCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTarget, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponentCube, 0x0320);
		}

		// class ASceneCaptureCube : public ASceneCapture
		TEST_METHOD(Class__Engine__SceneCaptureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCaptureCube, CaptureComponentCube, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCaptureCube, DrawFrustum, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCaptureCube, 0x0380);
		}

		// class USCS_Node : public UObject
		TEST_METHOD(Class__Engine__SCS_Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, CookedComponentInstancingData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, VariableName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, AttachToName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOrVariableName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOwnerClassName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, bIsParentComponentNative, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, UnknownData_65NR, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ChildNodes, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, MetaDataArray, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, VariableGuid, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, bIsFalseRoot, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, bIsNative, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, UnknownData_XLML, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, NativeComponentName, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, bVariableNameAutoGenerated, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, UnknownData_BRB6, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, InternalVariableName, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, UnknownData_0YQ8, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USCS_Node, 0x0140);
		}

		// class USelection : public UObject
		TEST_METHOD(Class__Engine__Selection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelection, UnknownData_2REE, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelection, 0x00A0);
		}

		// class UShadowMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__ShadowMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, ShadowmapFlags, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, UnknownData_W84B, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShadowMapTexture2D, 0x0118);
		}

		// class USimpleConstructionScript : public UObject
		TEST_METHOD(Class__Engine__SimpleConstructionScript)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, RootNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, AllNodes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, DefaultSceneRootNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, RootNode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, ActorComponentNodes, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, UnknownData_36EL, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleConstructionScript, 0x00B8);
		}

		// class USkeletalMesh : public UObject
		TEST_METHOD(Class__Engine__SkeletalMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_H1BR, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Skeleton, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ImportedBounds, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ExtendedBounds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PositiveBoundsExtension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NegativeBoundsExtension, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Materials, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorTable, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorAxis, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorFlipAxis, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_9PGW, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, LODInfo, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_8D9X, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, BodySetup, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PhysicsAsset, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ShadowPhysicsAsset, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NodeMappingData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MorphTargets, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_RV10, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ClothingAssets, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PostProcessAnimBlueprint, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MeshClothingAssets, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, AssetUserData, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_AYVL, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Sockets, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_NMDF, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMesh, 0x02E0);
		}

		// class ASkeletalMeshActor : public AActor
		TEST_METHOD(Class__Engine__SkeletalMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_A3S8, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_AMY1, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, SkeletalMeshComponent, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMesh, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedPhysAsset, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial0, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial1, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_HAEK, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkeletalMeshActor, 0x03F0);
		}

		// class ARock_10_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Rock_10_Static_BP__Rock_10_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARock_10_Static_BP_C, 0x0370);
		}

		// class USkeletalMeshReductionSettings : public UObject
		TEST_METHOD(Class__Engine__SkeletalMeshReductionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshReductionSettings, Settings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshReductionSettings, UnknownData_QU6K, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshReductionSettings, 0x0040);
		}

		// class USkeletalMeshSocket : public UObject
		TEST_METHOD(Class__Engine__SkeletalMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, BoneName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeLocation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, bForceAlwaysAnimated, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, UnknownData_S39Y, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSocket, 0x0060);
		}

		// class ASkyLight : public AInfo
		TEST_METHOD(Class__Engine__SkyLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, LightComponent, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, UnknownData_L385, 0x0371);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyLight, 0x0378);
		}

		// class USkyLightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__SkyLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_K7UX, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Cubemap, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SourceCubemapAngle, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CubemapResolution, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SkyDistanceThreshold, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bCaptureEmissiveOnly, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bLowerHemisphereIsBlack, 0x02D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_X5QF, 0x02D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, LowerHemisphereColor, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionMaxDistance, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Contrast, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionExponent, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, MinOcclusion, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionTint, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionCombineMode, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_7HVW, 0x02FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, BlendDestinationCubemap, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_PIQQ, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyLightComponent, 0x0470);
		}

		// class AFridge_02_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Fridge_02_Rig__Fridge_02_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFridge_02_Rig_C, 0x03C2);
		}

		// class UObject
		TEST_METHOD(Class__CoreUObject__Object)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, VfTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, InternalIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Class, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Outer, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObject, 0x0028);
		}

		// class UField : public UObject
		TEST_METHOD(Class__CoreUObject__Field)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UField, Next, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UField, 0x0030);
		}

		// class UProperty : public UField
		TEST_METHOD(Class__CoreUObject__Property)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProperty, UnknownData_U2L1, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProperty, 0x0070);
		}

		// class USlateBrushAsset : public UObject
		TEST_METHOD(Class__Engine__SlateBrushAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateBrushAsset, Brush, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBrushAsset, 0x00A0);
		}

		// class UObjectPropertyBase : public UProperty
		TEST_METHOD(Class__CoreUObject__ObjectPropertyBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPropertyBase, UnknownData_IOCR, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectPropertyBase, 0x0078);
		}

		// class USlateTextureAtlasInterface : public UInterface
		TEST_METHOD(Class__Engine__SlateTextureAtlasInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTextureAtlasInterface, 0x0028);
		}

		// class UObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__ObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectProperty, 0x0078);
		}

		// class USmokeTestCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__SmokeTestCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmokeTestCommandlet, 0x0080);
		}

		// class UClassProperty : public UObjectProperty
		TEST_METHOD(Class__CoreUObject__ClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassProperty, UnknownData_GN2L, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassProperty, 0x0080);
		}

		// class USoundAttenuation : public UObject
		TEST_METHOD(Class__Engine__SoundAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundAttenuation, 0x02E8);
		}

		// class UDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__DelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDelegateProperty, UnknownData_59PR, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateProperty, 0x0078);
		}

		// class USoundClass : public UObject
		TEST_METHOD(Class__Engine__SoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, Properties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, UnknownData_RQKQ, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ChildClasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, PassiveSoundMixModifiers, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ParentClass, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundClass, 0x0080);
		}

		// class UNumericProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NumericProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNumericProperty, 0x0070);
		}

		// class UDoubleProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__DoubleProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoubleProperty, 0x0070);
		}

		// class USoundConcurrency : public UObject
		TEST_METHOD(Class__Engine__SoundConcurrency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundConcurrency, Concurrency, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundConcurrency, 0x0038);
		}

		// class UFloatProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__FloatProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatProperty, 0x0070);
		}

		// class USoundCue : public USoundBase
		TEST_METHOD(Class__Engine__SoundCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_1K3U, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, FirstNode, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, VolumeMultiplier, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, PitchMultiplier, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, AttenuationOverrides, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, SubtitlePriority, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_MOWT, 0x0384);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundCue, 0x0390);
		}

		// class UIntProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__IntProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntProperty, 0x0070);
		}

		// class UInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt16Property, 0x0070);
		}

		// class UInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt64Property, 0x0070);
		}

		// class USoundEffectPreset : public UObject
		TEST_METHOD(Class__Engine__SoundEffectPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectPreset, UnknownData_GQ16, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectPreset, 0x0040);
		}

		// class UInt8Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int8Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt8Property, 0x0070);
		}

		// class USoundEffectSourcePreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSourcePreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePreset, 0x0040);
		}

		// class UInterfaceProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__InterfaceProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterfaceProperty, UnknownData_5LHR, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterfaceProperty, 0x0078);
		}

		// class USoundEffectSourcePresetChain : public UObject
		TEST_METHOD(Class__Engine__SoundEffectSourcePresetChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, Chain, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, UnknownData_MTPO, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePresetChain, 0x0040);
		}

		// class ULazyObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__LazyObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULazyObjectProperty, 0x0078);
		}

		// class UMapProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MapProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProperty, UnknownData_9C0C, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapProperty, 0x00A8);
		}

		// class UMulticastDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MulticastDelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMulticastDelegateProperty, UnknownData_QZG4, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegateProperty, 0x0078);
		}

		// class USoundEffectSubmixPreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSubmixPreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSubmixPreset, 0x0040);
		}

		// class UNameProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NameProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNameProperty, 0x0070);
		}

		// class USoundGroups : public UObject
		TEST_METHOD(Class__Engine__SoundGroups)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, SoundGroupProfiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, UnknownData_BIWU, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundGroups, 0x0088);
		}

		// class USetProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__SetProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetProperty, UnknownData_OPZJ, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetProperty, 0x0098);
		}

		// class USoundMix : public UObject
		TEST_METHOD(Class__Engine__SoundMix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, UnknownData_D0NK, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQPriority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, SoundClassEffects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, InitialDelay, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeInTime, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, Duration, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeOutTime, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundMix, 0x0088);
		}

		// class USoftObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__SoftObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftObjectProperty, 0x0078);
		}

		// class USoftClassProperty : public USoftObjectProperty
		TEST_METHOD(Class__CoreUObject__SoftClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoftClassProperty, UnknownData_U42G, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftClassProperty, 0x0080);
		}

		// class UStrProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StrProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStrProperty, 0x0070);
		}

		// class USoundNode : public UObject
		TEST_METHOD(Class__Engine__SoundNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, ChildNodes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNode, 0x0038);
		}

		// class UStructProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StructProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructProperty, UnknownData_YABQ, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStructProperty, 0x0078);
		}

		// class USoundNodeAssetReferencer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAssetReferencer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAssetReferencer, 0x0038);
		}

		// class UUInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt16Property, 0x0070);
		}

		// class USoundNodeAttenuation : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationOverrides, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, UnknownData_HNJK, 0x0301);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAttenuation, 0x0308);
		}

		// class UUInt32Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt32Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt32Property, 0x0070);
		}

		// class UUInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt64Property, 0x0070);
		}

		// class USoundNodeBranch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeBranch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeBranch, BoolParameterName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeBranch, 0x0040);
		}

		// class UWeakObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__WeakObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeakObjectProperty, 0x0078);
		}

		// class USoundNodeConcatenator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeConcatenator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeConcatenator, InputVolume, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeConcatenator, 0x0048);
		}

		// class UTextProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__TextProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextProperty, 0x0070);
		}

		// class UGCObjectReferencer : public UObject
		TEST_METHOD(Class__CoreUObject__GCObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGCObjectReferencer, UnknownData_DLBJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCObjectReferencer, 0x0060);
		}

		// class USoundNodeDelay : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMin, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMax, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDelay, 0x0040);
		}

		// class UTextBuffer : public UObject
		TEST_METHOD(Class__CoreUObject__TextBuffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBuffer, UnknownData_4PWE, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBuffer, 0x0050);
		}

		// class USoundNodeDialoguePlayer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDialoguePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, DialogueWaveParameter, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, UnknownData_BGU0, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDialoguePlayer, 0x0060);
		}

		// class UStruct : public UField
		TEST_METHOD(Class__CoreUObject__Struct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, SuperField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Children, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertySize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, MinAlignment, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Script, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertyLink, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, RefLink, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, DestructorLink, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PostConstructorLink, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ScriptObjectReferences, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, pad_ZQHVW83UX3, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStruct, 0x0088);
		}

		// class USoundNodeDistanceCrossFade : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDistanceCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDistanceCrossFade, CrossFadeInput, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDistanceCrossFade, 0x0048);
		}

		// class USoundNodeDoppler : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDoppler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, DopplerIntensity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_4TNA, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDoppler, 0x0040);
		}

		// class UScriptStruct : public UStruct
		TEST_METHOD(Class__CoreUObject__ScriptStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptStruct, UnknownData_DKOL, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptStruct, 0x0098);
		}

		// class UPackage : public UObject
		TEST_METHOD(Class__CoreUObject__Package)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackage, UnknownData_SM4B, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackage, 0x0158);
		}

		// class USoundNodeEnveloper : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeEnveloper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopStart, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopEnd, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, DurationAfterLoop, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopCount, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, UnknownData_AOSJ, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeInterpCurve, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchInterpCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeCurve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMin, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMax, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMin, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMax, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeEnveloper, 0x0160);
		}

		// class UFunction : public UStruct
		TEST_METHOD(Class__CoreUObject__Function)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FunctionFlags, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, NumParms, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_ZQ381T7EHI, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ParmsSize, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ReturnValueOffset, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCId, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCResponseId, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FirstPropertyToInit, 0x009E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphFunction, 0x00A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphCallOffset, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_3X8C1JLGP6, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, Func, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFunction, 0x00B8);
		}

		// class UDelegateFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__DelegateFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateFunction, 0x00B8);
		}

		// class USoundNodeGroupControl : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeGroupControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeGroupControl, GroupSizes, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeGroupControl, 0x0048);
		}

		// class UClass : public UStruct
		TEST_METHOD(Class__CoreUObject__Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClass, UnknownData_HTIO, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClass, 0x01F8);
		}

		// class USoundNodeLooping : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeLooping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, LoopCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, UnknownData_J79Q, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeLooping, 0x0040);
		}

		// class UDynamicClass : public UClass
		TEST_METHOD(Class__CoreUObject__DynamicClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicClass, UnknownData_78PU, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicClass, 0x0260);
		}

		// class UPackageMap : public UObject
		TEST_METHOD(Class__CoreUObject__PackageMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMap, UnknownData_NJ6O, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMap, 0x00E0);
		}

		// class USoundNodeMature : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMature)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMature, 0x0038);
		}

		// class UEnum : public UField
		TEST_METHOD(Class__CoreUObject__Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnum, UnknownData_ARJL, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnum, 0x0060);
		}

		// class USoundNodeMixer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMixer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeMixer, InputVolume, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMixer, 0x0048);
		}

		// class UEnumProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__EnumProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnumProperty, UnknownData_JMSU, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnumProperty, 0x0080);
		}

		// class USoundNodeModulator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMin, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMax, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMin, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMax, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulator, 0x0048);
		}

		// class UInterface : public UObject
		TEST_METHOD(Class__CoreUObject__Interface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface, 0x0028);
		}

		// class USoundNodeModulatorContinuous : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulatorContinuous)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, PitchModulationParams, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, VolumeModulationParams, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulatorContinuous, 0x0078);
		}

		// class ULinkerPlaceholderClass : public UClass
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderClass, UnknownData_CXMH, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderClass, 0x0398);
		}

		// class ULinkerPlaceholderExportObject : public UObject
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderExportObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderExportObject, UnknownData_AHNU, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderExportObject, 0x00D8);
		}

		// class USoundNodeOscillator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_QZK6, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMin, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMax, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMin, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMax, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMin, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMax, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMin, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMax, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_2BOI, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeOscillator, 0x0060);
		}

		// class ULinkerPlaceholderFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderFunction, UnknownData_702A, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderFunction, 0x0258);
		}

		// class UMetaData : public UObject
		TEST_METHOD(Class__CoreUObject__MetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetaData, UnknownData_DE67, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetaData, 0x00C8);
		}

		// class UObjectRedirector : public UObject
		TEST_METHOD(Class__CoreUObject__ObjectRedirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectRedirector, UnknownData_B5SI, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectRedirector, 0x0030);
		}

		// class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
		TEST_METHOD(Class__Engine__SoundNodeParamCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeParamCrossFade, ParamName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeParamCrossFade, 0x0050);
		}

		// class UArrayProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__ArrayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrayProperty, UnknownData_EYBY, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrayProperty, 0x0078);
		}

		// class USoundNodeQualityLevel : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeQualityLevel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeQualityLevel, 0x0038);
		}

		// class UBoolProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__BoolProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoolProperty, UnknownData_ZAOI, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolProperty, 0x0078);
		}

		// class USoundNodeRandom : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeRandom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, Weights, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, PreselectAtLevelLoad, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_3ZMA, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, HasBeenUsed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, NumRandomUsed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_7SM9, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeRandom, 0x0068);
		}

		// class UByteProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__ByteProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UByteProperty, UnknownData_JBOH, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UByteProperty, 0x0078);
		}

		// class USoundNodeSoundClass : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, SoundClassOverride, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSoundClass, 0x0040);
		}

		// class USoundNodeSwitch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSwitch, IntParameterName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSwitch, 0x0040);
		}

		// class USoundNodeWaveParam : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeWaveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWaveParam, WaveParameterName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWaveParam, 0x0040);
		}

		// class USoundNodeWavePlayer : public USoundNodeAssetReferencer
		TEST_METHOD(Class__Engine__SoundNodeWavePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWaveAssetPtr, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWave, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, UnknownData_6BC2, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWavePlayer, 0x0070);
		}

		// class USoundWave : public USoundBase
		TEST_METHOD(Class__Engine__SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CompressionQuality, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_FPOX, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, StreamingPriority, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_164R, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SoundGroup, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_DNS9, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SpokenText, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SubtitlePriority, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Volume, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Pitch, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, NumChannels, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, RawPCMDataSize, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Subtitles, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, LocalizedSubtitles, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Curves, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InternalCurves, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_2L6E, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWave, 0x0288);
		}

		// class USoundSourceBus : public USoundWave
		TEST_METHOD(Class__Engine__SoundSourceBus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusChannels, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_GNCR, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusDuration, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_BTE6, 0x0291);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSourceBus, 0x02A0);
		}

		// class USoundSubmix : public UObject
		TEST_METHOD(Class__Engine__SoundSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, ChildSubmixes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, ParentSubmix, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, SubmixEffectChain, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmix, 0x0050);
		}

		// class USoundWaveProcedural : public USoundWave
		TEST_METHOD(Class__Engine__SoundWaveProcedural)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWaveProcedural, UnknownData_PAUO, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWaveProcedural, 0x0320);
		}

		// class ASpectatorPawn : public ADefaultPawn
		TEST_METHOD(Class__Engine__SpectatorPawn)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorPawn, 0x03F0);
		}

		// class USpectatorPawnMovement : public UFloatingPawnMovement
		TEST_METHOD(Class__Engine__SpectatorPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorPawnMovement, UnknownData_XR0N, 0x0191);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorPawnMovement, 0x0198);
		}

		// class ASphereReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__SphereReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASphereReflectionCapture, DrawCaptureRadius, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASphereReflectionCapture, 0x0378);
		}

		// class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__SphereReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, InfluenceRadius, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, CaptureDistanceScale, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, PreviewInfluenceRadius, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereReflectionCaptureComponent, 0x0330);
		}

		// class USplineComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__SplineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineCurves, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineInfo, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineRotInfo, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineScaleInfo, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineReparamTable, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bAllowSplineEditingPerInstance, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_X1SP, 0x0751);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, ReparamStepsPerSegment, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, Duration, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bStationaryEndpoints, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bSplineHasBeenEdited, 0x075D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bModifiedByConstructionScript, 0x075E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bInputSplinePointsToConstructionScript, 0x075F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bDrawDebug, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bClosedLoop, 0x0761);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bLoopPositionOverride, 0x0762);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_OGIB, 0x0763);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, LoopPosition, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, DefaultUpVector, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_X461, 0x0774);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineComponent, 0x0780);
		}

		// class ASplineMeshActor : public AActor
		TEST_METHOD(Class__Engine__SplineMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineMeshActor, SplineMeshComponent, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASplineMeshActor, 0x0370);
		}

		// class USplineMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__SplineMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_3SGU, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineParams, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineUpDir, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_F7V2, 0x078D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, ForwardAxis, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_M6VG, 0x0791);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMin, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMax, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_JO11, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, BodySetup, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, CachedMeshBodySetupGuid, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_LP4V, 0x07B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMeshComponent, 0x07C0);
		}

		// class USpotLightComponent : public UPointLightComponent
		TEST_METHOD(Class__Engine__SpotLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, OuterConeAngle, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, LightShaftConeAngle, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, UnknownData_XELB, 0x03F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpotLightComponent, 0x0400);
		}

		// class USpringArmComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SpringArmComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, TargetArmLength, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, SocketOffset, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, TargetOffset, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeSize, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeChannel, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_3Q0A, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_EB3G, 0x02B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagSpeed, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraRotationLagSpeed, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxTimeStep, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxDistance, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_WMC7, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpringArmComponent, 0x0310);
		}

		// class UStaticMesh : public UObject
		TEST_METHOD(Class__Engine__StaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_3AJZ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, MinLOD, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_58B1, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, Materials, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, StaticMaterials, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightmapUVDensity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapResolution, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapCoordinateIndex, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, DistanceFieldSelfShadowBias, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_FLG9, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, BodySetup, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LODForCollision, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_OR0H, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LpvBiasMultiplier, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, bAllowCPUAccess, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_AKEZ, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, Sockets, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_GF1Y, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, PositiveBoundsExtension, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NegativeBoundsExtension, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ExtendedBounds, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ElementToIgnoreForTexFactor, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, AssetUserData, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NavCollision, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMesh, 0x0138);
		}

		// class UStaticMeshSocket : public UObject
		TEST_METHOD(Class__Engine__StaticMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, UnknownData_HVXK, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, Tag, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSocket, 0x0068);
		}

		// class UStereoLayerComponent : public USceneComponent
		TEST_METHOD(Class__Engine__StereoLayerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_COT6, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Texture, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, LeftTexture, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_L48K, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, QuadSize, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UVRect, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderRadius, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderOverlayArc, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderHeight, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerType, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerShape, 0x02D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_GF0Y, 0x02D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Priority, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_DU5R, 0x02DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerComponent, 0x0330);
		}

		// class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__StereoLayerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerFunctionLibrary, 0x0028);
		}

		// class UStringTable : public UObject
		TEST_METHOD(Class__Engine__StringTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStringTable, UnknownData_LVGM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStringTable, 0x0040);
		}

		// class USubsurfaceProfile : public UObject
		TEST_METHOD(Class__Engine__SubsurfaceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, Settings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, UnknownData_IN0X, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsurfaceProfile, 0x0050);
		}

		// class USubUVAnimation : public UObject
		TEST_METHOD(Class__Engine__SubUVAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubUVTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Horizontal, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Vertical, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, BoundingMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, OpacitySourceMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_JURK, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, AlphaThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_K0Y1, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubUVAnimation, 0x0060);
		}

		// class ATargetPoint : public AActor
		TEST_METHOD(Class__Engine__TargetPoint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATargetPoint, 0x0368);
		}

		// class UTextPropertyTestObject : public UObject
		TEST_METHOD(Class__Engine__TextPropertyTestObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, DefaultedText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, UndefaultedText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, TransientText, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextPropertyTestObject, 0x0070);
		}

		// class ATextRenderActor : public AActor
		TEST_METHOD(Class__Engine__TextRenderActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATextRenderActor, TextRender, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATextRenderActor, 0x0370);
		}

		// class UTextRenderComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__TextRenderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Text, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextMaterial, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Font, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizontalAlignment, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VerticalAlignment, 0x06B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_2JYU, 0x06BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextRenderColor, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, XScale, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, YScale, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, WorldSize, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, InvDefaultSize, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizSpacingAdjust, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VertSpacingAdjust, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_TPB4, 0x06D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextRenderComponent, 0x06E0);
		}

		// class UTexture2DDynamic : public UTexture
		TEST_METHOD(Class__Engine__Texture2DDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_UPVW, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, Format, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_KKOQ, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DDynamic, 0x00E0);
		}

		// class UTextureCube : public UTexture
		TEST_METHOD(Class__Engine__TextureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureCube, UnknownData_9A9Q, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureCube, 0x0120);
		}

		// class UTextureLightProfile : public UTexture2D
		TEST_METHOD(Class__Engine__TextureLightProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, Brightness, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, TextureMultiplier, 0x0114);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLightProfile, 0x0118);
		}

		// class UTextureRenderTargetCube : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTargetCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, SizeX, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, ClearColor, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, OverrideFormat, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, UnknownData_HHY7, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, UnknownData_DLBW, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTargetCube, 0x00F0);
		}

		// class UThumbnailInfo : public UObject
		TEST_METHOD(Class__Engine__ThumbnailInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThumbnailInfo, 0x0028);
		}

		// class UTimelineComponent : public UActorComponent
		TEST_METHOD(Class__Engine__TimelineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, TheTimeline, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, UnknownData_XQON, 0x01D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineComponent, 0x01E0);
		}

		// class UTimelineTemplate : public UObject
		TEST_METHOD(Class__Engine__TimelineTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LengthMode, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UnknownData_5EYA, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UnknownData_CBD5, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, EventTracks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FloatTracks, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VectorTracks, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LinearColorTracks, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, MetaDataArray, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineGuid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineTemplate, 0x0098);
		}

		// class UTireType : public UDataAsset
		TEST_METHOD(Class__Engine__TireType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, FrictionScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, UnknownData_UM13, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireType, 0x0038);
		}

		// class UTouchInterface : public UObject
		TEST_METHOD(Class__Engine__TouchInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, Controls, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActiveOpacity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, InactiveOpacity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilDeactive, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilReset, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActivationDelay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, bPreventRecenter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_2DM8, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, StartupDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_FBKK, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTouchInterface, 0x0058);
		}

		// class ATriggerBase : public AActor
		TEST_METHOD(Class__Engine__TriggerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggerBase, CollisionComponent, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBase, 0x0370);
		}

		// class ATriggerBox : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerBox)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBox, 0x0370);
		}

		// class ATriggerCapsule : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerCapsule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerCapsule, 0x0370);
		}

		// class ATriggerSphere : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerSphere)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerSphere, 0x0370);
		}

		// class ATriggerVolume : public AVolume
		TEST_METHOD(Class__Engine__TriggerVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerVolume, 0x03A0);
		}

		// class UTwitterIntegrationBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__TwitterIntegrationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwitterIntegrationBase, 0x0038);
		}

		// class UUserDefinedEnum : public UEnum
		TEST_METHOD(Class__Engine__UserDefinedEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedEnum, DisplayNameMap, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedEnum, 0x00B0);
		}

		// class UUserInterfaceSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__UserInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, RenderFocusRule, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_BH1G, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HardwareCursors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SoftwareCursors, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, DefaultCursor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, TextEditBeamCursor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CrosshairsCursor, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HandCursor, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandCursor, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandClosedCursor, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SlashedCircleCursor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, ApplicationScale, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleRule, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_VOO8, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClass, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleCurve, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bLoadWidgetsOnDedicatedServer, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_6D65, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CursorClasses, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClassInstance, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRule, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserInterfaceSettings, 0x0248);
		}

		// class UVectorField : public UObject
		TEST_METHOD(Class__Engine__VectorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Bounds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Intensity, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorField, 0x0048);
		}

		// class UVectorFieldAnimated : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldAnimated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, Texture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, ConstructionOp, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_Q4EA, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeX, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeZ, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesX, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesY, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FrameCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FramesPerSecond, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_8CRW, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseField, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseMax, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldAnimated, 0x0088);
		}

		// class UVectorFieldComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__VectorFieldComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, VectorField, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Intensity, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Tightness, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, UnknownData_FDWW, 0x06A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldComponent, 0x06C0);
		}

		// class UVectorFieldStatic : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldStatic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeZ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, UnknownData_UEOL, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldStatic, 0x00D0);
		}

		// class AVectorFieldVolume : public AActor
		TEST_METHOD(Class__Engine__VectorFieldVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVectorFieldVolume, VectorFieldComponent, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVectorFieldVolume, 0x0370);
		}

		// class UVisualLoggerAutomationTests : public UObject
		TEST_METHOD(Class__Engine__VisualLoggerAutomationTests)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerAutomationTests, 0x0028);
		}

		// class UVisualLoggerDebugSnapshotInterface : public UInterface
		TEST_METHOD(Class__Engine__VisualLoggerDebugSnapshotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerDebugSnapshotInterface, 0x0028);
		}

		// class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VisualLoggerKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerKismetLibrary, 0x0028);
		}

		// class UVoiceChannel : public UChannel
		TEST_METHOD(Class__Engine__VoiceChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChannel, UnknownData_U5SG, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceChannel, 0x0078);
		}

		// class AWindDirectionalSource : public AInfo
		TEST_METHOD(Class__Engine__WindDirectionalSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWindDirectionalSource, Component, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWindDirectionalSource, 0x0370);
		}

		// class UWindDirectionalSourceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__WindDirectionalSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Strength, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Speed, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MinGustAmount, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MaxGustAmount, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Radius, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, UnknownData_FW1U, 0x02A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindDirectionalSourceComponent, 0x02B0);
		}

		// class UWorldComposition : public UObject
		TEST_METHOD(Class__Engine__WorldComposition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_MGN1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreaming, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreamingTimeThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bLoadAllTilesDuringCinematic, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bRebaseOriginIn3DSpace, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_WLNW, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, RebaseOriginDistance, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldComposition, 0x0068);
		}

		// class AWorldSettings : public AInfo
		TEST_METHOD(Class__Engine__WorldSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_MYE0, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_VQKK, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZ, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZDamageType, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldGravityZ, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalGravityZ, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultPhysicsVolumeClass, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PhysicsCollisionHandlerClass, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultGameMode, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GameNetworkManagerClass, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PackedLightAndShadowMapTextureSize, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_7T87, 0x03AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultColorScale, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultMaxDistanceFieldOcclusionDistance, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalDistanceFieldViewDistance, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DynamicIndirectShadowsSelfShadowingIntensity, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_UEWQ, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityCellSize, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityAggressiveness, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_9CNB, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_V0Z3, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, LightmassSettings, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultReverbSettings, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultAmbientZoneSettings, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_CTX1, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBaseSoundMix, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldToMeters, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MonoCullingDistance, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BookMarks, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, TimeDilation, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MatineeTimeDilation, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DemoPlayTimeDilation, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinGlobalTimeDilation, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxGlobalTimeDilation, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinUndilatedFrameTime, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxUndilatedFrameTime, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_ZZA3, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, Pauser, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_0AK5, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, ReplicationViewers, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, AssetUserData, 0x0508);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldSettings, 0x0518);
		}

		// class ABOT_Creature_BEAR_C : public ABOT_CreatureBase_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Creature_BEAR__BOT_Creature_BEAR_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_Creature_BEAR_C, UnknownData_27AY, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_Creature_BEAR_C, UberGraphFrame, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABOT_Creature_BEAR_C, 0x0570);
		}

		// class UButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonWidgetStyle, ButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonWidgetStyle, 0x0268);
		}

		// class UCheckBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__CheckBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxWidgetStyle, CheckBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxWidgetStyle, 0x0520);
		}

		// class UComboBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxWidgetStyle, ComboBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxWidgetStyle, 0x03A8);
		}

		// class UComboButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboButtonWidgetStyle, ComboButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboButtonWidgetStyle, 0x0370);
		}

		// class UEditableTextBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBoxWidgetStyle, EditableTextBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBoxWidgetStyle, 0x0758);
		}

		// class UEditableTextWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextWidgetStyle, EditableTextStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextWidgetStyle, 0x0220);
		}

		// class UProgressWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ProgressWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressWidgetStyle, ProgressBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressWidgetStyle, 0x01A0);
		}

		// class UScrollBarWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBarWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBarWidgetStyle, ScrollBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBarWidgetStyle, 0x0470);
		}

		// class UScrollBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxWidgetStyle, ScrollBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxWidgetStyle, 0x0218);
		}

		// class USlateSettings : public UObject
		TEST_METHOD(Class__Slate__SlateSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, bExplicitCanvasChildZOrder, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, UnknownData_3FL6, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateSettings, 0x0030);
		}

		// class USpinBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__SpinBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBoxWidgetStyle, SpinBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBoxWidgetStyle, 0x02C8);
		}

		// class UTextBlockWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__TextBlockWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlockWidgetStyle, TextBlockStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlockWidgetStyle, 0x01F8);
		}

		// class USURV_Inventory_ModsSlot_C : public UZ_Inventory_Slot_ROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__SURV_Inventory_ModsSlot__SURV_Inventory_ModsSlot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_ModsSlot_C, UberGraphFrame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_ModsSlot_C, UpdateAmmoAnim, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_ModsSlot_C, BlockDrop, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_ModsSlot_C, CanDrop, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_ModsSlot_C, Fon, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_ModsSlot_C, Icon, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_ModsSlot_C, On_Drag, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_ModsSlot_C, Overlay_1, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_ModsSlot_C, ScaleBox_1, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_ModsSlot_C, TypeName, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_ModsSlot_C, WeapInfo, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USURV_Inventory_ModsSlot_C, 0x0400);
		}

		// class UCv2_DestroyComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__Cv2_DestroyComponent__Cv2_DestroyComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_DestroyComponent_C, UberGraphFrame, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_DestroyComponent_C, PlayerPawn, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_DestroyComponent_C, PlayerActor, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCv2_DestroyComponent_C, 0x0108);
		}

		// class UEnvQueryNode : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, VerNum, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, UnknownData_S0K6, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryNode, 0x0030);
		}

		// class UEnvQueryTest : public UEnvQueryNode
		TEST_METHOD(Class__AIModule__EnvQueryTest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestPurpose, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_46CT, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestComment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextFilterOp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextScoreOp, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FilterType, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_9AXB, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, BoolValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMin, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMax, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_QEJK, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringEquation, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMinType, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMaxType, 0x00E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, NormalizationType, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_IJR2, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMin, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMax, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringFactor, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ReferenceValue, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, bDefineReferenceValue, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_4RLR, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_Y4A6, 0x01B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest, 0x01C0);
		}

		// class UEnvQueryTest_Pathfinding : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Pathfinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, TestMode, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, UnknownData_FEOA, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, Context, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, PathFromContext, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, SkipUnreachable, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, FilterClass, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Pathfinding, 0x0238);
		}

		// class UEnvQueryTest_PathfindingBatch : public UEnvQueryTest_Pathfinding
		TEST_METHOD(Class__AIModule__EnvQueryTest_PathfindingBatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_PathfindingBatch, ScanRangeMultiplier, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_PathfindingBatch, 0x0268);
		}

		// class UEnvQueryTest_Project : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Project)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Project, ProjectionData, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Project, 0x01F0);
		}

		// class UEnvQueryTest_Random : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Random)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Random, 0x01C0);
		}

		// class UEnvQueryTest_Trace : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Trace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceData, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceFromContext, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ItemHeightOffset, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ContextHeightOffset, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, Context, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Trace, 0x0288);
		}

		// class UEnvQueryTypes : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTypes, 0x0028);
		}

		// class UEQSQueryResultSourceInterface : public UInterface
		TEST_METHOD(Class__AIModule__EQSQueryResultSourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSQueryResultSourceInterface, 0x0028);
		}

		// class UEQSRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__AIModule__EQSRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSRenderingComponent, UnknownData_38XB, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSRenderingComponent, 0x06D0);
		}

		// class AEQSTestingPawn : public ACharacter
		TEST_METHOD(Class__AIModule__EQSTestingPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_PK7P, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryTemplate, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryParams, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryConfig, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, TimeLimitPerStep, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, StepToDebugDraw, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, HighlightMode, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_X052, 0x07B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_G93A, 0x07BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryingMode, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_4CMC, 0x07C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEQSTestingPawn, 0x07F0);
		}

		// class UGenericTeamAgentInterface : public UInterface
		TEST_METHOD(Class__AIModule__GenericTeamAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericTeamAgentInterface, 0x0028);
		}

		// class AAIController : public AController
		TEST_METHOD(Class__AIModule__AIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_UGM7, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_N1YW, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PathFollowingComponent, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, BrainComponent, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PerceptionComponent, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ActionsComp, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, Blackboard, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, CachedGameplayTasksComponent, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, DefaultNavigationFilterClass, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ReceiveMoveCompleted, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_MAUO, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController, 0x0460);
		}

		// class AGridPathAIController : public AAIController
		TEST_METHOD(Class__AIModule__GridPathAIController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGridPathAIController, 0x0460);
		}

		// class UPathFollowingComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_4R4P, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MovementComp, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_MACR, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MyNavData, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_LKPH, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingComponent, 0x03A8);
		}

		// class UGridPathFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__AIModule__GridPathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, GridManager, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, UnknownData_SSDQ, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPathFollowingComponent, 0x03E0);
		}

		// class UNavFilter_AIControllerDefault : public UNavigationQueryFilter
		TEST_METHOD(Class__AIModule__NavFilter_AIControllerDefault)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavFilter_AIControllerDefault, 0x0048);
		}

		// class UNavLocalGridManager : public UObject
		TEST_METHOD(Class__AIModule__NavLocalGridManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLocalGridManager, UnknownData_73PM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLocalGridManager, 0x0058);
		}

		// class UPawnAction : public UObject
		TEST_METHOD(Class__AIModule__PawnAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ChildAction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ParentAction, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, OwnerComponent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, Instigator, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, BrainComp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_M06I, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_C65E, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction, 0x00D0);
		}

		// class UPawnAction_BlueprintBase : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_BlueprintBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_BlueprintBase, 0x00D0);
		}

		// class UPawnAction_Move : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Move)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalActor, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalLocation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, AcceptableRadius, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, FilterClass, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, UnknownData_BY1W, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Move, 0x0120);
		}

		// class UPawnAction_Repeat : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Repeat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ActionToRepeat, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, RecentActionCopy, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ChildFailureHandlingMode, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, UnknownData_LBHO, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Repeat, 0x00F0);
		}

		// class UPawnAction_Sequence : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Sequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ActionSequence, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ChildFailureHandlingMode, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_VQNU, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, RecentActionCopy, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_C1GL, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Sequence, 0x0100);
		}

		// class UPawnAction_Wait : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Wait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, TimeToWait, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, UnknownData_YWCE, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Wait, 0x00E0);
		}

		// class UPawnActionsComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PawnActionsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ControlledPawn, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionStacks, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionEvents, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, CurrentAction, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, UnknownData_CM9T, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnActionsComponent, 0x0128);
		}

		// class UPawnSensingComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PawnSensingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingThreshold, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, LOSHearingThreshold, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SightRadius, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SensingInterval, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingMaxSoundAge, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, UnknownData_UHP1, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnSeePawn, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnHearNoise, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionAngle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionCosine, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnSensingComponent, 0x0138);
		}

		// class AFurniture2_09_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture2_09_Rig__Furniture2_09_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture2_09_Rig_C, 0x03C2);
		}

		// class UVisualLoggerExtension : public UObject
		TEST_METHOD(Class__AIModule__VisualLoggerExtension)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerExtension, 0x0028);
		}

		// class UAIAsyncTaskBlueprintProxy : public UObject
		TEST_METHOD(Class__AIModule__AIAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnFail, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, UnknownData_QZKK, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIAsyncTaskBlueprintProxy, 0x0068);
		}

		// class UAIBlueprintHelperLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AIModule__AIBlueprintHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIBlueprintHelperLibrary, 0x0028);
		}

		// class UAIDataProvider : public UObject
		TEST_METHOD(Class__AIModule__AIDataProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider, 0x0028);
		}

		// class UAIDataProvider_QueryParams : public UAIDataProvider
		TEST_METHOD(Class__AIModule__AIDataProvider_QueryParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, ParamName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, FloatValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, IntValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, BoolValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, UnknownData_NJ7V, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_QueryParams, 0x0040);
		}

		// class UAIDataProvider_Random : public UAIDataProvider_QueryParams
		TEST_METHOD(Class__AIModule__AIDataProvider_Random)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, Max, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, UnknownData_9CRZ, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_Random, 0x0050);
		}

		// class UAIHotSpotManager : public UObject
		TEST_METHOD(Class__AIModule__AIHotSpotManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIHotSpotManager, 0x0028);
		}

		// class UAIPerceptionComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__AIPerceptionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, SensesConfig, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, DominantSense, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_WYQ1, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, AIOwner, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_08KO, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnPerceptionUpdated, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnTargetPerceptionUpdated, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_CIZA, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionComponent, 0x01C8);
		}

		// class UAIPerceptionListenerInterface : public UInterface
		TEST_METHOD(Class__AIModule__AIPerceptionListenerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionListenerInterface, 0x0028);
		}

		// class UAIPerceptionStimuliSourceComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__AIPerceptionStimuliSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, UnknownData_XJQ6, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, RegisterAsSourceForSenses, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionStimuliSourceComponent, 0x0108);
		}

		// class UAIPerceptionSystem : public UObject
		TEST_METHOD(Class__AIModule__AIPerceptionSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_U6D1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, Senses, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, PerceptionAgingRate, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_RPPW, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionSystem, 0x0130);
		}

		// class UAIResourceInterface : public UInterface
		TEST_METHOD(Class__AIModule__AIResourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResourceInterface, 0x0028);
		}

		// class UAIResource_Movement : public UGameplayTaskResource
		TEST_METHOD(Class__AIModule__AIResource_Movement)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Movement, 0x0038);
		}

		// class UAIResource_Logic : public UGameplayTaskResource
		TEST_METHOD(Class__AIModule__AIResource_Logic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Logic, 0x0038);
		}

		// class UAISense : public UObject
		TEST_METHOD(Class__AIModule__AISense)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, DefaultExpirationAge, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, NotifyType, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_1B1J, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_5IZA, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, PerceptionSystemInstance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_5GHK, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense, 0x0120);
		}

		// class UAISense_Blueprint : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerDataType, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerContainer, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, UnprocessedEvents, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, UnknownData_S7M4, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Blueprint, 0x0150);
		}

		// class UAISense_Damage : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Damage, RegisteredEvents, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Damage, 0x0130);
		}

		// class UAISense_Hearing : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, NoiseEvents, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, SpeedOfSoundSq, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, UnknownData_JZ3N, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Hearing, 0x0190);
		}

		// class UAISense_Prediction : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Prediction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Prediction, RegisteredEvents, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Prediction, 0x0130);
		}

		// class UAISense_Sight : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Sight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_LA88, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTracesPerTick, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MinQueriesPerTimeSliceCheck, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTimeSlicePerTick, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, HighImportanceQueryDistanceThreshold, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_CRU9, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxQueryImportance, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, SightLimitQueryImportance, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_GNZH, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Sight, 0x0200);
		}

		// class UAISense_Team : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Team)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Team, RegisteredEvents, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Team, 0x0130);
		}

		// class UAISense_Touch : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Touch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Touch, RegisteredEvents, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Touch, 0x0130);
		}

		// class UAISenseBlueprintListener : public UUserDefinedStruct
		TEST_METHOD(Class__AIModule__AISenseBlueprintListener)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseBlueprintListener, 0x00A8);
		}

		// class UAISenseConfig : public UObject
		TEST_METHOD(Class__AIModule__AISenseConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, DebugColor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, MaxAge, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, UnknownData_ZPQ1, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig, 0x0048);
		}

		// class UAISenseConfig_Blueprint : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Blueprint, Implementation, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Blueprint, 0x0050);
		}

		// class UAISenseConfig_Damage : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Damage, Implementation, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Damage, 0x0050);
		}

		// class UAISenseConfig_Hearing : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, Implementation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, HearingRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, LoSHearingRange, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, UnknownData_C2T9, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, DetectionByAffiliation, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Hearing, 0x0060);
		}

		// class UAISenseConfig_Prediction : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Prediction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Prediction, 0x0048);
		}

		// class UAISenseConfig_Sight : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Sight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, Implementation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, SightRadius, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, LoseSightRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, PeripheralVisionAngleDegrees, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, DetectionByAffiliation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, AutoSuccessRangeFromLastSeenLocation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, UnknownData_RRMP, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Sight, 0x0068);
		}

		// class UAISenseConfig_Team : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Team)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Team, 0x0048);
		}

		// class UAISenseConfig_Touch : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Touch)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Touch, 0x0048);
		}

		// class UAISenseEvent : public UObject
		TEST_METHOD(Class__AIModule__AISenseEvent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent, 0x0028);
		}

		// class UAISenseEvent_Damage : public UAISenseEvent
		TEST_METHOD(Class__AIModule__AISenseEvent_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Damage, Event, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Damage, 0x0058);
		}

		// class UAISenseEvent_Hearing : public UAISenseEvent
		TEST_METHOD(Class__AIModule__AISenseEvent_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Hearing, Event, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Hearing, 0x0058);
		}

		// class UAISightTargetInterface : public UInterface
		TEST_METHOD(Class__AIModule__AISightTargetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISightTargetInterface, 0x0028);
		}

		// class UAISystem : public UAISystemBase
		TEST_METHOD(Class__AIModule__AISystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystemClassName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManagerClassName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AcceptanceRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingRegularPathPointAcceptanceRadius, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingNavLinkAcceptanceRadius, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bFinishMoveOnGoalOverlap, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAcceptPartialPaths, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowStrafing, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableBTAITasks, 0x008F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowControllersAsEQSQuerier, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableDebuggerPlugin, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, DefaultSightCollisionChannel, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_DV1B, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, BehaviorTreeManager, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, EnvironmentQueryManager, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystem, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AllProxyObjects, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManager, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, NavLocalGrids, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_B65G, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystem, 0x0128);
		}

		// class UAITask : public UGameplayTask
		TEST_METHOD(Class__AIModule__AITask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask, OwnerController, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask, 0x0070);
		}

		// class UAITask_LockLogic : public UAITask
		TEST_METHOD(Class__AIModule__AITask_LockLogic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_LockLogic, 0x0070);
		}

		// class UAITask_MoveTo : public UAITask
		TEST_METHOD(Class__AIModule__AITask_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnRequestFailed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnMoveFinished, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, MoveRequest, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, UnknownData_T4NX, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_MoveTo, 0x0110);
		}

		// class UAITask_RunEQS : public UAITask
		TEST_METHOD(Class__AIModule__AITask_RunEQS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_RunEQS, UnknownData_5FVU, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_RunEQS, 0x0150);
		}

		// class UBehaviorTree : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootNode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, BlackboardAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecorators, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecoratorOps, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, UnknownData_BD5I, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTree, 0x0060);
		}

		// class UBrainComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__BrainComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_U3VH, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, BlackboardComp, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, AIOwner, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_O54U, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrainComponent, 0x0150);
		}

		// class UBehaviorTreeComponent : public UBrainComponent
		TEST_METHOD(Class__AIModule__BehaviorTreeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_533W, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, NodeInstances, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_WT21, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeComponent, 0x0288);
		}

		// class UBehaviorTreeManager : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTreeManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, MaxDebuggerSteps, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, UnknownData_E9XN, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, LoadedTemplates, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, ActiveComponents, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeManager, 0x0050);
		}

		// class UBehaviorTreeTypes : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTreeTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeTypes, 0x0028);
		}

		// class UBlackboardComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__BlackboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BrainComp, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BlackboardAsset, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_78HS, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, KeyInstances, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_RIS6, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardComponent, 0x01E8);
		}

		// class UBlackboardData : public UDataAsset
		TEST_METHOD(Class__AIModule__BlackboardData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Parent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Keys, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, UnknownData_0Y3Q, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardData, 0x0050);
		}

		// class UBlackboardKeyType : public UObject
		TEST_METHOD(Class__AIModule__BlackboardKeyType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType, UnknownData_TIBE, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType, 0x0030);
		}

		// class UBlackboardKeyType_Bool : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Bool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Bool, 0x0030);
		}

		// class UBlackboardKeyType_Class : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Class, BaseClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Class, 0x0038);
		}

		// class UBlackboardKeyType_Enum : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, UnknownData_8NSH, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Enum, 0x0050);
		}

		// class AShoting_Target_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Shoting_Target__Shoting_Target_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AShoting_Target_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShoting_Target_C, Widget, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShoting_Target_C, Sphere, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShoting_Target_C, Shooting_Target, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShoting_Target_C, DefaultSceneRoot, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShoting_Target_C, Timeline_1_1_E659247949A6C3439BBCBC9E84E3A846, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShoting_Target_C, Timeline_1__Direction_E659247949A6C3439BBCBC9E84E3A846, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShoting_Target_C, UnknownData_5EPE, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShoting_Target_C, Timeline_2, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShoting_Target_C, Timeline_0_1_10D555F04CE527776D0097968437D44D, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShoting_Target_C, Timeline_0__Direction_10D555F04CE527776D0097968437D44D, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShoting_Target_C, UnknownData_MQVZ, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShoting_Target_C, Timeline_1, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShoting_Target_C, is_rotation_now, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShoting_Target_C, UnknownData_KAD3, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShoting_Target_C, Location, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AShoting_Target_C, DistanceToCenter, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShoting_Target_C, 0x03C4);
		}

		// class UBlackboardKeyType_Float : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Float)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Float, 0x0030);
		}

		// class UBlackboardKeyType_Int : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Int)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Int, 0x0030);
		}

		// class UBlackboardKeyType_Name : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Name)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Name, 0x0030);
		}

		// class UBlackboardKeyType_NativeEnum : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_NativeEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumType, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_NativeEnum, 0x0048);
		}

		// class UBlackboardKeyType_Object : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Object)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Object, BaseClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Object, 0x0038);
		}

		// class UChooseOfSideBASE_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ChooseOfSideBASE__ChooseOfSideBASE_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, ShowSolder, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, ShopButton, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, TurbineActor, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, TextColor, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, AhtungTable, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, ALLIES_Button, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, AlliesMaxPlayer, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, AlliesText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, ALLIESVB, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, AXIS_Button, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, AXIS_VB, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, AxisMaxPlayers, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, AxisText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, BottmPanel, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Bottom, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, British, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Button_Left, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Button_Right, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, CharacterList, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, ChoseOfSidePlayerString, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, ChoseOfSidePlayerString_3, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, ChoseOfSidePlayerString_4, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, ChoseOfSidePlayerString_5, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, ChoseOfSidePlayerString_6, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, ChoseOfSidePlayerString_7, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, ChoseOfSidePlayerString_52, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, ClassName, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, DLSLock, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, German, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Header, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Hint, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Image_1, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Image_2, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Image_3, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Image_4, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Image_11, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Image_26, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Image_34, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Image_60, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Image_68, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Image_115, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, InventoryBackPackCard, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, InventoryBackPackCard_1, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, InventoryBackPackCard_22, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, InventoryBackPackCard_52, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, InventoryBackPackCard_53, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, InventoryBackPackCard_54, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Japan, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Leftfon, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, LeftPanel, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Line, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, MainFon, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Maleico, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, MaleName, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, MyRancIcon, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, PlayerName, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, PrymaryIco, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, PrymaryName, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Rank, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, RankIcon, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, RankLock, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, RenderBorder, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, RenderWidget, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, RightBorder, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Rightfon, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, RightPanel, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Secondaryico, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, SecondaryName, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, SelectSpawnWidgetPortable, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, ShowSloder, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, ShowWeapon, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, SideVB, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, SlotFon, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, SlotFon2, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Smoke, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, StartBattleText, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, StartButton, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, StoreButton, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, TextBlock_6, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, TextBlock_7, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, TextBlock_11, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, TextBlock_12, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, TextBlock_17, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, TextBlock_18, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Time, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Top, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, USA, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Ussr, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, RenderActor, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, CurentIndexAllies, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, MaxIndex, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, DopLootSlotsArray, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, ProxySide, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, UnknownData_1MWS, 0x04E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, ClassNameText, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, SelectTeamTimer, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Axiescount, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Alliescount, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, CurentIndexAxis, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, UnknownData_79OY, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, CurrentCharacter, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, LockByDLS, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, LockByRank, 0x0591);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, UnknownData_RXMR, 0x0592);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, currentRank, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, GermanNation, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, SovietNation, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, USA_Nation, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, Japan_Array, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, BritishArray, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, ProxyNation, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, UnknownData_PE4D, 0x05E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, CurentIndexGerman, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, CurentIndexUSA, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, CurentIndexUSSR, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, CurentIndexBritish, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, CurentIndexJapan, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, IsSideChoosed, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, UnknownData_5FYK, 0x0601);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, BaseTimerTime, 0x0604);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, CharListStrings, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, SelectedString, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, ProxySpawnActor, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, MaxPlayers, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, UnknownData_Y92K, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, ChecktimeBlock, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, DeserterArray, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChooseOfSideBASE_C, CurentIndexDeserter, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChooseOfSideBASE_C, 0x064C);
		}

		// class UBlackboardKeyType_Rotator : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Rotator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Rotator, 0x0030);
		}

		// class UBlackboardKeyType_String : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_String)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_String, StringValue, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_String, 0x0040);
		}

		// class UBlackboardKeyType_Vector : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Vector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Vector, 0x0030);
		}

		// class UBTNode : public UObject
		TEST_METHOD(Class__AIModule__BTNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_K977, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, NodeName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, TreeAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, ParentNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_NFCA, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTNode, 0x0058);
		}

		// class UBTAuxiliaryNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTAuxiliaryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTAuxiliaryNode, UnknownData_YSJH, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTAuxiliaryNode, 0x0060);
		}

		// class UBTCompositeNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTCompositeNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Children, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Services, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_32J1, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTCompositeNode, 0x00D0);
		}

		// class UBTComposite_Selector : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_Selector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Selector, 0x00D0);
		}

		// class UBTComposite_Sequence : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_Sequence)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Sequence, 0x00D0);
		}

		// class UBTComposite_SimpleParallel : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_SimpleParallel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_SimpleParallel, 0x00D0);
		}

		// class UBTDecorator : public UBTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_0980, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, FlowAbortMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_UPZB, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator, 0x0068);
		}

		// class UBTDecorator_BlackboardBase : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlackboardBase, BlackboardKey, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlackboardBase, 0x0090);
		}

		// class UBTDecorator_Blackboard : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_Blackboard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, IntValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, FloatValue, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, StringValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, CachedDescription, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, OperationType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, NotifyObserver, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, UnknownData_WRXC, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Blackboard, 0x00C0);
		}

		// class UBTDecorator_BlueprintBase : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, AIOwner, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ActorOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ObservedKeyNames, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_NGFB, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_4JKU, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlueprintBase, 0x00A0);
		}

		// class UBTDecorator_CheckGameplayTagsOnActor : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_CheckGameplayTagsOnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, ActorToCheck, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, TagsToMatch, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, UnknownData_CMPM, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, GameplayTags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, CachedDescription, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CheckGameplayTagsOnActor, 0x00C8);
		}

		// class UBTDecorator_CompareBBEntries : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_CompareBBEntries)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, Operator, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, UnknownData_OQM2, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyB, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CompareBBEntries, 0x00C0);
		}

		// class UBTDecorator_ConditionalLoop : public UBTDecorator_Blackboard
		TEST_METHOD(Class__AIModule__BTDecorator_ConditionalLoop)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConditionalLoop, 0x00C0);
		}

		// class UBTDecorator_ConeCheck : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ConeCheck)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeHalfAngle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_F93U, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeOrigin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeDirection, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, Observed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_Z73D, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConeCheck, 0x00F0);
		}

		// class UBTDecorator_Cooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_Cooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, CoolDownTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, UnknownData_UKN8, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Cooldown, 0x0070);
		}

		// class UBTDecorator_DoesPathExist : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_DoesPathExist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyB, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_ZZGX, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, PathQueryType, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_1IN3, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, FilterClass, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_DoesPathExist, 0x00C8);
		}

		// class UBTDecorator_ForceSuccess : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ForceSuccess)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ForceSuccess, 0x0068);
		}

		// class UBTDecorator_IsAtLocation : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_IsAtLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, AcceptableRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_367O, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, ParametrizedAcceptableRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, GeometricDistanceType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_JSPD, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_HXJR, 0x00CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsAtLocation, 0x00D0);
		}

		// class UBTDecorator_IsBBEntryOfClass : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_IsBBEntryOfClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsBBEntryOfClass, TestClass, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsBBEntryOfClass, 0x0098);
		}

		// class UBTDecorator_KeepInCone : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_KeepInCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeHalfAngle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_H2M7, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeOrigin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, Observed, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_8JA2, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_KeepInCone, 0x00C8);
		}

		// class UBTDecorator_Loop : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_Loop)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, NumLoops, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, bInfiniteLoop, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_56IR, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, InfiniteLoopTimeoutTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_F3M8, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Loop, 0x0078);
		}

		// class UBTDecorator_ReachedMoveGoal : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ReachedMoveGoal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ReachedMoveGoal, 0x0068);
		}

		// class UBTDecorator_SetTagCooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_SetTagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownTag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, bAddToExistingDuration, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, UnknownData_MN2V, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_SetTagCooldown, 0x0078);
		}

		// class UBTDecorator_TagCooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_TagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownTag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bAddToExistingDuration, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bActivatesCooldown, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, UnknownData_X344, 0x0076);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TagCooldown, 0x0078);
		}

		// class UBTDecorator_TimeLimit : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_TimeLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, TimeLimit, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, UnknownData_L8TX, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TimeLimit, 0x0070);
		}

		// class UBTFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AIModule__BTFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTFunctionLibrary, 0x0028);
		}

		// class UBTService : public UBTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTService)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, Interval, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, RandomDeviation, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, UnknownData_M4W5, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService, 0x0070);
		}

		// class UBTService_BlackboardBase : public UBTService
		TEST_METHOD(Class__AIModule__BTService_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlackboardBase, BlackboardKey, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlackboardBase, 0x0098);
		}

		// class UBTService_BlueprintBase : public UBTService
		TEST_METHOD(Class__AIModule__BTService_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, AIOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, ActorOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_J7RO, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_K7G6, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlueprintBase, 0x0098);
		}

		// class UBTService_DefaultFocus : public UBTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_DefaultFocus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, FocusPriority, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, UnknownData_YDRO, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_DefaultFocus, 0x00A0);
		}

		// class UBTService_RunEQS : public UBTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_RunEQS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, EQSRequest, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, UnknownData_JJTI, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_RunEQS, 0x0120);
		}

		// class UBTTaskNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTTaskNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, Services, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, UnknownData_33DL, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTaskNode, 0x0070);
		}

		// class UBTTask_BlackboardBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlackboardBase, BlackboardKey, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlackboardBase, 0x0098);
		}

		// class UBTTask_BlueprintBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, AIOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, ActorOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_GODA, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_LZLW, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlueprintBase, 0x00A0);
		}

		// class UBTTask_GameplayTaskBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_GameplayTaskBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_GameplayTaskBase, UnknownData_5TVU, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_GameplayTaskBase, 0x0078);
		}

		// class UBTTask_MakeNoise : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_MakeNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, Loudnes, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, UnknownData_KNUK, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MakeNoise, 0x0078);
		}

		// class UBTTask_MoveTo : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, AcceptableRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_4MC5, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, FilterClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, ObservedBlackboardValueTolerance, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_2S52, 0x00AE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveTo, 0x00B0);
		}

		// class UBTTask_MoveDirectlyToward : public UBTTask_MoveTo
		TEST_METHOD(Class__AIModule__BTTask_MoveDirectlyToward)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveDirectlyToward, UnknownData_BTSQ, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveDirectlyToward, 0x00B8);
		}

		// class UBTTask_PawnActionBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PawnActionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PawnActionBase, 0x0070);
		}

		// class UBTTask_PlayAnimation : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PlayAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, AnimationToPlay, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_I2AD, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, MyOwnerComp, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, CachedSkelMesh, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_6QFO, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlayAnimation, 0x00F0);
		}

		// class UBTTask_PlaySound : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PlaySound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlaySound, SoundToPlay, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlaySound, 0x0078);
		}

		// class UBTTask_PushPawnAction : public UBTTask_PawnActionBase
		TEST_METHOD(Class__AIModule__BTTask_PushPawnAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PushPawnAction, Action, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PushPawnAction, 0x0078);
		}

		// class UBTTask_RotateToFaceBBEntry : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_RotateToFaceBBEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, Precision, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, UnknownData_MURL, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RotateToFaceBBEntry, 0x00A0);
		}

		// class UBTTask_RunBehavior : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_RunBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehavior, BehaviorAsset, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehavior, 0x0078);
		}

		// class UBTTask_RunBehaviorDynamic : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_RunBehaviorDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, InjectionTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, DefaultBehaviorAsset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, BehaviorAsset, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehaviorDynamic, 0x0088);
		}

		// class UBTTask_RunEQSQuery : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_RunEQSQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryTemplate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryParams, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, RunMode, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_5F33, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSQueryBlackboardKey, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, bUseBBKey, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_X4FE, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSRequest, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_PH5C, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunEQSQuery, 0x0180);
		}

		// class UBTTask_SetTagCooldown : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_SetTagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, bAddToExistingDuration, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, UnknownData_D6SB, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownDuration, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SetTagCooldown, 0x0080);
		}

		// class UBTTask_Wait : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_Wait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, WaitTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, RandomDeviation, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Wait, 0x0078);
		}

		// class UBTTask_WaitBlackboardTime : public UBTTask_Wait
		TEST_METHOD(Class__AIModule__BTTask_WaitBlackboardTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_WaitBlackboardTime, BlackboardKey, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_WaitBlackboardTime, 0x00A0);
		}

		// class UCrowdAgentInterface : public UInterface
		TEST_METHOD(Class__AIModule__CrowdAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdAgentInterface, 0x0028);
		}

		// class UCrowdFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__AIModule__CrowdFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_GAZJ, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, CrowdAgentMoveDirection, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_1J0C, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, CharacterMovement, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, AvoidanceGroup, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, GroupsToAvoid, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, GroupsToIgnore, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_S2TA, 0x03D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdFollowingComponent, 0x0400);
		}

		// class UCrowdManager : public UCrowdManagerBase
		TEST_METHOD(Class__AIModule__CrowdManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MyNavData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, AvoidanceConfig, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SamplingPatterns, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgents, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgentRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedAgents, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedWalls, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, NavmeshCheckInterval, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOptimizationInterval, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SeparationDirClamp, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOffsetRadiusMultiplier, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, UnknownData_WW7K, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManager, 0x00F0);
		}

		// class ADetourCrowdAIController : public AAIController
		TEST_METHOD(Class__AIModule__DetourCrowdAIController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADetourCrowdAIController, 0x0460);
		}

		// class UEnvQuery : public UDataAsset
		TEST_METHOD(Class__AIModule__EnvQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, QueryName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, Options, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQuery, 0x0048);
		}

		// class UEnvQueryContext : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryContext)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext, 0x0028);
		}

		// class UEnvQueryContext_BlueprintBase : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryContext_BlueprintBase, UnknownData_TWT5, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_BlueprintBase, 0x0030);
		}

		// class UEnvQueryContext_Item : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_Item)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Item, 0x0028);
		}

		// class UEnvQueryContext_Querier : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_Querier)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Querier, 0x0028);
		}

		// class UEnvQueryDebugHelpers : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryDebugHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryDebugHelpers, 0x0028);
		}

		// class UEnvQueryGenerator : public UEnvQueryNode
		TEST_METHOD(Class__AIModule__EnvQueryGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, OptionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, ItemType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, UnknownData_YCBL, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator, 0x0050);
		}

		// class UEnvQueryGenerator_ActorsOfClass : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ActorsOfClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchedActorClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, GenerateOnlyActorsInRadius, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchRadius, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchCenter, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ActorsOfClass, 0x00C0);
		}

		// class UEnvQueryGenerator_BlueprintBase : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratorsActionDescription, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, Context, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratedItemType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, UnknownData_4E49, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_BlueprintBase, 0x0080);
		}

		// class UEnvQueryGenerator_Composite : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Composite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, Generators, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, UnknownData_VHKQ, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, ForcedItemType, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Composite, 0x0070);
		}

		// class UEnvQueryGenerator_ProjectedPoints : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ProjectedPoints)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ProjectedPoints, ProjectionData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ProjectedPoints, 0x0080);
		}

		// class UEnvQueryGenerator_Cone : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Cone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AlignedPointsDistance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, ConeDegrees, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AngleStep, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, Range, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, CenterActor, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, UnknownData_3LI4, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Cone, 0x0150);
		}

		// class UEnvQueryGenerator_CurrentLocation : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_CurrentLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_CurrentLocation, QueryContext, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_CurrentLocation, 0x0058);
		}

		// class UEnvQueryGenerator_Donut : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Donut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, InnerRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, OuterRadius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, NumberOfRings, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, PointsPerRing, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcDirection, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcAngle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, bUseSpiralPattern, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_2DTT, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, Center, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_SPEQ, 0x01A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Donut, 0x01A8);
		}

		// class UEnvQueryGenerator_OnCircle : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_OnCircle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, SpaceBetween, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, NumberOfPoints, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, PointOnCircleSpacingMethod, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_50A8, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcDirection, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcAngle, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, AngleRadians, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_9X8Y, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenter, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, bIgnoreAnyContextActorsWhenGeneratingCircle, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_S6ZQ, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenterZOffset, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, TraceData, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_VKWF, 0x01E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_OnCircle, 0x01E8);
		}

		// class UEnvQueryGenerator_SimpleGrid : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_SimpleGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GridSize, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, SpaceBetween, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GenerateAround, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_SimpleGrid, 0x00E8);
		}

		// class UEnvQueryGenerator_PathingGrid : public UEnvQueryGenerator_SimpleGrid
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_PathingGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, PathToItem, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, NavigationFilter, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, ScanRangeMultiplier, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_PathingGrid, 0x0150);
		}

		// class UEnvQueryInstanceBlueprintWrapper : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryInstanceBlueprintWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_RB3R, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, QueryID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_X10V, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, ItemType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OptionIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_FPPV, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OnQueryFinishedEvent, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryInstanceBlueprintWrapper, 0x0078);
		}

		// class UEnvQueryItemType : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryItemType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryItemType, UnknownData_FGXW, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType, 0x0030);
		}

		// class UEnvQueryItemType_VectorBase : public UEnvQueryItemType
		TEST_METHOD(Class__AIModule__EnvQueryItemType_VectorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_VectorBase, 0x0030);
		}

		// class UEnvQueryItemType_ActorBase : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_ActorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_ActorBase, 0x0030);
		}

		// class UEnvQueryItemType_Actor : public UEnvQueryItemType_ActorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Actor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Actor, 0x0030);
		}

		// class UEnvQueryItemType_Direction : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Direction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Direction, 0x0030);
		}

		// class UEnvQueryItemType_Point : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Point)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Point, 0x0030);
		}

		// class UEnvQueryManager : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_OS4C, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, InstanceCache, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, LocalContexts, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, GCShieldedWrappers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_IYVQ, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, MaxAllowedTestingTime, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, bTestQueriesUsingBreadth, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_099P, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningThreshold, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningInterval, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryManager, 0x0138);
		}

		// class UEnvQueryOption : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryOption)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, generator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Tests, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryOption, 0x0040);
		}

		// class UEnvQueryTest_Distance : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Distance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, TestMode, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, UnknownData_IMTM, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, DistanceTo, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Distance, 0x01D0);
		}

		// class UEnvQueryTest_Dot : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Dot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineA, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineB, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, TestMode, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, bAbsoluteValue, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, UnknownData_JDCD, 0x0202);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Dot, 0x0208);
		}

		// class UEnvQueryTest_GameplayTags : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_GameplayTags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagQueryToMatch, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, bUpdatedToUseQuery, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagsToMatch, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, UnknownData_2LQR, 0x020A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, GameplayTags, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_GameplayTags, 0x0230);
		}

		// class UEnvQueryTest_Overlap : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Overlap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Overlap, OverlapData, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Overlap, 0x01E0);
		}

		// class ACv2_BulletTracer_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv2_BulletTracer__Cv2_BulletTracer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BulletTracer_C, Cube, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BulletTracer_C, ProjectileMovement, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BulletTracer_C, DefaultSceneRoot, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_BulletTracer_C, 0x0380);
		}

		// class UZ_InventoryCraftMainCard_C : public UInventorySlotsRoot_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Z_InventoryCraftMainCard__Z_InventoryCraftMainCard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, UnknownData_F551, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, Hover, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, Button_Craft, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, DLS_Lock, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, Fon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, Header, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, HoverImage, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, Ico, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, Image_1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, Image_2, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, Image_4, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, PercentText, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, ProgressBar_1, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, RANK_Lock, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, RankICO, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, SelectedImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, SizeBox_1, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, HeaderText, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, Texture, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, IsEmpty, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, UnknownData_PH6K, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, LootType, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, LootIndex, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, UnknownData_1HE5, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, Root, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, Percent, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, NewVar_0_1, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, PreviousSelect, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, MouseDownOnce, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, RealCraftEnum, 0x031D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, LockByRank, 0x031E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, UnknownData_PX8N, 0x031F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftMainCard_C, ROOT_InventoryPanel, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZ_InventoryCraftMainCard_C, 0x0328);
		}

		// class UCv4_DataBaseUpdateAndGet_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__Cv4_DataBaseUpdateandGet__Cv4_DataBaseUpdateAndGet_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_DataBaseUpdateAndGet_C, LastStructure, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_DataBaseUpdateAndGet_C, isAdmin, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_DataBaseUpdateAndGet_C, isBan, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_DataBaseUpdateAndGet_C, UnknownData_7Q3A, 0x028A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_DataBaseUpdateAndGet_C, Classical_Structure, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_DataBaseUpdateAndGet_C, OnAddScore, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCv4_DataBaseUpdateAndGet_C, 0x0370);
		}

		// class AOtmostka_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Otmostka_Static_BP__Otmostka_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOtmostka_Static_BP_C, 0x0370);
		}

		// class Avaz_2109m_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__vaz_2109m__vaz_2109m_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Avaz_2109m_C, 0x0378);
		}

		// class ABench_2_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Bench_2_Static_BP__Bench_2_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABench_2_Static_BP_C, 0x0370);
		}

		// class UMAP_ZoneMarker_C : public UMapMarkerROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__MAP_ZoneMarker__MAP_ZoneMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_ZoneMarker_C, UnknownData_4GCG, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_ZoneMarker_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_ZoneMarker_C, Image_1, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMAP_ZoneMarker_C, 0x0248);
		}

		// class UInventorySlotsRoot_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InventorySlotsRoot__InventorySlotsRoot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventorySlotsRoot_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventorySlotsRoot_C, RootPanel, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventorySlotsRoot_C, LootIndexRoot, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventorySlotsRoot_C, IsSelected, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventorySlotsRoot_C, UnknownData_SP9F, 0x0215);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventorySlotsRoot_C, HoverColorRoot, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventorySlotsRoot_C, UnHoverColorRoot, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventorySlotsRoot_C, HoverTexture, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventorySlotsRoot_C, FloatParametr1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventorySlotsRoot_C, SelectedColorRoot, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventorySlotsRoot_C, 0x023C);
		}

		// class AlepBroken_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__lepBroken_BP__lepBroken_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AlepBroken_BP_C, 0x0370);
		}

		// class ACv2_SpawnHouseBase_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv2_SpawnHouseBase__Cv2_SpawnHouseBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SpawnHouseBase_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SpawnHouseBase_C, LOD, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SpawnHouseBase_C, DefaultSceneRoot, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SpawnHouseBase_C, HouseClass, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SpawnHouseBase_C, MapIcon, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SpawnHouseBase_C, UnknownData_LQZC, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SpawnHouseBase_C, VillageController, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SpawnHouseBase_C, HouseActor, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_SpawnHouseBase_C, 0x03A0);
		}

		// class ASurv_Car_GAZ_3302_C : public ACv2_BaseCar_4W_C
		TEST_METHOD(BlueprintGeneratedClass__Surv_Car_GAZ_3302__Surv_Car_GAZ_3302_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurv_Car_GAZ_3302_C, 0x0940);
		}

		// class ACv2_playerController_C : public AFixPlayerController
		TEST_METHOD(BlueprintGeneratedClass__Cv2_playerController__Cv2_playerController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, UberGraphFrame, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, Cv4_CheckRayCastComponent, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, Cv4_DataBaseUpdateAndGet, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, VaRestFunctionsComponent, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, CraftComponent, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, PlayerInventory, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, Z_InventoryManager, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, LootSystemComponent, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, isDead, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, UnknownData_9ZY2, 0x0711);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, CraftActor, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, PlayerActor, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, isReadyBuild, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, UnknownData_1GVM, 0x0729);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, proxyLoot, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, proxyCraft, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, UnknownData_Y0RW, 0x0741);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, CraftLastAzimut, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, EnemyBaseCoords, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, UnknownData_LDQ6, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, RespawnSelectedActor, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, Crafting_Usa, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, Crafting_Germany, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, Crafting_Ussr, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, Crafting_Japan, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, OldPlayerPawn, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, AdminPawn, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, isCheater, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, UnknownData_IYSV, 0x07B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, CharacterBlockTimes, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, MenuSlots, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, NoCraftDistance, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, UnknownData_8JYQ, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, fpsCountArray, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, Crafting_Deserters, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, Crafting_Survival, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, MyFriendsId, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, OwnerID, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, VoiceCommandTimer, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, UnknownData_AJMC, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, Crafting_GermanyWinter, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, proxyString, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, finalString, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, Officers, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, oldSkeletalMesh, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, OldStaticMesh, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, MySoldiers, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, proxSpawnCraft, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, CrossHair, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, ProxyEnemyCreature, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, EnterLocationTime, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, UnknownData_TSQT, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, ExitZone, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, faceIdServer, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, UnknownData_JESK, 0x08C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, ExitLocationProxy, 0x08C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, CanSpawn, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, UnknownData_MEHF, 0x08D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, LastStructure, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, DataBaseStore, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, ExitZoneEnabled, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, UnknownData_ZX4R, 0x0A79);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, ServerLobbyID, 0x0A7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, firstRespawn, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, UnknownData_Y0MP, 0x0A81);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, lastPressE_Time, 0x0A84);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, WheeldVehRayCast, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, isShowRebootServerMessage, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, ReturnSaveStateBool, 0x0A91);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, ServerAdmin, 0x0A92);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, UnknownData_7AF0, 0x0A93);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, TutorialIgnorActors, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_playerController_C, IgnoreCraftActors, 0x0AA8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_playerController_C, 0x0AB8);
		}

		// class ARock_Stairs_BP_1_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Rock_Stairs_BP_2__Rock_Stairs_BP_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARock_Stairs_BP_1_C, 0x0370);
		}

		// class UCv2_WeaponsComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__Cv2_WeaponsComponent__Cv2_WeaponsComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_WeaponsComponent_C, UberGraphFrame, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_WeaponsComponent_C, OwnerCharacter, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_WeaponsComponent_C, weaponPitchPopravka, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_WeaponsComponent_C, NeedAmmo, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_WeaponsComponent_C, AmmoClip, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_WeaponsComponent_C, UnknownData_O0OC, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_WeaponsComponent_C, HandReloadMontage, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_WeaponsComponent_C, WeaponReloadMontage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_WeaponsComponent_C, ReloadLoopTime, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_WeaponsComponent_C, RandomAmmoProtected, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_WeaponsComponent_C, AmmoProtected, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_WeaponsComponent_C, SelectedSilencer, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_WeaponsComponent_C, UnknownData_VZCS, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_WeaponsComponent_C, ShootSound, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_WeaponsComponent_C, ShootParticle, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_WeaponsComponent_C, switchFireMode, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_WeaponsComponent_C, UnknownData_0KFB, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_WeaponsComponent_C, currentBurstBullet, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_WeaponsComponent_C, SwitchedMagMesh, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_WeaponsComponent_C, MyMagazineIndex, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCv2_WeaponsComponent_C, 0x0154);
		}

		// class UMessageLevelUpString_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MessageLevelUpString__MessageLevelUpString_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageLevelUpString_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageLevelUpString_C, Show, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageLevelUpString_C, Image_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageLevelUpString_C, MatInstance, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMessageLevelUpString_C, 0x0220);
		}

		// class ACv2_Character_C : public AFixCharacter
		TEST_METHOD(BlueprintGeneratedClass__Cv2_Character__Cv2_Character_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UberGraphFrame, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, MAGAZINE, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, AimScene, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, MOD_SILENCER, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Silencer, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, SpotLight, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Cv2_ActionComponent, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Face, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Cv4_BulletComponent, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, VoiceAudio, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, VoiceChat, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, MOD_OPTIC, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, optic, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Backpack, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Socket_PrimaryMesh, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Socket_SecondaryMesh, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Socket_MeleeMesh, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, SceneSprint, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Scene, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Characters_Light, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Cv2_WeaponsComponent, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, GrenadeRight, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, GrenadeLeft, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Camera, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, TargetCamera, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Widget, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Cv2_DestroyComponent, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Cv2_CharacterComponent, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Hands, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, HelmetTPS, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, WeaponTPS, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, MuzzleFlash, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, SpringArm, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Weapon, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, MyRealWeaponActive, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_BQEM, 0x08A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, MyRealHelmet, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, ButtonMoveType, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, IsAim, 0x08B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_NXBH, 0x08B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, HandPosition, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, AimHandPosition, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, proxyDeltaTime, 0x08CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, isFire, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_E4UN, 0x08D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, FireRateTimer, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, WeaponStructure, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Ammo, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, AmmoBackPack, 0x0B24);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, FirePitch, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, FireYaw, 0x0B2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, HitPoints, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, isDead, 0x0B34);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_RE4A, 0x0B35);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, NetPitch, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, MyWeaponType, 0x0B3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, isLadder, 0x0B3D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_A206, 0x0B3E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, MyController, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, MyControlledPawn, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, DynamicPitch, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, DynamicYaw, 0x0B54);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, SavePitch, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, SaveYaw, 0x0B5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, MyRealWeaponPrimary, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, MyRealWeaponSecundary, 0x0B61);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_Z5Q5, 0x0B62);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, FoliageHitPoints, 0x0B64);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, MyRealWeaponMelee, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, oldSlotType, 0x0B69);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, newSlotType, 0x0B6A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_CFES, 0x0B6B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, devWeaponSpeed, 0x0B6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, devMode, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_LAVR, 0x0B71);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, CrossHair, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, FurnitureHitPoints, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, oldMyRealWeaponPrimary, 0x0B84);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, oldMyRealWeaponSecundary, 0x0B85);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, oldMyRealWeaponMelee, 0x0B86);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, bWasTouched, 0x0B87);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Touch_x, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Touch_y, 0x0B8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, SweepSpeed, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, bPhoneModeOn, 0x0B94);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_7J1H, 0x0B95);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, oldHitPoints, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, CharacterClass, 0x0B9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_UPOF, 0x0B9D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, prostrelActor, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, PlayerName, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, bulletFireCount, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, MyRealGrenades, 0x0BC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_53UL, 0x0BC5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, throwGrenadeTimer, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Light, 0x0BCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_JQGI, 0x0BCD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, MyVelocity, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, damageDirection, 0x0BD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, oldWeaponInHands, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, isBinocular, 0x0BE1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, isAimNet, 0x0BE2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_7Y61, 0x0BE3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, ImpactBoneName, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, ImpactLocation, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, ImpactImpulse, 0x0BFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, CharacterOffHandEffector, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_J8SF, 0x0C09);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, AnimInstance, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, DisableMovement, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, IsProne, 0x0C19);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, IsLocalProne, 0x0C1A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, SprintPress, 0x0C1B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, oldCameraLocation, 0x0C1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, SprintDirection, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_9JJI, 0x0C29);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, proxyMeshYaw, 0x0C2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, localSprintDirection, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, isAimZoom, 0x0C31);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_SS6D, 0x0C32);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, DynCrosshair, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, fireBurstSpread, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Socket_Primary, 0x0C44);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Socket_Secondary, 0x0C45);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Socket_Melee, 0x0C46);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, Socket_BackPack, 0x0C47);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, ContainerActor, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, ReloadWeaponTimer, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, MoveForward, 0x0C54);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, MoveRight, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_JDQI, 0x0C5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, DamageInstigatedBy, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, oldMyRealWeaponActive, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_MXPV, 0x0C69);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, localNetPitch, 0x0C6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UseScopeIndex, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, PushToTalk, 0x0C74);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_LEVW, 0x0C75);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, playerOptic, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, OnLandedTimer, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, proxyAmmo, 0x0C84);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, KillerPawn, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, isBurstFire, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_E3I8, 0x0C91);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, netPitchTimer, 0x0C94);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, PARTS_FACE, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, isWeaponUp, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_0WHK, 0x0CA1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, BunkerID, 0x0CA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, FACE_ID, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_FGWM, 0x0CA9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, DefaultFieldOfView, 0x0CAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, SwitchWeaponTimer, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, isNormalQuit, 0x0CB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, playerSilencer, 0x0CB5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_7QCG, 0x0CB6);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, HeadArmor, 0x0CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, isFirePressed, 0x0CBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_975K, 0x0CBD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, StartRespawnTime, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, playerMagazine, 0x0CC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, UnknownData_ILNX, 0x0CC5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Character_C, lastDamageType, 0x0CC8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_Character_C, 0x0CD0);
		}

		// class UMAP_CV3SpawnMarker_C : public UMapMarkerROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__MAP_CV3SpawnMarker__MAP_CV3SpawnMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3SpawnMarker_C, UnknownData_UKCS, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3SpawnMarker_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3SpawnMarker_C, Select, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3SpawnMarker_C, Blink_Tent, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3SpawnMarker_C, Blink_Anim, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3SpawnMarker_C, Hover, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3SpawnMarker_C, Blink, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3SpawnMarker_C, Blink2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3SpawnMarker_C, Header, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3SpawnMarker_C, HorizontalBox_2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3SpawnMarker_C, MainIcon, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3SpawnMarker_C, MAP_RoundProgress, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3SpawnMarker_C, SelectIcon, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3SpawnMarker_C, TownName, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3SpawnMarker_C, is_selected, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3SpawnMarker_C, IsBlock, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3SpawnMarker_C, IsTown, 0x02A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3SpawnMarker_C, Blinked, 0x02A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3SpawnMarker_C, BlinkedTent, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3SpawnMarker_C, UnknownData_ULE9, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3SpawnMarker_C, DestroyTimer, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMAP_CV3SpawnMarker_C, 0x02B0);
		}

		// class AW_Box_01_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__W_Box_01__W_Box_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AW_Box_01_C, 0x0378);
		}

		// class UWeaponBox2_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__WeaponBox2_AnimBP__WeaponBox2_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponBox2_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponBox2_AnimBP_C, AnimGraphNode_Root_6E3E4E63459E466CB9E4769D6A126700, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponBox2_AnimBP_C, AnimGraphNode_LocalRefPose_59E527A3483ACB374FA8A99385188CA2, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponBox2_AnimBP_C, AnimGraphNode_BlendListByBool_4F681259480988BA2BD8C0B133EFE951, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponBox2_AnimBP_C, AnimGraphNode_SequencePlayer_5A1219C4421C6DFB2A456ABECD824002, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponBox2_AnimBP_C, 0x0588);
		}

		// class UBloodWidgetBase_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BloodWidgetBase__BloodWidgetBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodWidgetBase_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodWidgetBase_C, _5, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodWidgetBase_C, _4, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodWidgetBase_C, _3, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodWidgetBase_C, _2, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodWidgetBase_C, _1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodWidgetBase_C, Image_1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodWidgetBase_C, Image_2, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodWidgetBase_C, Image_3, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodWidgetBase_C, Image_4, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodWidgetBase_C, Image_5, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodWidgetBase_C, 0x0258);
		}

		// class UMENU_ROOT_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MENU_ROOT__MENU_ROOT_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMENU_ROOT_C, ROOT_Menu_State, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMENU_ROOT_C, UnknownData_LKCD, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMENU_ROOT_C, ROOP_Panels_Array, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMENU_ROOT_C, 0x0218);
		}

		// class ASofa_06_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Sofa_06__Sofa_06_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASofa_06_C, 0x0370);
		}

		// class AHangar_no_door_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Hangar_no_door__Hangar_no_door_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHangar_no_door_C, cold_arched_warehouse_window_L, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHangar_no_door_C, cold_arched_warehouse_window_R, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHangar_no_door_C, cold_arched_warehouse_walls, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHangar_no_door_C, cold_arched_warehouse_panel, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHangar_no_door_C, cold_arched_warehouse_gate_frame, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHangar_no_door_C, cold_arched_warehouse_fan_frame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHangar_no_door_C, cold_arched_warehouse_fan, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHangar_no_door_C, cold_arched_warehouse_elecricity_cable, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHangar_no_door_C, cold_arched_warehouse_cold_LS_lamp, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHangar_no_door_C, cold_arched_warehouse_base, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHangar_no_door_C, 0x03C0);
		}

		// class UKA26_Back_C : public UVehicleWheel
		TEST_METHOD(BlueprintGeneratedClass__KA26_Back__KA26_Back_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKA26_Back_C, 0x00F0);
		}

		// class A_SpawnFurnitur_06_C : public ACv3_SpawnLootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass___SpawnFurnitur_06___SpawnFurnitur_06_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_SpawnFurnitur_06_C, 0x0390);
		}

		// class UActorSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__ActorSequence__ActorSequencePlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequencePlayer, 0x07F0);
		}

		// class UActorSequence : public UMovieSceneSequence
		TEST_METHOD(Class__ActorSequence__ActorSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, MovieScene, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, ObjectReferences, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, UnknownData_8W45, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequence, 0x0360);
		}

		// class UActorSequenceComponent : public UActorComponent
		TEST_METHOD(Class__ActorSequence__ActorSequenceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, PlaybackSettings, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, Sequence, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, SequencePlayer, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, bAutoPlay, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, UnknownData_YXJW, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequenceComponent, 0x0130);
		}

		// class USurvBannerBase_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SurvBannerBase__SurvBannerBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBannerBase_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBannerBase_C, Change, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBannerBase_C, HorizontalBox_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBannerBase_C, MainOverlay, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBannerBase_C, BannersArray, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBannerBase_C, CurrentBannerIndex, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBannerBase_C, BannerCount, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBannerBase_C, NextIndex, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBannerBase_C, UnknownData_FE5S, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBannerBase_C, Timer, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBannerBase_C, TempHiddenWidget, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBannerBase_C, TempNextWidget, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvBannerBase_C, 0x0258);
		}

		// class UBENELLI_Base_Skeleton_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__BENELLI_Base_Skeleton_AnimBP__BENELLI_Base_Skeleton_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBENELLI_Base_Skeleton_AnimBP_C, UnknownData_7SXJ, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBENELLI_Base_Skeleton_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBENELLI_Base_Skeleton_AnimBP_C, AnimGraphNode_Root_1177E1DA4FE6F806227A25ADB989B057, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBENELLI_Base_Skeleton_AnimBP_C, AnimGraphNode_Slot_EE3FCEB64EC90EAE0F5FAD9129A4D76C, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBENELLI_Base_Skeleton_AnimBP_C, AnimGraphNode_SequencePlayer_5764FCF44E7BE2C1F43E4592B965E51C, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBENELLI_Base_Skeleton_AnimBP_C, 0x04E8);
		}

		// class ULOBBY_GInstance_Interface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__LOBBY_GInstance_Interface__LOBBY_GInstance_Interface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULOBBY_GInstance_Interface_C, 0x0028);
		}

		// class USettingsSlider_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SettingsSlider__SettingsSlider_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, Button_2, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, Button_3, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, Button_4, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, Button_5, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, Fon, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, Slider_1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, Text2, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, TextBlock_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, TextBlock_2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, TextBlock_3, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, TextBlock_4, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, TextBlock_5, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, Name, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, StepCount, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, UnknownData_LU8U, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, Categories, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, CurrentStep, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, UnknownData_AAUP, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, CategoriesBottonsArray, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, ChangeStep, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, Color, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, IsDynamic, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, UnknownData_BWQI, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, DynBegin, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, DynEnd, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, UnknownData_U67B, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, ChangeDynamic, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, SliderMouseDown, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, SliderMouseUp, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, ShowText2, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, UnknownData_ZUME, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsSlider_C, Text2Text, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USettingsSlider_C, 0x0330);
		}

		// class ACv2_GameState_C : public AGameState
		TEST_METHOD(BlueprintGeneratedClass__Cv2_GameState__Cv2_GameState_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GameState_C, UberGraphFrame, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GameState_C, SpawnManger, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GameState_C, DefaultSceneRoot, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GameState_C, GameTime, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GameState_C, SideAlliedsBaseHP, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GameState_C, SideAxisBaseHP, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GameState_C, isFriendlyFire, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GameState_C, GameModes, 0x03ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GameState_C, Season, 0x03EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GameState_C, UnknownData_XLSW, 0x03EF);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GameState_C, TopPlayerStringsUId, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GameState_C, TopScores, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GameState_C, Game, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GameState_C, isSinglePlayer, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GameState_C, isNight_, 0x0412);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GameState_C, UnknownData_Y1P8, 0x0413);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GameState_C, DayTimeSys, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_GameState_C, StartMusic, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_GameState_C, 0x0428);
		}

		// class AStove_02older_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Stove_02older_Rig__Stove_02older_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStove_02older_Rig_C, 0x03C2);
		}

		// class UCv4_DamageTypeHungry_C : public UDamageType
		TEST_METHOD(BlueprintGeneratedClass__Cv4_DamageTypeHungry__Cv4_DamageTypeHungry_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCv4_DamageTypeHungry_C, 0x0040);
		}

		// class UWP_Stormy_C : public UWeatherPreset_C
		TEST_METHOD(BlueprintGeneratedClass__WP_Stormy__WP_Stormy_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWP_Stormy_C, 0x008C);
		}

		// class UPlayerHeader_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PlayerHeader__PlayerHeader_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHeader_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHeader_C, Button_2, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHeader_C, FriendButton, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHeader_C, HorizontalBox_2, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHeader_C, Ping, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHeader_C, PlayerName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHeader_C, SB_Damage, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHeader_C, SB_Deaths, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHeader_C, SB_KillsButton, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHeader_C, SB_Score, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHeader_C, IsHeader, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHeader_C, IsMyString, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHeader_C, Side, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHeader_C, IsMySide, 0x0253);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHeader_C, UnknownData_1ZQL, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHeader_C, SteamID, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHeader_C, ParentMapWidget, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerHeader_C, 0x0280);
		}

		// class ULobbyPlayerString_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LobbyPlayerString__LobbyPlayerString_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyPlayerString_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyPlayerString_C, HoverButton, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyPlayerString_C, AddButton, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyPlayerString_C, Avatar, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyPlayerString_C, Fon, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyPlayerString_C, Image_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyPlayerString_C, Image_30, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyPlayerString_C, Mail, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyPlayerString_C, NickName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyPlayerString_C, Status, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyPlayerString_C, NetId, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyPlayerString_C, TargetID, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyPlayerString_C, FriendStr, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyPlayerString_C, IsDesabled, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyPlayerString_C, PlayerInMainMenu, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyPlayerString_C, ShowPlusButton, 0x02EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyPlayerString_C, PlayerFrientListState, 0x02EB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULobbyPlayerString_C, 0x02EC);
		}

		// class ARock_2_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Rock_2_Static_BP__Rock_2_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARock_2_Static_BP_C, 0x0370);
		}

		// class UGameOverRank_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GameOverRank__GameOverRank_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverRank_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverRank_C, ShowMe, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverRank_C, Image_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverRank_C, Image_2, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverRank_C, Rank, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameOverRank_C, 0x0224);
		}

		// class UAdvancedExternalUILibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AdvancedSessions__AdvancedExternalUILibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdvancedExternalUILibrary, 0x0028);
		}

		// class UAdvancedFriendsGameInstance : public UGameInstance
		TEST_METHOD(Class__AdvancedSessions__AdvancedFriendsGameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedFriendsGameInstance, UnknownData_IW4B, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdvancedFriendsGameInstance, UnknownData_QV9D, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdvancedFriendsGameInstance, 0x0280);
		}

		// class UAdvancedFriendsInterface : public UInterface
		TEST_METHOD(Class__AdvancedSessions__AdvancedFriendsInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdvancedFriendsInterface, 0x0028);
		}

		// class UAdvancedFriendsLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AdvancedSessions__AdvancedFriendsLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdvancedFriendsLibrary, 0x0028);
		}

		// class UAdvancedIdentityLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AdvancedSessions__AdvancedIdentityLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdvancedIdentityLibrary, 0x0028);
		}

		// class UAdvancedSessionsLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AdvancedSessions__AdvancedSessionsLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdvancedSessionsLibrary, 0x0028);
		}

		// class UAdvancedVoiceLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AdvancedSessions__AdvancedVoiceLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdvancedVoiceLibrary, 0x0028);
		}

		// class UCancelFindSessionsCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSessions__CancelFindSessionsCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCancelFindSessionsCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCancelFindSessionsCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCancelFindSessionsCallbackProxy, UnknownData_YFBS, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCancelFindSessionsCallbackProxy, 0x00A0);
		}

		// class UCreateSessionCallbackProxyAdvanced : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSessions__CreateSessionCallbackProxyAdvanced)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxyAdvanced, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxyAdvanced, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxyAdvanced, UnknownData_0MFK, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreateSessionCallbackProxyAdvanced, 0x0110);
		}

		// class UEndSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSessions__EndSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndSessionCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndSessionCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndSessionCallbackProxy, UnknownData_1BHT, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndSessionCallbackProxy, 0x00A0);
		}

		// class UFindFriendSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSessions__FindFriendSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindFriendSessionCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindFriendSessionCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindFriendSessionCallbackProxy, UnknownData_EZN3, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindFriendSessionCallbackProxy, 0x00C0);
		}

		// class UFindSessionsCallbackProxyAdvanced : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSessions__FindSessionsCallbackProxyAdvanced)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxyAdvanced, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxyAdvanced, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxyAdvanced, UnknownData_1ALN, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindSessionsCallbackProxyAdvanced, 0x0100);
		}

		// class UGetFriendsCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSessions__GetFriendsCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetFriendsCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetFriendsCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetFriendsCallbackProxy, UnknownData_XCUP, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetFriendsCallbackProxy, 0x00A0);
		}

		// class UGetRecentPlayersCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSessions__GetRecentPlayersCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetRecentPlayersCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetRecentPlayersCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetRecentPlayersCallbackProxy, UnknownData_4PLD, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetRecentPlayersCallbackProxy, 0x00C0);
		}

		// class UGetUserPrivilegeCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSessions__GetUserPrivilegeCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetUserPrivilegeCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetUserPrivilegeCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGetUserPrivilegeCallbackProxy, UnknownData_CWTY, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGetUserPrivilegeCallbackProxy, 0x0078);
		}

		// class ULoginUserCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSessions__LoginUserCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoginUserCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoginUserCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoginUserCallbackProxy, UnknownData_N2AC, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoginUserCallbackProxy, 0x00C0);
		}

		// class ULogoutUserCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSessions__LogoutUserCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutUserCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutUserCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutUserCallbackProxy, UnknownData_3LO1, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULogoutUserCallbackProxy, 0x00A0);
		}

		// class USendFriendInviteCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSessions__SendFriendInviteCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USendFriendInviteCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USendFriendInviteCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USendFriendInviteCallbackProxy, UnknownData_64ZA, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USendFriendInviteCallbackProxy, 0x00C0);
		}

		// class UUpdateSessionCallbackProxyAdvanced : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSessions__UpdateSessionCallbackProxyAdvanced)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateSessionCallbackProxyAdvanced, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateSessionCallbackProxyAdvanced, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateSessionCallbackProxyAdvanced, UnknownData_KV4K, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUpdateSessionCallbackProxyAdvanced, 0x00D0);
		}

		// class UPointer_Shkaf_C : public UPointer_Root_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Pointer_Shkaf__Pointer_Shkaf_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointer_Shkaf_C, 0x0221);
		}

		// class ACv3_RespawnVehicle_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv3_RespawnVehicle__Cv3_RespawnVehicle_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_RespawnVehicle_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_RespawnVehicle_C, Billboard, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_RespawnVehicle_C, StaticMesh, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_RespawnVehicle_C, DefaultSceneRoot, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_RespawnVehicle_C, SpawnedVehicle, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_RespawnVehicle_C, isHelicopter_, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_RespawnVehicle_C, AlwaysSpawn, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_RespawnVehicle_C, UnknownData_NG6W, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_RespawnVehicle_C, CustomVehicle, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_RespawnVehicle_C, isCustomVehicle, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv3_RespawnVehicle_C, 0x03A1);
		}

		// class UBlueprintGameplayTagLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameplayTags__BlueprintGameplayTagLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGameplayTagLibrary, 0x0028);
		}

		// class UGameplayTagAssetInterface : public UInterface
		TEST_METHOD(Class__GameplayTags__GameplayTagAssetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagAssetInterface, 0x0028);
		}

		// class UEditableGameplayTagQuery : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UnknownData_2X6D, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, RootExpression, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, TagQueryExportText_Helper, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQuery, 0x0098);
		}

		// class UEditableGameplayTagQueryExpression : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression, 0x0028);
		}

		// class UEditableGameplayTagQueryExpression_AnyTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_AllTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_NoTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_AnyExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, 0x0038);
		}

		// class UEditableGameplayTagQueryExpression_AllExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllExprMatch, 0x0038);
		}

		// class UEditableGameplayTagQueryExpression_NoExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoExprMatch, 0x0038);
		}

		// class UGameplayTagsManager : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_FK39, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, TagSources, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_Z2I3, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, GameplayTagTables, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_HMFW, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsManager, 0x0180);
		}

		// class UGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, GameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsList, 0x0048);
		}

		// class UGameplayTagsSettings : public UGameplayTagsList
		TEST_METHOD(Class__GameplayTags__GameplayTagsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, ImportTagsFromConfig, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, WarnOnInvalidTags, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, UnknownData_YV4B, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CategoryRemapping, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, FastReplication, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, UnknownData_9MP4, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagTableList, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagRedirects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CommonlyReplicatedTags, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NumBitsForContainerSize, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NetIndexFirstBitSegment, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsSettings, 0x00A0);
		}

		// class UGameplayTagsDeveloperSettings : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsDeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsDeveloperSettings, DeveloperConfigName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsDeveloperSettings, 0x0038);
		}

		// class UPlayer_Condition_BASE_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Player_Condition_BASE__Player_Condition_BASE_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, BoostAnim, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, BostedText, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, ConditionIcon, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, ConditionIcon_C_2, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, ConditionIcon_C_3, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, ConditionIcon_C_4, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, HangryCount, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, HealthCount, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, HealthText, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, HorizontalBox_3, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, HorizontalBox_8, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, HungryText, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, Ice_coins, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, IceCount, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, Surv_coins, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, Surv_count, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, TempCount, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, TempText, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, ThirstText, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, ThyrstyCount, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, Thirst, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, Hunger, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, Tempirature, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, Health, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, Boost, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, UnknownData_5312, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, TimerVar, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, LocalPlayerState, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer_Condition_BASE_C, NoAutoUpdate, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayer_Condition_BASE_C, 0x02D9);
		}

		// class AFences_01_x3_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Fences_01_x3__Fences_01_x3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFences_01_x3_C, StaticMesh2, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFences_01_x3_C, StaticMesh1, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFences_01_x3_C, 0x0388);
		}

		// class ASURV_MainMenu_TmpPawn_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__SURV_MainMenu_TmpPawn__SURV_MainMenu_TmpPawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASURV_MainMenu_TmpPawn_C, Camera, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASURV_MainMenu_TmpPawn_C, DefaultSceneRoot, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASURV_MainMenu_TmpPawn_C, IS_Classical, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASURV_MainMenu_TmpPawn_C, 0x03D9);
		}

		// class UMessageWidgetBASE_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MessageWidgetBASE__MessageWidgetBASE_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageWidgetBASE_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageWidgetBASE_C, Cv2_HintActionWidget, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageWidgetBASE_C, KillsMultiplier_WB, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageWidgetBASE_C, Message_GlobalMessage, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageWidgetBASE_C, MessageHeadshotMessage, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageWidgetBASE_C, MessageKillShip_Base, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageWidgetBASE_C, MessageLevelUpString, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageWidgetBASE_C, MessageZoneInfo, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageWidgetBASE_C, NoCraft, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageWidgetBASE_C, ScoreMessage, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageWidgetBASE_C, MessageText, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageWidgetBASE_C, MessageTune, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMessageWidgetBASE_C, 0x026C);
		}

		// class AFow_BOT_C : public AFixCharacter
		TEST_METHOD(BlueprintGeneratedClass__Fow_BOT__Fow_BOT_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, UberGraphFrame, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, Cv4_BulletComponent, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, BackWeapon, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, ResourceMesh, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, MuzzleFlash, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, WeaponTPS, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, HelmetTPS, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, PawnSensing, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, isDeath, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, Team, 0x07D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, UnknownData_45CZ, 0x07D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, AttackTarget, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, Behavior, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, UnknownData_F5N6, 0x07E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, AIController, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, IsProne, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, UnknownData_UOXJ, 0x07F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, Health, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, oldMoveLocation, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, SquadSlotIndex, 0x0804);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, IsSprint, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, UnknownData_IB52, 0x0809);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, WeaponStructure, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, WeaponEnum, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, UnknownData_C39H, 0x0A59);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, fireDelay, 0x0A5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, Ammo, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, UnknownData_KL7K, 0x0A64);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, ImpactBoneName, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, ImpactLocation, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, ImpactImpulse, 0x0A7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, perk_Accuracy, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, perk_Reaction, 0x0A8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, NetPitch, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, IsAim, 0x0A94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, UnknownData_OTRY, 0x0A95);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, CheckPoints, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, RealCheckPoint, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, goBackCheckpoints, 0x0AAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, UnknownData_4HFM, 0x0AAD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, panicTime, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, BotResource, 0x0AB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, UnknownData_Y6IR, 0x0AB5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, VillageController, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, craftTime, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, UnknownData_9F8L, 0x0AC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, CommanderPawn, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, WeaponBack, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, isFire, 0x0AD1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, UnknownData_I8OD, 0x0AD2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, SeePawn, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, followTarget, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, isSniper, 0x0AE1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, isManualWeapon, 0x0AE2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, UnknownData_OXIB, 0x0AE3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, freezeTimer, 0x0AE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, isSinglePlayerLogic, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, ManualWeapon, 0x0AE9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, UnknownData_79OB, 0x0AEA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, damageDirection, 0x0AEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, MoveToLocation, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, Nation, 0x0B04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, UnknownData_6TDF, 0x0B05);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BOT_C, BotName, 0x0B08);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFow_BOT_C, 0x0B20);
		}

		// class UInfo_Inventory_Panel_C : public UInfoPanelRoot_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Info_Inventory_Panel__Info_Inventory_Panel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_Inventory_Panel_C, UberGraphFrame, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_Inventory_Panel_C, Show, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_Inventory_Panel_C, Border_3, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_Inventory_Panel_C, InfoWeaponSlider, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_Inventory_Panel_C, MeleeWeapon, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_Inventory_Panel_C, PrymaryWeapon, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_Inventory_Panel_C, SecondaryWeapon, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_Inventory_Panel_C, SlideArray, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_Inventory_Panel_C, SlideIndex, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_Inventory_Panel_C, NoSlide, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_Inventory_Panel_C, IS_SlidingNow, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_Inventory_Panel_C, CurrentSlidingType, 0x0266);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_Inventory_Panel_C, UnknownData_LKB5, 0x0267);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_Inventory_Panel_C, SlideTime, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_Inventory_Panel_C, UnknownData_Q70I, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_Inventory_Panel_C, ZSliderLoot, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_Inventory_Panel_C, LootType, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_Inventory_Panel_C, IsWeaponShow, 0x0281);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfo_Inventory_Panel_C, 0x0282);
		}

		// class UMeshReconstructorBase : public UObject
		TEST_METHOD(Class__MRMesh__MeshReconstructorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshReconstructorBase, 0x0028);
		}

		// class UMRMeshComponent : public UPrimitiveComponent
		TEST_METHOD(Class__MRMesh__MRMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_9LYC, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, Material, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, MeshReconstructor, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bEnableCollision, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_2SUH, 0x06A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, BodySetups, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_TEGU, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMRMeshComponent, 0x06E0);
		}

		// class UInventory_BASE_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Inventory_BASE__Inventory_BASE_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, NewShow, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, ShowOther, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, BackPackFon, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, Border_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, Fon, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, Image_2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, Image_5, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, InventoryBackPackCard, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, InventoryBackPackCard_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, InventoryBackPackCard_2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, InventoryBackPackCard_3, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, InventoryBackPackCard_4, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, InventoryBackPackCard_5, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, InventoryBackPackCard_6, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, InventoryBackPackCard_7, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, InventoryBackPackToolTip, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, InventoryBigCard, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, InventoryBigCard_1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, InventoryBigCard_4, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, InventoryBigCard_5, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, InventoryBigCard_6, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, InventoryCRAFTPanel, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, OtherPanel, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, RenderWidget, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, BackPackSlots, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, MainSlots, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, RenderCharacter, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, LastUsingWidget, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, InventoryPanel, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, SelectedLoot, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, TransformLoot, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, CraftPanel, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, RenderCraftActor, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, OnlyMove, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, UnknownData_8ZPT, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, OldActor, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_BASE_C, ChackActrorTimer, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventory_BASE_C, 0x0348);
		}

		// class ABlind_1_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Blind_2__Blind_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlind_1_C, 0x0370);
		}

		// class ARock_4_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Rock_4_Static_BP__Rock_4_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARock_4_Static_BP_C, 0x0370);
		}

		// class ULocalizePanel_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LocalizePanel__LocalizePanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizePanel_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizePanel_C, De_Button, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizePanel_C, EnButton, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizePanel_C, EsButton, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizePanel_C, FrButton, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizePanel_C, ItButton, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizePanel_C, PtButton, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizePanel_C, RuButton, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizePanel_C, UkrButton, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizePanel_C, Zh_Button, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalizePanel_C, 0x0250);
		}

		// class UEndGame_TopString_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__EndGame_TopString__EndGame_TopString_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGame_TopString_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGame_TopString_C, Avatar, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGame_TopString_C, Fon, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGame_TopString_C, NickName, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGame_TopString_C, Place, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGame_TopString_C, Score, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGame_TopString_C, Smoke, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGame_TopString_C, PlaceText, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGame_TopString_C, NormalFonColor, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndGame_TopString_C, 0x0260);
		}

		// class ABuilding_09_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Building_09__Building_09_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_09_C, _CraftDoor_Frame, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_09_C, Chest1, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_09_C, ChildActor2, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_09_C, ChildActor1, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_09_C, _SpawnFurnitur_01, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_09_C, _SpawnFurnitur_09, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_09_C, _SpawnFurnitur_14, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_09_C, ChildActor, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_09_C, _SpawnFurnitur_03, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_09_C, StaticMesh2, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_09_C, Crate_A_lod01, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_09_C, IE_stairs, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_09_C, Crate_A_lod0, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_09_C, Crate_B_lod0, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_09_C, StaticMesh1, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABuilding_09_C, 0x03F0);
		}

		// class USurv_Car_Uaz469_Police_AnimBP_C : public UVehicleAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Surv_Car_Uaz469_Police_AnimBP__Surv_Car_Uaz469_Police_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Uaz469_Police_AnimBP_C, UberGraphFrame, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Uaz469_Police_AnimBP_C, AnimGraphNode_Root_B6D1872A4C45CABDC14E27882BD75835, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Uaz469_Police_AnimBP_C, AnimGraphNode_WheelHandler_FC2FA5634E87791B0F6014A2F936D1BE, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Uaz469_Police_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_1629F21D45991B6BF7BC4D8F2BB9F9C6, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Uaz469_Police_AnimBP_C, AnimGraphNode_MeshRefPose_5B54B0A041E05C7EC62FC3937430E05B, 0x09D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurv_Car_Uaz469_Police_AnimBP_C, 0x0A00);
		}

		// class UMAP_DeadMarker_C : public UMapMarkerROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__MAP_DeadMarker__MAP_DeadMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_DeadMarker_C, UnknownData_UB62, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_DeadMarker_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_DeadMarker_C, Show, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_DeadMarker_C, Image_1, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMAP_DeadMarker_C, 0x0250);
		}

		// class ABP_AnimalsBear_Bear_C : public ACharacter
		TEST_METHOD(BlueprintGeneratedClass__BP_AnimalsBear_Bear__BP_AnimalsBear_Bear_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, UberGraphFrame, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, PawnSensing, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, BaseTurnRate, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, BaseLookUpRate, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, Turn, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, LookUp, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, MaxSpeed, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, MoveRight, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, LocomotionBias, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, MoveForward, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, IsAttacking, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, UnknownData_H3BZ, 0x07B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, Var_TurnMouse_AxisValue, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, Var_LookUpMouse_AxisValue, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, Var_ForwardVector, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, Var_ForwardScaleValue, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, Var_RightVector, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, Var_RightScaleValue, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, Var_Turn_AxisValue, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, Var_LookUp_AxisValue, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, ImpactBoneName, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, ImpactLocation, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, ImpactImpulse, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, isDeath, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, UnknownData_P1PD, 0x0809);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, Target, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, Commander, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, proxyMesh, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, Health, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AnimalsBear_Bear_C, Distance, 0x082C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AnimalsBear_Bear_C, 0x082D);
		}

		// class UAwardDealyBase_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__AwardDealyBase__AwardDealyBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardDealyBase_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardDealyBase_C, Hover, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardDealyBase_C, Start, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardDealyBase_C, AwardCalendarBase, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardDealyBase_C, AwardOverlay, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardDealyBase_C, Button_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardDealyBase_C, Button_84, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardDealyBase_C, Day, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardDealyBase_C, Fon1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardDealyBase_C, Image_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardDealyBase_C, Image_2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardDealyBase_C, Image_3, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardDealyBase_C, Image_4, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardDealyBase_C, Money, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardDealyBase_C, Overload, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardDealyBase_C, TextBlock_42, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardDealyBase_C, AwardsArray, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardDealyBase_C, WinIndex, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardDealyBase_C, DayVar, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardDealyBase_C, Moneys, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardDealyBase_C, UnknownData_WX24, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardDealyBase_C, WinCard, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardDealyBase_C, IsFinish, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAwardDealyBase_C, 0x02A9);
		}

		// class UMenu_controlsOptions_Panel_C : public UMenu_InGame_Panel_ROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Menu_controlsOptions_Panel__Menu_controlsOptions_Panel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_controlsOptions_Panel_C, UnknownData_VZIM, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_controlsOptions_Panel_C, UberGraphFrame, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_controlsOptions_Panel_C, Back, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_controlsOptions_Panel_C, Keyboard, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_controlsOptions_Panel_C, Mouse, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_controlsOptions_Panel_C, Parent, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenu_controlsOptions_Panel_C, 0x0240);
		}

		// class UGameOverStatisticString_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GameOverStatisticString__GameOverStatisticString_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverStatisticString_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverStatisticString_C, Show, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverStatisticString_C, GameText, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverStatisticString_C, ParName, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverStatisticString_C, TotalText, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverStatisticString_C, ParametrName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverStatisticString_C, Game, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverStatisticString_C, Total, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameOverStatisticString_C, 0x0270);
		}

		// class UTimer_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Timer__Timer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimer_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimer_C, Anim, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimer_C, Clock, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimer_C, Seconds, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimer_C, UnknownData_VSIK, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimer_C, TimerVar, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimer_C, UseAnim, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimer_C, 0x0229);
		}

		// class UCv2_VehicleComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__Cv2_VehicleComponent__Cv2_VehicleComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, UberGraphFrame, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, Vehicle, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, DestroyComponent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, DustPSC, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, CrewMesh, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, Capsule, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, SkinnedMesh, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, StaticMesh, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, PlayerPawn, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, VehicleSide, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, UnknownData_USM0, 0x0161);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, OwnerID, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, DeleteVehicleTimer, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, bulletFireCount, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, lastShoot, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, proxyIsKazenniy, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, UnknownData_1IPU, 0x0182);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, oldVehicleLocation, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, VehicleSpeed, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, isBoomed, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, UnknownData_XD37, 0x0195);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, Parts_TORSES, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, PARTS_LEGS, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, Parts_FOOTS, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_VehicleComponent_C, Parts_FACES, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCv2_VehicleComponent_C, 0x01D8);
		}

		// class UWeatherPreset_C : public UObject
		TEST_METHOD(BlueprintGeneratedClass__WeatherPreset__WeatherPreset_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeatherPreset_C, Data, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeatherPreset_C, 0x008C);
		}

		// class A_SpawnFurnitur_05_C : public ACv3_SpawnLootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass___SpawnFurnitur_05___SpawnFurnitur_05_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_SpawnFurnitur_05_C, 0x0390);
		}

		// class UCreature_Bear_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Creature_Bear_AnimBP__Creature_Bear_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreature_Bear_AnimBP_C, UnknownData_WIXY, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreature_Bear_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreature_Bear_AnimBP_C, AnimGraphNode_Root_D6E71E054CCFED23007166B7B604F7D8, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreature_Bear_AnimBP_C, AnimGraphNode_BlendSpacePlayer_53EE996A4A868532E1289D9E8E6A48B9, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreature_Bear_AnimBP_C, AnimGraphNode_Slot_11C2792A40EF60307E76CB881811F0CC, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreature_Bear_AnimBP_C, Creature, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreature_Bear_AnimBP_C, Speed, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreature_Bear_AnimBP_C, 0x05AC);
		}

		// class UZ_InventoryBASE_ROOT_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Z_InventoryBASE_ROOT__Z_InventoryBASE_ROOT_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryBASE_ROOT_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryBASE_ROOT_C, CraftPanel, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZ_InventoryBASE_ROOT_C, 0x0210);
		}

		// class AFow_BOT_Civilian_C : public AFow_BOT_C
		TEST_METHOD(BlueprintGeneratedClass__Fow_BOT_Civilian__Fow_BOT_Civilian_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFow_BOT_Civilian_C, 0x0B20);
		}

		// class UTrashBin_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TrashBin__TrashBin_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrashBin_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrashBin_C, Show, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrashBin_C, ImageClose, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrashBin_C, ImageOpen, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrashBin_C, Type, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTrashBin_C, 0x0224);
		}

		// class AStreetStolb_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__StreetStolb_BP__StreetStolb_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStreetStolb_BP_C, 0x0370);
		}

		// class UBaseWeapon_MG42_TriPod_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__BaseWeapon_MG42_TriPod__BaseWeapon_MG42_TriPod_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseWeapon_MG42_TriPod_C, UnknownData_8WXL, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseWeapon_MG42_TriPod_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseWeapon_MG42_TriPod_C, AnimGraphNode_Root_3CD4151A4993316FB738F997AF226887, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseWeapon_MG42_TriPod_C, AnimGraphNode_Slot_C239B903491B28808F086BBFF44741F9, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseWeapon_MG42_TriPod_C, AnimGraphNode_SequencePlayer_4CE3D751419EF0556EFFDE8A003C3A4A, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseWeapon_MG42_TriPod_C, 0x04E8);
		}

		// class UMenu_InGameMenuBase_C : public UMENU_ROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Menu_InGameMenuBase__Menu_InGameMenuBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGameMenuBase_C, UberGraphFrame, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGameMenuBase_C, Show, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGameMenuBase_C, Border_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGameMenuBase_C, Menu_controlsOptions_Panel, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGameMenuBase_C, Menu_InGame_AUDIO_options, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGameMenuBase_C, Menu_InGame_Keyboard_options, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGameMenuBase_C, Menu_InGame_MainMenu, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGameMenuBase_C, Menu_InGame_Mouse_options, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGameMenuBase_C, Menu_InGame_OptionsMenu, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGameMenuBase_C, Menu_InGame_VIDEO_options, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenu_InGameMenuBase_C, 0x0268);
		}

		// class UInfo_CarPanel_C : public UInfoPanelRoot_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Info_CarPanel__Info_CarPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_CarPanel_C, UberGraphFrame, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_CarPanel_C, Show, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_CarPanel_C, Border_3, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_CarPanel_C, Info_LockedWidget, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_CarPanel_C, Info_VehicleInfoBar, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_CarPanel_C, CurentCarInventory, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfo_CarPanel_C, 0x0248);
		}

		// class UMessageZoneString_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MessageZoneString__MessageZoneString_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageZoneString_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageZoneString_C, ShowAttantion, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageZoneString_C, Out, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageZoneString_C, Show, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageZoneString_C, Image_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageZoneString_C, Image_2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageZoneString_C, TextBlock_1, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMessageZoneString_C, 0x0238);
		}

		// class USurvMainMenuBase_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SurvMainMenuBase__SurvMainMenuBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, Slidemenu, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, Avatar, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, Button_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, Button_Settings, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, CenterBlock, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, CheatButton, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, ClassicalHome, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, ClassicalInfo, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, ClassicServers, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, Exit, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, ExitBorder, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, HeaderFon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, Home, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, Ice_coins_Text, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, Image_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, Image_2, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, Image_3, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, InventoryButton, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, LevelText, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, Menu_MainMenu_Character, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, Menu_MainMenu_ServersList, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, MenuFon, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, MoneyIcon, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, MoneysText, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, NickName, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, NO_DB, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, OptionsBorder, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, OptionsButton, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, PersonaBlock, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, ServerList, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, ServerName, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, Surv_ClasssicalModeGUI, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, Surv_coins_text, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, Surv_GET_GameMODe, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, SURV_Inventory_widget_BASE, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, Surv_OptionsBASE, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, SurvMainMenuHomePanel, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, Trade, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, TradeWidget, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, Tutorial_Button, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, WidgetsOverlay, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, ButtonsArray, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, CurrentInventoryRef, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, IS_Trade, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, IS_Inventory, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, UnknownData_30QL, 0x036A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, MyUniqID, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, PlayerAvatar, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, BarigaAvatar, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, Delete, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, UnknownData_NJPN, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, CurrentPanel, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuBase_C, IS_CALSSICAL, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvMainMenuBase_C, 0x03B1);
		}

		// class UMP5_Base_Skeleton_AnimBlueprint_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__MP5_Base_Skeleton_AnimBlueprint__MP5_Base_Skeleton_AnimBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMP5_Base_Skeleton_AnimBlueprint_C, UnknownData_F4K0, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMP5_Base_Skeleton_AnimBlueprint_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMP5_Base_Skeleton_AnimBlueprint_C, AnimGraphNode_Root_E2A63DF84A3BE99CECF663B2C83AF4F7, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMP5_Base_Skeleton_AnimBlueprint_C, AnimGraphNode_Slot_E2CE79384D79372033F82AB49C1DE369, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMP5_Base_Skeleton_AnimBlueprint_C, AnimGraphNode_SequencePlayer_F297D8704DC05E4AA6E0AEAFCC3DDC2C, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMP5_Base_Skeleton_AnimBlueprint_C, 0x04E8);
		}

		// class UMixamoBattalionAnimatorBOT_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__MixamoBattalionAnimatorBOT__MixamoBattalionAnimatorBOT_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, UnknownData_H9HC, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_Root_81671F014AEE12F03AC140AF11182018, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_45329542431A53F354A098BA7EE19CAB, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_1E14DF5B4DD09FD27A72FEB436ED37A7, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_4F4D21CC4569756A5413499567A7E329, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_254113304A79820A169187AE40F45BF4, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_8759263545F1F7A50D254A917366AF73, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_9C0EAF964166BF29DB66A5AD81EAB77D, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_9FFA1B3F4A6BE1DCB527CC9FEB87EB5A, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_31756EB44FB160DEE3C08FA3B9B32068, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_B17E00AA4129323E67D5E78AF808C089, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_A654CDBA477C4F9B09F130BE6FAC6966, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_C48929054551EC3638C336BF308D67D7, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_205202DD4962213804FA858248CAEC6D, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SequencePlayer_9385AE6B45938ED8F907E5BE09AA7621, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateResult_9F62CA704565DF66EAE609A10B38B90C, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SequencePlayer_EAA16B3B4B4D6202C0FCC1B2CACD0CF9, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateResult_C23661714656E936B4C6979F7F1DFC6A, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SequencePlayer_CAE17CA84EF7C414C4858BAEDEF5D637, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateResult_69FEE24A4538EE0BC9DB2EBBC1D8618B, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SequencePlayer_C6D8CBB74A20D3B3360D62AB5673FFE5, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateResult_1DB547924C6F57A939EDCCBF58164A00, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_BlendSpacePlayer_039C12404F8E1862219348A2C67AB46E, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateResult_C99046074D85BA6626BFAC9B1AB884A8, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SequencePlayer_31D7B7104F915A2AD08018BC474B3759, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateResult_7807024149500D0E1F23DE82238B09E0, 0x0ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_BlendSpacePlayer_0747005242308ECA517443AC1A1F6C1F, 0x0F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateResult_FAFD821149BC849747232EA8BB0C437C, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateMachine_139349654A050FF0F6BF4AA6F820A167, 0x1088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SaveCachedPose_387CB3D3442E68153D65F78472BD4792, 0x1160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, UnknownData_QSR6, 0x1208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_1D829EE84BBB25D5792DE8B4E8AF7B32, 0x1210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_234D9B3F464F63E85D87B782339AF3F1, 0x1290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_53370C8749A0228AEF7484BC89308812, 0x1310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_C9058D934CA1EF7A0B29EEAD6E6F5979, 0x1390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_D1EF95B24FE87FE677B2F4B75B977C4E, 0x1410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_DF3F795A48A28A2B43F55F91C91E5E6E, 0x1490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_115172C841271807F922C09B7A7AB56A, 0x1510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_DA279F824241A79F5739ACB974A222BB, 0x1590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_EC83D8A642BF7548000B9CB3BE43CE1D, 0x1610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_EF3AF857440358BA1A6CBCA9820A01EB, 0x1690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_1B004C29450298E0D3BAFFA0C1E10691, 0x1710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_11312FD2431586B46DB701A718A59E97, 0x1790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_B7102E7E4F9CB699B92CD681835A6CD7, 0x1810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_AF3FD3A74D2A7E461E6560A55783F7C3, 0x1890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_1C86288C46282404FA010CB61CC45BD4, 0x1910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_25F2D2FD40C631B9D52F1BADDC9254CB, 0x1990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_D281A8604D943F11D3A3F5A48C6C1590, 0x1A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_3D3C04D24519FF8FFBCFDFA443584A96, 0x1A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_A73CBD734B67C5A5E2E986A9E7640D5E, 0x1B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_4673349E4D1AF0BF53A25F85858C5BA4, 0x1B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_DAC9B9D646A861608B782A864015A15A, 0x1C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_426B18514D36989C27AAEB9C2AF1B417, 0x1C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_E160B69A492720BCE835F29DF1D5FC02, 0x1D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_C2C90A854ADAF93A37200F97598544B7, 0x1D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_60DE971042732BE7C94817B45361747B, 0x1E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_069CC0574E80151E1773BA8B5730B032, 0x1E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_0DBEB7E541027742DE500A83B1E717AE, 0x1F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_3ECC65EF4B0C0CB9901FA391D4DE78EA, 0x1F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_FF894E4547BABD21265DD5B629DF1A00, 0x2010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_CA2B10E44914A7879AD9D28E37957F32, 0x2090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_B72AE80F417199AE32035AB2049CF579, 0x2110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_036E6BCD48AA21DDA54A9A841A65EAE6, 0x2190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_0A44A0D340C9FC0AD97E199E2BB68621, 0x2210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_4A81D9394048949E4E72D2B15D5B0E52, 0x2290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_555F01994F7409FFE7E3B995BA09D290, 0x2310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_C6B25B994FFF1092E4AA609FAD9C6328, 0x2390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_TransitionResult_99898AF4435DC12524C676925216311C, 0x2410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SequencePlayer_32C7EF3C4E208C70A2AB21A80348C48C, 0x2490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateResult_35FA95294B2636AF34BF3FBF533C8105, 0x2500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SequencePlayer_4690551C41CCCCD41909BEA328885C6E, 0x2548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateResult_A40A34FA482EF5252A1CD6BFE73E9EA5, 0x25B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SequencePlayer_7FBC55AE4DDD99903AB3DAB1E7365162, 0x2600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateResult_4FE6165A4C2884FF466885A1B2A0006F, 0x2670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SequencePlayer_A17B9CAC4D679ECDC3E50BBF7AB4592C, 0x26B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateResult_2ADD6139431BD160BF4B61B6EDCC4B72, 0x2728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SequencePlayer_E78596C84B86B8829CFADD8406820F1A, 0x2770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateResult_FAADFC574EBD931A568F75A7F044EA18, 0x27E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SequencePlayer_C2E7C2C842BE9AE2674519B2DB35A7DC, 0x2828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SequencePlayer_551E77BD4EACF2B1717296BB1C7E7ABB, 0x2898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_BlendListByBool_804E1BD3470BBA2E9871E58759F9C84B, 0x2908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SequencePlayer_7C2D20AE4C2B6FCDC1CBA18FA053C3E2, 0x29D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_BlendListByBool_94FE8EAE425C61045CE0C8AA500AFC5C, 0x2A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateResult_280CE6CB4A6AC31B76EF0B9EE3AF2E75, 0x2B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SequencePlayer_7BE5D615415665B6DDB9DBB42340AE3D, 0x2B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateResult_41669EAB4A5831D44E5FC3A8891412F7, 0x2BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SequencePlayer_333271904881FA47D32F42BE07C2596A, 0x2C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateResult_23B3F023479209A62C2C7B89C3BF186C, 0x2C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SequencePlayer_60459A6D44CFC952EFAEAD924B6E0C11, 0x2CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateResult_E7C7F2DE430CB5CBAEA4E4BF275AEBAE, 0x2D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SequencePlayer_BB62EE6F47DBBD3777FF12854FA55650, 0x2D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateResult_CF02DBC64515D48CBBEBC080409C0C92, 0x2DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_BlendSpacePlayer_CA51F06F4745FBC7C98802AC2B87CD5E, 0x2E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateResult_A80E8E73438FB9AD34A05E92D543CC54, 0x2F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_BlendSpacePlayer_6CD6F08B4799D597EFA951A91EB6F563, 0x2FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateResult_CF8B7D0B4285B076603A4F985242A678, 0x30D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_BlendListByBool_2698A1CF4D21C0701FF9DD974D77540D, 0x3120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SequencePlayer_E7B72D1C4FC96A65BEE5F89FFC6B3A70, 0x31F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SequencePlayer_621F602A401BC544D7E506BA871088D7, 0x3260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateResult_05B1F4404CAF34E7CF88F883D3AB9922, 0x32D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_BlendListByBool_12CDBDA94A37483D82E92ABB00327A97, 0x3318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SequencePlayer_3BD1F37641343428BC0044AFD6F945BC, 0x33E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SequencePlayer_23CDBF53425B146D9B4529B34DAB4CAE, 0x3458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateResult_3ECC73BA47A0300BFEA7F9B0A97F01AC, 0x34C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_BlendListByBool_6661034540123E16436FE2B308F610D6, 0x3510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SequencePlayer_DE7C2237411260CE192AB4A53195E51D, 0x35E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SequencePlayer_39BA56AE49649D15ACA35CB61631FE89, 0x3650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateResult_C79694E8478BB6DEA65FD98EDA2768D6, 0x36C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_BlendListByBool_A9C41CEC4DE9BC0FF0FEF38FF3F862AB, 0x3708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_BlendSpacePlayer_75D066594DBE29D784251F94DF35C2A4, 0x37D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_BlendSpacePlayer_0D34B8534980D0072B0CD2A3D75EE061, 0x3900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateResult_846273D64CDEDB757717608F6609F258, 0x3A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_BlendSpacePlayer_F49B8CDC4ED99FE80F32DAA80CFC49B8, 0x3A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_BlendListByBool_70D74B3A4AB34CA7E943EAA5761AA6EA, 0x3B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_BlendSpacePlayer_FC77F3B24071B6969CC9BA87E0E9845F, 0x3C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateResult_918613364D7A0503A7EA68837E0B1DBA, 0x3D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_StateMachine_35135FE640F62373B190498B6E65552F, 0x3DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SaveCachedPose_319C944C43FDC5AE52CA0CBA69CF6F7E, 0x3EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_BlendListByBool_BC120CD3436205D22982CF96BCB549EE, 0x3F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_RotationOffsetBlendSpace_0FC2AFA74B23ED80CFC58A9022966850, 0x4028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_Slot_DBFFE6C44A8C7E05328F7990DC4E8FA2, 0x4180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_UseCachedPose_EBF302114B12F83DAFB288B2C7BB4397, 0x41E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_LayeredBoneBlend_BDBA8DF6435076C995E519A74AB4DCBB, 0x4238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_Slot_C10A5C904529B31741578AB14C63DBB4, 0x4318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_RotationOffsetBlendSpace_54A8C6AE4AD5EFA820D99EB1B1947D10, 0x4380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_UseCachedPose_49698C4F4B0D905FCF9B7B95E3D73D35, 0x44D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_UseCachedPose_D5CFD1754F5A84FF7EDEA28CA58B93D4, 0x4528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_BlendListByBool_5E66FAC94E5A306D6882D2B9D44E59E5, 0x4578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_UseCachedPose_D599143D4A3DB0F7589FEE8082AC218A, 0x4648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_LayeredBoneBlend_1A0354DB4116D442D6398995EA9FA662, 0x4698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimGraphNode_SequencePlayer_C52C2A5448B4BA7A95CEC2A3F82B5C74, 0x4778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, IsInAir_, 0x47E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, UnknownData_VJJM, 0x47E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, Speed, 0x47EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, Horizontal, 0x47F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, Vertical, 0x47F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, Character, 0x47F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, LookAtPitch, 0x4800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, LookAtYaw, 0x4804);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, IsCrouch, 0x4808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, IsJump, 0x4809);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, IsSprint, 0x480A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, IsAim, 0x480B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, EffectorAlphaRight, 0x480C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, footDelay, 0x4810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, AnimPlayID, 0x4814);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, PositionGunerX, 0x4818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, IsGunner, 0x481C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, UnknownData_P0GM, 0x481D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, PositionGunerY, 0x4820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, IsBoxPlayer, 0x4824);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, IsProne, 0x4825);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, ZasadaRight, 0x4826);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, ZasadaLeft, 0x4827);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, isLodding, 0x4828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, UnknownData_WNCB, 0x4829);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, lodUpdateTimer, 0x482C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, TypeSprint, 0x4830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, UnknownData_XKQU, 0x4831);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, TypeSkeletalMesh, 0x4834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, IsPistol, 0x4838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, StepsType, 0x4839);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, SprintSide, 0x483A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, Season, 0x483B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, UnknownData_QDZT, 0x483C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, StepSound, 0x4840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimatorBOT_C, IsLocallyControlled, 0x4848);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMixamoBattalionAnimatorBOT_C, 0x4849);
		}

		// class UHeadMountedDisplayFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__HeadMountedDisplayFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeadMountedDisplayFunctionLibrary, 0x0028);
		}

		// class UMotionControllerComponent : public UPrimitiveComponent
		TEST_METHOD(Class__HeadMountedDisplay__MotionControllerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, PlayerIndex, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, Hand, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_96BE, 0x0695);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_AA7Y, 0x0699);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CurrentTrackingStatus, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_A4F8, 0x069D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionControllerComponent, 0x06F0);
		}

		// class UMotionTrackedDeviceFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__MotionTrackedDeviceFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionTrackedDeviceFunctionLibrary, 0x0028);
		}

		// class UVRNotificationsComponent : public UActorComponent
		TEST_METHOD(Class__HeadMountedDisplay__VRNotificationsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializedDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRecenteredDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDLostDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDReconnectedDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDConnectCanceledDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDPutOnHeadDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRemovedFromHeadDelegate, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, VRControllerRecenteredDelegate, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRNotificationsComponent, 0x0180);
		}

		// class AInventoryCharacterRender_Survival_C : public AInventoryCharacterRender_C
		TEST_METHOD(BlueprintGeneratedClass__InventoryCharacterRender_Survival__InventoryCharacterRender_Survival_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_Survival_C, UberGraphFrame, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_Survival_C, PointLight2, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_Survival_C, PointLight1, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_Survival_C, PointLight, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_Survival_C, TORSE_PARTS, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_Survival_C, LEGS_PARTS, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_Survival_C, HANDS_PARTS, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterRender_Survival_C, FOOT_PARTS, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInventoryCharacterRender_Survival_C, 0x04A0);
		}

		// class UMenu_MainMenu_Lobby_C : public UMenu_InGame_Panel_ROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Menu_MainMenu_Lobby__Menu_MainMenu_Lobby_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, UnknownData_BP18, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, UberGraphFrame, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, Button_GameMOde, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, BUTTON_Play, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, CloseLobby, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, ExpectText, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, Image_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, Image_2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, Image_3, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, Image_4, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, Image_8, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, LobbyConfirm, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, LobbyFon, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, LobbyPlayerInLobby0, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, LobbyPlayerInLobby1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, LobbyPlayerInLobby2, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, LobbyPlayerInLobby3, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, LobbyPlayerString, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, LobbyPlayerString_C_1, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, LobbyPlayerString_C_2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, LobbyVerticalBoxOnBase, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, LobbyVerticalBoxOnLine, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, MM_ButtonFon, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, OnBaseLine, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, OnBaseText, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, OnlineLine, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, OnLineText, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, Play, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, TextVBOnBase, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, TextVBOnline, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, Timer, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, PlayersInLobbyWidgets, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, PlState, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, InviteLobbyId, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, IsInLobby, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, UnknownData_078N, 0x0325);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, Sessions, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, SearchesCount, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, IsConnect, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, UnknownData_JCP0, 0x033D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, FriendsArray, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, LiderID, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, Uniq_SendInvite_to, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, proxyLobby, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, UnknownData_AMZS, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Lobby_C, MAIN_MENU_VAR, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenu_MainMenu_Lobby_C, 0x0380);
		}

		// class ACv2_CraftBuildingActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv2_CraftBuildingActor__Cv2_CraftBuildingActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_CraftBuildingActor_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_CraftBuildingActor_C, StaticMesh, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_CraftBuildingActor_C, enableBuilding, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_CraftBuildingActor_C, UnknownData_CJJG, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_CraftBuildingActor_C, OtherComponent, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_CraftBuildingActor_C, 0x0390);
		}

		// class UMAP_CV3TownsMarker_C : public UMapMarkerROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__MAP_CV3TownsMarker__MAP_CV3TownsMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3TownsMarker_C, UnknownData_FFYP, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3TownsMarker_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3TownsMarker_C, Capturing, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3TownsMarker_C, BlinkAnimation, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3TownsMarker_C, Hover, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3TownsMarker_C, Blink, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3TownsMarker_C, Button_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3TownsMarker_C, Circle, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3TownsMarker_C, MAP_RoundProgress, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3TownsMarker_C, TownName, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3TownsMarker_C, MiniMapStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CV3TownsMarker_C, IsBlinked, 0x0281);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMAP_CV3TownsMarker_C, 0x0282);
		}

		// class ACv3_BulletBase_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv3_BulletBase__Cv3_BulletBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, Cone, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, Sphere, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, ProjectileMovement, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, proxyLocation, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, proxyNormal, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, proxyActor, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, WeaponStructure, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, proxyBoneName, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, proxyDamage, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, UnknownData_RBN4, 0x05FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, proxyCrews, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, proxyComponent, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, isHeadShoot, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, UnknownData_QFKZ, 0x0619);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, OwnerPawn, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, proxyWeaponActive, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, WeaponType, 0x0629);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, isShotGun, 0x062A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, UnknownData_HXSV, 0x062B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, myWeaponRange, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, CountShoot, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, shotGunRandomX, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, shotGunRandomY, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, proxyImpulse, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, proxyHitItem, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, UnknownData_GUNC, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, damagedPlayer, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, proxyCv2Character, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, OwnerCharacter, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, countAttacks, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, oldFoliageHitPoints, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_BulletBase_C, isDestroyedProps, 0x0670);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv3_BulletBase_C, 0x0671);
		}

		// class UClothingSimulationFactory : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactory, 0x0028);
		}

		// class UClothingAssetBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, ImportedFilePath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, AssetGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetBase, 0x0048);
		}

		// class AFurniture_14_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture_14_Rig__Furniture_14_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture_14_Rig_C, 0x03C2);
		}

		// class ABuilding_03_miha_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Building_03_miha__Building_03_miha_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_03_miha_C, StaticMesh4, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_03_miha_C, StaticMesh3, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_03_miha_C, StaticMesh2, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_03_miha_C, StaticMesh1, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_03_miha_C, lamp9, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABuilding_03_miha_C, 0x03A0);
		}

		// class ASofa_04_older_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Sofa_04_older__Sofa_04_older_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASofa_04_older_C, 0x0370);
		}

		// class UOpticGUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__OpticGUI__OpticGUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOpticGUI_C, OpticTexture, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOpticGUI_C, 0x0208);
		}

		// class USURV_GlobalMenuExit_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SURV_GlobalMenuExit__SURV_GlobalMenuExit_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuExit_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuExit_C, ExitShow, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuExit_C, BackgroundBlur_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuExit_C, Border_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuExit_C, ConfirmWidgetBase, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuExit_C, Exit, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuExit_C, ExitDelayPanel, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuExit_C, Image_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuExit_C, Image_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuExit_C, MainMenu, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuExit_C, Seconds, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuExit_C, YesNoDialog_MainMenu, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuExit_C, YesNoDialogExit, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuExit_C, UpdateTimer, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuExit_C, Is_MainMenu, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuExit_C, UnknownData_M9DH, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuExit_C, ON_START_EXIT, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuExit_C, SecondsToExit, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuExit_C, Default_SecondsToExit, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuExit_C, ExitBlockTimer, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USURV_GlobalMenuExit_C, 0x0298);
		}

		// class UWP_Rainy_C : public UWeatherPreset_C
		TEST_METHOD(BlueprintGeneratedClass__WP_Rainy__WP_Rainy_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWP_Rainy_C, 0x008C);
		}

		// class ULevelSequence : public UMovieSceneSequence
		TEST_METHOD(Class__LevelSequence__LevelSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, MovieScene, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, ObjectReferences, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, BindingReferences, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, PossessedObjects, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, UnknownData_4WHQ, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequence, 0x0430);
		}

		// class ULevelSequenceBurnInInitSettings : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInInitSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInInitSettings, 0x0028);
		}

		// class ULevelSequenceBurnInOptions : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, bUseBurnIn, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, UnknownData_PAIV, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, BurnInClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, Settings, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInOptions, 0x0050);
		}

		// class ALevelSequenceActor : public AActor
		TEST_METHOD(Class__LevelSequence__LevelSequenceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_55T0, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, bAutoPlay, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_LOME, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, PlaybackSettings, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, SequencePlayer, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, LevelSequence, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, AdditionalEventReceivers, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInOptions, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BindingOverrides, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInInstance, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceActor, 0x03E8);
		}

		// class ULevelSequenceBurnIn : public UUserWidget
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnIn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, FrameInformation, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, LevelSequenceActor, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnIn, 0x0260);
		}

		// class ULevelSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__LevelSequence__LevelSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, OnCameraCut, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, UnknownData_HUWP, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, AdditionalEventReceivers, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, UnknownData_BRKP, 0x0840);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequencePlayer, 0x0890);
		}

		// class ACV3_Map_Actor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__CV3_Map_Actor__CV3_Map_Actor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACV3_Map_Actor_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACV3_Map_Actor_C, DefaultSceneRoot, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACV3_Map_Actor_C, Icon, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACV3_Map_Actor_C, CreatePointer, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACV3_Map_Actor_C, 0x0381);
		}

		// class URegionAttack_C : public UPointer_Root_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__RegionAttack__RegionAttack_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionAttack_C, UnknownData_STVF, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionAttack_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionAttack_C, Border_3, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionAttack_C, MAP_RoundProgress, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionAttack_C, TextBlock_78, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionAttack_C, TextMarker, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionAttack_C, Zone, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URegionAttack_C, 0x0258);
		}

		// class ABuild_7_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Build_8__Build_7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABuild_7_C, 0x0370);
		}

		// class UOverheadWidgetBASE_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__OverheadWidgetBASE__OverheadWidgetBASE_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverheadWidgetBASE_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverheadWidgetBASE_C, CountMeters, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverheadWidgetBASE_C, Image_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverheadWidgetBASE_C, MessageBox, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverheadWidgetBASE_C, NickName, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverheadWidgetBASE_C, Speak, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverheadWidgetBASE_C, OwningCharacter, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverheadWidgetBASE_C, 0x0238);
		}

		// class ABP_TunnnelFan01_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_TunnnelFan01__BP_TunnnelFan01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TunnnelFan01_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TunnnelFan01_C, TunnelFan02, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TunnnelFan01_C, TunnelFan01, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TunnnelFan01_C, DefaultSceneRoot, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TunnnelFan01_C, Ritation_Speed, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TunnnelFan01_C, 0x038C);
		}

		// class USurvMainMenuButton_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SurvMainMenuButton__SurvMainMenuButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, ConfirmAnim, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, Select, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, Hover, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, BorderConfirm, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, Button_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, Button_No, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, Button_Yes, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, Fon, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, Icon, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, Image_4, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, Key, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, Line, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, MenuText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, NormalColor, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, SelectedColor, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, OnClick, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, Text, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, IsSelected, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, UnknownData_AON7, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, HoveredColor, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, UnknownData_IU9A, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, ParentMenu, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, KeyText, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, NeedConfirm, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, KeyAction, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, UnknownData_OTNJ, 0x02F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, IconBrush, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, IconTiontColor, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuButton_C, StaticFon, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvMainMenuButton_C, 0x0399);
		}

		// class AJB_Fence_Static_BP_1_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__JB_Fence_Static_BP_2__JB_Fence_Static_BP_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AJB_Fence_Static_BP_1_C, 0x0370);
		}

		// class Ajb_zabor_broken_C : public AFence_BaseSpawn_C
		TEST_METHOD(BlueprintGeneratedClass__jb_zabor_broken__jb_zabor_broken_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ajb_zabor_broken_C, 0x0380);
		}

		// class UMessage_KillerShipMessage_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Message_KillerShipMessage__Message_KillerShipMessage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_KillerShipMessage_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_KillerShipMessage_C, Show, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_KillerShipMessage_C, Border_3, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_KillerShipMessage_C, Distance, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_KillerShipMessage_C, Fon, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_KillerShipMessage_C, Image_28, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_KillerShipMessage_C, KillerName, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_KillerShipMessage_C, SheepName, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_KillerShipMessage_C, SelfMessage, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_KillerShipMessage_C, UnknownData_Z5HX, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_KillerShipMessage_C, Strukt, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_KillerShipMessage_C, MyTeamColor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessage_KillerShipMessage_C, EnemyTeamColor, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMessage_KillerShipMessage_C, 0x02F0);
		}

		// class ABP_TunnnelFan02_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_TunnnelFan02__BP_TunnnelFan02_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TunnnelFan02_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TunnnelFan02_C, TunnelFan043, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TunnnelFan02_C, TunnelFan042, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TunnnelFan02_C, TunnelFan041, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TunnnelFan02_C, TunnelElement05, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TunnnelFan02_C, DefaultSceneRoot, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TunnnelFan02_C, Ritation_Speed, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TunnnelFan02_C, Ritation_Speed2, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TunnnelFan02_C, Ritation_Speed3, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TunnnelFan02_C, 0x03A4);
		}

		// class ACv3_Grammofon_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv3_Grammofon__Cv3_Grammofon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_Grammofon_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_Grammofon_C, GrammofonEffect, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_Grammofon_C, Box, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_Grammofon_C, Audio, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_Grammofon_C, SkeletalMesh, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_Grammofon_C, DefaultSceneRoot, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_Grammofon_C, isPlay, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_Grammofon_C, UnknownData_SAC1, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_Grammofon_C, MusicWav, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_Grammofon_C, isDestroy, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv3_Grammofon_C, 0x03A9);
		}

		// class UMAP_RoundProgress_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MAP_RoundProgress__MAP_RoundProgress_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_RoundProgress_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_RoundProgress_C, Arrow, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_RoundProgress_C, ColorCircle, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_RoundProgress_C, ProgressBar_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_RoundProgress_C, TextBlock_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_RoundProgress_C, MatInstance, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_RoundProgress_C, Zone, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_RoundProgress_C, OldAlliedsPoint, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_RoundProgress_C, OldAxisPoints, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_RoundProgress_C, DeltaAllieds, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_RoundProgress_C, DeltaAxis, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMAP_RoundProgress_C, 0x0248);
		}

		// class UInfo_LockedWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Info_LockedWidget__Info_LockedWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_LockedWidget_C, Image_1, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_LockedWidget_C, TextBlock_1, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_LockedWidget_C, TextBlock_75, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfo_LockedWidget_C, 0x0218);
		}

		// class UFridge_01_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Fridge_01_AnimBP__Fridge_01_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFridge_01_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFridge_01_AnimBP_C, AnimGraphNode_Root_529EDEA64734B221A35EC4A0F1B7F58E, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFridge_01_AnimBP_C, AnimGraphNode_LocalRefPose_956723C9432D8F83032608B72D5D570F, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFridge_01_AnimBP_C, AnimGraphNode_BlendListByBool_49DB16F349AC56D7E1B99BBD3BE66882, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFridge_01_AnimBP_C, AnimGraphNode_SequencePlayer_7D392324498A4A24C1B983B64BFDFE22, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFridge_01_AnimBP_C, 0x0588);
		}

		// class UAwardCalendarBase_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__AwardCalendarBase__AwardCalendarBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardCalendarBase_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardCalendarBase_C, AwardCalendarPage, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwardCalendarBase_C, Overlay_1, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAwardCalendarBase_C, 0x0218);
		}

		// class Acontainer2_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__container2__container2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acontainer2_C, 0x0378);
		}

		// class AChair_Static_5_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Chair_Static_6__Chair_Static_5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChair_Static_5_C, 0x0370);
		}

		// class UZ_Inventory_Slot_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Z_Inventory_Slot__Z_Inventory_Slot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, Add, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, Backpackicon, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, BlockDrop, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, CanCombineIcon, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, CanDrop, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, CountText, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, EquipSmall, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, Fon, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, Inventory_SlotType_Backpack, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, Inventory_SlotType_Equip, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, MouseWheelZone, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, On_Drag, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, SizeBox_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, SplitProgress, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, Type, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, LootStr, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, Index, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, IsContainer, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, UnknownData_JG2I, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, SlotStr, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, CanDropToThis, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, UnknownData_0IOY, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, ParentSlot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, ChildSlots, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, INVERS_Fon, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, IsGlobalUpdate, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, IsOnFloor, 0x035A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, BigIcon, 0x035B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, CanCombine, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, UnknownData_FFAP, 0x035D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, SplitCount, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, SplitStep, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, OldLootName, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Inventory_Slot_C, SlotType, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZ_Inventory_Slot_C, 0x0371);
		}

		// class A_Rural_house_21_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass___Rural_house_22___Rural_house_21_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, _CraftDoor_Frame, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Door_06_Frame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Door_05_Frame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Door_04_Frame, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Socket_08, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Socket_07, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Socket_05, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Window_02, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Window_big, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Window_05, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Socket_06, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, StaticMesh14, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, StaticMesh13, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, StaticMesh5, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, StaticMesh12, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, StaticMesh11, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, StaticMesh10, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, StaticMesh9, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, StaticMesh7, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, StaticMesh6, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, StaticMesh4, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, StaticMesh2, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Door_06_Door_06_glass, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Chimney_Metal_Detail, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, big_glass, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, StaticMesh8, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Window_04, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, StaticMesh3, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Window_03, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, StaticMesh1, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Windows_01, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Socket_04, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Door_02_Door_02_details, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Door_02_Door_02, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Door_02_Frame, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Door_06_Door_06_Details, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Door_06_Door_06, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Door_03_Frame, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Fireplace_01, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Socket_03, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Socket_02, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Socket_01, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Electrical_Box_01, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Chimney_02, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Foundation_01, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Porch_01_Porch_01, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Peak_01, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Roof_11, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_21_C, Attic_01, 0x04F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_Rural_house_21_C, 0x0500);
		}

		// class ULoadingScreen_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LoadingScreen__LoadingScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreen_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreen_C, End, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreen_C, Start, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreen_C, Play, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreen_C, BackgroundBlur_38, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreen_C, Image_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreen_C, ProgressBar_1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreen_C, TimeText, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreen_C, Screen_is_black, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreen_C, Game, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreen_C, UnknownData_XMAY, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreen_C, Time, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreen_C, StartTime, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoadingScreen_C, 0x024C);
		}

		// class AFences_05_x3_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Fences_05_x3__Fences_05_x3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFences_05_x3_C, StaticMesh2, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFences_05_x3_C, StaticMesh1, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFences_05_x3_C, 0x0388);
		}

		// class UInventoryBOXPanel_C : public UInventoryPanelsROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__InventoryBOXPanel__InventoryBOXPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBOXPanel_C, UberGraphFrame, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBOXPanel_C, Fon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBOXPanel_C, GridPanel_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBOXPanel_C, Header, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBOXPanel_C, Image_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBOXPanel_C, InventoryBackPackCard, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBOXPanel_C, InventoryBackPackCard_1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBOXPanel_C, InventoryBackPackCard_2, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBOXPanel_C, InventoryBackPackCard_3, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBOXPanel_C, InventoryBackPackCard_4, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBOXPanel_C, InventoryBackPackCard_5, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBOXPanel_C, InventoryBackPackCard_6, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBOXPanel_C, InventoryBackPackCard_7, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBOXPanel_C, InventoryBackPackCard_8, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBOXPanel_C, VerticalBox_1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBOXPanel_C, HeaderOfBox, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryBOXPanel_C, 0x02E8);
		}

		// class AFenceMetalWinter_x6_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__FenceMetalWinter_x6__FenceMetalWinter_x6_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFenceMetalWinter_x6_C, StaticMesh3, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFenceMetalWinter_x6_C, StaticMesh2, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFenceMetalWinter_x6_C, StaticMesh1, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFenceMetalWinter_x6_C, StaticMesh5, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFenceMetalWinter_x6_C, StaticMesh6, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFenceMetalWinter_x6_C, 0x03A0);
		}

		// class ACv2_SearchLight_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv2_SearchLight__Cv2_SearchLight_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SearchLight_C, SpotLight, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SearchLight_C, Searchlight_01, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SearchLight_C, Light, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SearchLight_C, isDestroy, 0x0379);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_SearchLight_C, 0x037A);
		}

		// class Apogarka_static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__pogarka_static_BP__pogarka_static_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Apogarka_static_BP_C, ChildActor4, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::Apogarka_static_BP_C, ChildActor3, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::Apogarka_static_BP_C, ChildActor2, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::Apogarka_static_BP_C, ChildActor1, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::Apogarka_static_BP_C, ChildActor, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::Apogarka_static_BP_C, Ladder_BP1, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Apogarka_static_BP_C, 0x03A0);
		}

		// class AContainer_02_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Container_02__Container_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AContainer_02_C, 0x0378);
		}

		// class UInventoryCraftResourceSlot_C : public UInventorySlotsRoot_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__InventoryCraftresourceSlot__InventoryCraftResourceSlot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftResourceSlot_C, UnknownData_6KM9, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftResourceSlot_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftResourceSlot_C, Hover, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftResourceSlot_C, Count, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftResourceSlot_C, Fon, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftResourceSlot_C, Icon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftResourceSlot_C, ProgressBar_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftResourceSlot_C, ResourceName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftResourceSlot_C, HoverColor, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftResourceSlot_C, UnHoverColor, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftResourceSlot_C, IsHovered_1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftResourceSlot_C, UnknownData_40WW, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftResourceSlot_C, LootCargoType, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftResourceSlot_C, CountClick, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftResourceSlot_C, Root, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftResourceSlot_C, IsEmpty, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftResourceSlot_C, UnknownData_RQJ0, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftResourceSlot_C, LootIndex, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftResourceSlot_C, NowRecourseCount, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryCraftResourceSlot_C, NeedRecourcecount, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryCraftResourceSlot_C, 0x02C0);
		}

		// class AFence_Metal_Wire_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Fence_Metal_Wire_Static_BP__Fence_Metal_Wire_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFence_Metal_Wire_Static_BP_C, 0x0370);
		}

		// class UInfo_SliderSlot_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Info_SliderSlot__Info_SliderSlot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_SliderSlot_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_SliderSlot_C, Selected, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_SliderSlot_C, Image_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_SliderSlot_C, MI, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfo_SliderSlot_C, 0x0220);
		}

		// class APostTower_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__PostTower_Static_BP__PostTower_Static_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APostTower_Static_BP_C, Ladder_BP1, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APostTower_Static_BP_C, 0x0378);
		}

		// class AGates_Static_BP1_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Gates_Static_BP1__Gates_Static_BP1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGates_Static_BP1_C, gateMetaStolb_L, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGates_Static_BP1_C, gateMetal_R, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGates_Static_BP1_C, gateMetal_L, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGates_Static_BP1_C, 0x0388);
		}

		// class AstheelPenthouse_static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__stheelPenthouse_static_BP__stheelPenthouse_static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstheelPenthouse_static_BP_C, 0x0370);
		}

		// class UMovieSceneSignedObject : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSignedObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, Signature, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, UnknownData_1BOY, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSignedObject, 0x00B0);
		}

		// class UMovieScene : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieScene)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Spawnables, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Possessables, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ObjectBindings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MasterTracks, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CameraCutTrack, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, SelectionRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, PlaybackRange, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, bForceFixedFrameIntervalPlayback, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, UnknownData_RV4U, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, FixedFrameInterval, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, InTime, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, OutTime, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, StartTime, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, EndTime, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene, 0x0130);
		}

		// class UMovieSceneBindingOverrides : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, UnknownData_5ODE, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, BindingData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, UnknownData_NV5D, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOverrides, 0x0098);
		}

		// class UMovieSceneBindingOverridesInterface : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOverridesInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOverridesInterface, 0x0028);
		}

		// class UMovieSceneBindingOwnerInterface : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOwnerInterface, 0x0028);
		}

		// class UMovieSceneBuiltInEasingFunction : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBuiltInEasingFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_96DA, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, Type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_O28Y, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBuiltInEasingFunction, 0x0038);
		}

		// class UMovieSceneEasingExternalCurve : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneEasingExternalCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, UnknownData_MOO0, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, Curve, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingExternalCurve, 0x0038);
		}

		// class UMovieSceneEasingFunction : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneEasingFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingFunction, 0x0028);
		}

		// class UMovieSceneFolder : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneFolder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, FolderName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildFolders, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildMasterTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildObjectBindingStrings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, UnknownData_TDSS, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFolder, 0x0070);
		}

		// class UMovieSceneTrack : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvalOptions, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_WYZS, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrack, 0x00B8);
		}

		// class UMovieSceneNameableTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__MovieSceneNameableTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNameableTrack, 0x00B8);
		}

		// class UMovieSceneSection : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EvalOptions, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_N7DR, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, Easing, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, StartTime, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EndTime, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, RowIndex, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, OverlapPriority, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_N2PU, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PrerollTime, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostrollTime, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, BlendType, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_YCXE, 0x010E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSection, 0x0110);
		}

		// class UMovieSceneSegmentCompilerTestTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__MovieSceneSegmentCompilerTestTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSegmentCompilerTestTrack, UnknownData_GBUB, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSegmentCompilerTestTrack, SectionArray, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSegmentCompilerTestTrack, 0x00D0);
		}

		// class UMovieSceneSegmentCompilerTestSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__MovieSceneSegmentCompilerTestSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSegmentCompilerTestSection, 0x0110);
		}

		// class UMovieSceneSequence : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, EvaluationTemplate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, TemplateParameters, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, UnknownData_G90G, 0x02D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, InstancedSubSequenceEvaluationTemplates, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bParentContextsAreSignificant, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, UnknownData_5XOO, 0x0329);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequence, 0x0330);
		}

		// class UMovieSceneSequencePlayer : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_RRLB, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlay, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlayReverse, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnStop, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPause, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnFinished, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Status, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_Y7I1, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_UD4R, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Sequence, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, TimeCursorPosition, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, StartTime, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, EndTime, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, CurrentNumLoops, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_M1L2, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackSettings, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_8THW, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequencePlayer, 0x07F0);
		}

		// class Acontainer9_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__container9__container9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acontainer9_C, 0x0378);
		}

		// class ASurv_GameState_C : public AGameState
		TEST_METHOD(BlueprintGeneratedClass__Surv_GameState__Surv_GameState_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_GameState_C, UberGraphFrame, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_GameState_C, Cv4_DataBaseUpdateAndGet, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_GameState_C, VaRestFunctionsComponent, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_GameState_C, DefaultSceneRoot, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_GameState_C, BarigaAll, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_GameState_C, TOP_GLOBAl_clientOnly_, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_GameState_C, TOP_WEEK, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_GameState_C, TopResponce, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurv_GameState_C, 0x0420);
		}

		// class ATransformator_C_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Transformator_C_Static_BP__Transformator_C_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATransformator_C_Static_BP_C, 0x0370);
		}

		// class APodezd_02_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Podezd_02__Podezd_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APodezd_02_C, 0x0378);
		}

		// class Agarage02_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__garage02__garage02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agarage02_C, 0x0378);
		}

		// class Acupboard2_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__cupboard2__cupboard2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acupboard2_C, 0x0370);
		}

		// class ASurvBarigaBaseActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SurvBarigaBaseActor__SurvBarigaBaseActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvBarigaBaseActor_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvBarigaBaseActor_C, Z_InventoryComponent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvBarigaBaseActor_C, DefaultSceneRoot, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvBarigaBaseActor_C, Slots, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvBarigaBaseActor_C, Barigi, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvBarigaBaseActor_C, TradeStr, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurvBarigaBaseActor_C, Is_Main, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurvBarigaBaseActor_C, 0x03E1);
		}

		// class UFurniture2_07_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture2_07_AnimBP__Furniture2_07_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_07_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_07_AnimBP_C, AnimGraphNode_Root_C921FB454567AA15AB0DA4924438FECD, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_07_AnimBP_C, AnimGraphNode_LocalRefPose_5F0CB3124ADD94798A3EC2BCA8EAB0DE, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_07_AnimBP_C, AnimGraphNode_BlendListByBool_D44A83444C42DCC8D2CFD893DB77B058, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_07_AnimBP_C, AnimGraphNode_SequencePlayer_8AC6B32D451F26109AEEF5BF2930592A, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture2_07_AnimBP_C, 0x0588);
		}

		// class AFow_Bot_CheckPoint_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Fow_Bot_CheckPoint__Fow_Bot_CheckPoint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_Bot_CheckPoint_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_Bot_CheckPoint_C, Billboard, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_Bot_CheckPoint_C, Sphere, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_Bot_CheckPoint_C, ID, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFow_Bot_CheckPoint_C, 0x0384);
		}

		// class UPointer_EnemyShtab_C : public UPointer_Root_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Pointer_EnemyShtab__Pointer_EnemyShtab_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_EnemyShtab_C, UnknownData_0D87, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_EnemyShtab_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_EnemyShtab_C, Border_3, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_EnemyShtab_C, TextBlock_78, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointer_EnemyShtab_C, 0x0240);
		}

		// class UFurniture2_24_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture2_24_AnimBP__Furniture2_24_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_24_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_24_AnimBP_C, AnimGraphNode_Root_80F7038B4773CEE97D00AB8021B05C44, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_24_AnimBP_C, AnimGraphNode_LocalRefPose_3507D15E4E557F35609C688E6453CBBB, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_24_AnimBP_C, AnimGraphNode_BlendListByBool_DE10756A48C57B24B285D2B872888472, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_24_AnimBP_C, AnimGraphNode_SequencePlayer_CC90FB364357D10F99DB6384E304237C, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture2_24_AnimBP_C, 0x0588);
		}

		// class AContainerC_Static_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__ContainerC_Static__ContainerC_Static_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AContainerC_Static_C, 0x0370);
		}

		// class UMixamoBattalionAnimator_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__MixamoBattalionAnimator__MixamoBattalionAnimator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, UnknownData_GV7F, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_BlendListByBool_AAD2D6A047F1CB434159F996AD0F645D, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_RotationOffsetBlendSpace_75E3DE0A42049129BE884D8DDEDEFE6C, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_Slot_846FFC954467483E50C9149D6634CC20, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SaveCachedPose_ACED6E104C9D808A470AAB9F10D8128B, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_LayeredBoneBlend_D2ECBF69431170DA12E99DA17BCBBF23, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_Slot_934BF7D94E791C7C6DD76DA224CEC2B7, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_RotationOffsetBlendSpace_B84941AB4AAF203855E9B186785B0ADC, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_UseCachedPose_A6BABBAD461653BE49F5ABA19E85754A, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_UseCachedPose_28A31F2F49B8ABE75123A2868616DBBD, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_D754B29F421D1D998D02D3A71CF856DD, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_EFABBCA1490ABBE7E4619B95F2415C5A, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_A00F37A544764EAC2812D78854A130F5, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_DFE9CFE941227429CF7631863FE3484C, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_421355AC41CCA273FF48D4919E3BC6AC, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_EABD264645B103715F9A368DEBC4A660, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_607932524A691CCA405D37BEDE4A25EE, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_86BE5F8E42FF985C7A0B5191E5AB5113, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_562492E54A33E834C3937BBFFDA30AB9, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_34C673424232F371D9C2FD917E27B648, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_B6AA70BE4C6CA7E9B603AA876EC57210, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_B28472424585A54C38930F86384BADC4, 0x0FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_E0266567476ACF3B5CE7F3AAF162B7FD, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_FA69590443C64085029980A306326B58, 0x10C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_C5C43C7248B78C3472BF20B936660237, 0x1140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_77F1A84D4C829389959FA28FE87425C7, 0x11C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_165C1435453E7DC0397D7392C7185BE8, 0x1240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_444EDB2F4C4B64FF24F6DDA4B5777476, 0x12C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_866D9E474CD70BB12C6D19BB4BC672AD, 0x1340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_367B672244841DC79F83FE94F497809E, 0x13C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_696ADA7C4DA2353AC5A783A0FFA0890C, 0x1440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_C1C889CB4D2786996EC5CCB6C3556530, 0x14C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_7C54D86B42A2C9499174D78CADFF59D3, 0x1540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_2B153A074813E68E8B09CC83CF5FFC84, 0x15C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_38B8F9A04DEF12274FA2978C4D0EF359, 0x1640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_2C06E1084E2F8BA3B5884BAF96EA97D0, 0x16C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_ECF433EE4BF132667402AE99DD35DD31, 0x1740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_AF199C8544728971539B1F9938A26C1B, 0x17C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_55FFBBF9493401FCBF350C919E1B4CBD, 0x1840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_BE3959784DC667FA51D23E9DD25702E3, 0x18C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_68AADC8B4E25A3293AB4CCBF4F8C3AEE, 0x1940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_BB78D9884BE856373E021B8A67E09326, 0x19C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_2FEF49E540AB00AC73BB6E8BEF85D710, 0x1A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_391166654928E1EED22BCFB43D836C4B, 0x1AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_811675EA4D255659B6D584930A247DA6, 0x1B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_FD3566A746F643852CCBA3BA509CACF9, 0x1BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_5BA9B91B4E33DCEE4109E99AC9D00D0D, 0x1C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_26D2F613465C3CEE9C48E495A7F468CF, 0x1CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_00484A5B4E7451C4A7F337A7C183DF9C, 0x1D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_B69813DC418DCCF06E3A50936B675395, 0x1D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_A50303734A9031EAD9901ABF260BC07D, 0x1DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_176397C348536CD894ECDFA9E1430E9C, 0x1E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_22829FC44A766464A62A4BB64672FFBE, 0x1EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_4BD765A74D4693BFC432AAA5E3F30E25, 0x1EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_F0062F5849F9F416CB3C2FAF6BAB913C, 0x1F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_F18F47AB44B178C7C3B991B7837FFBA1, 0x1FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_ADBAB9144172BFF76CFE96B16D6207A2, 0x2010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_F6D491CD4F03AE9EDCCB7294CB760E47, 0x2058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_7C1D50C642DD1D1F579A30849E572FD8, 0x20C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_CA637FDA442242125102D4ACF5A9F11F, 0x2138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_BlendListByBool_F48220E440B03DBB2328DEBB7A74B64B, 0x21A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_BlendListByBool_E31603BB426D195159F0BCB29EA51E6A, 0x2278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_A039F8ED4AB5A4E847877EAA6910ED9A, 0x2348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_67C27F3442B2666833DCA78BD5B3B1CD, 0x2390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_D50155DE446A2D3FA8CB8884DB750DBF, 0x2400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_DB3F56E949B54DF8F6E330A81A651736, 0x2448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_D5BC63604AE978C92290CBA15EF50639, 0x24B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_82B2655740E9C2774FFAFCA752DE863C, 0x2500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_002F3803495183A8DA6DF2875CFDBD46, 0x2570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_AAFA9AEF40BBA757646D3D8D2CBF1473, 0x25B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_E97F54544B2FCF2A4D0F68B0FE1A4B32, 0x2628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_BlendSpacePlayer_8505D5FB4F6415AD74DD1E97F3B2C946, 0x2670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_BF531897466E21D39CF1EFBC547DBA61, 0x2798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_BlendSpacePlayer_D6C36C60402F3D3FD77387A60EE7FB33, 0x27E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_EED7AE144655AAF601F55FA3B3173654, 0x2908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_BlendListByBool_B28EC42A4A0D1B07C436AA965945D360, 0x2950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_F4FB46A144BD1AC7528DA5AE2BF6CFBF, 0x2A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_5E267541409C3CC82515C9B280D0B437, 0x2A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_E3B8534A4C281C175EB887B923BEDA44, 0x2B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_BlendListByBool_075513D3458E65CC7A1BFD943E9AD288, 0x2B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_4AB7D660430271F2B4160994CFD89472, 0x2C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_53EC78F64DCE369B8C3C1DA528394D5A, 0x2C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_07C4F777414A9295707BCD8EEA9D0B48, 0x2CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_BlendListByBool_C2D06657423C4978D4D7678144A62652, 0x2D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_47124E1C49D145FEEF54AFAA52CC7AAA, 0x2E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_B1F341B0443AB09CE17DF0BFB1ECF98B, 0x2E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_42B16304443F9C812FAEADA02298EF19, 0x2EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_BlendListByBool_A8EBA29B4D9AAE41778254952BBF7094, 0x2F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_BlendSpacePlayer_89BB3C8A4F751076274DCFB257C0763A, 0x3008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_BlendSpacePlayer_714CD04842A246B9E083BAA3D8413DC4, 0x3130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_BF8B15A34A5820B8EB36B88D178E6208, 0x3258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_BlendSpacePlayer_C404EF77468D7D5327179CABF5AE3085, 0x32A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_BlendListByBool_35D71D7E4254391DF8795EB37C256BE2, 0x33C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_BlendSpacePlayer_C9B964B84A0751D941C0B8B662A6462F, 0x3498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_3A1E3022427C29BEAD9616A5261E0CAE, 0x35C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateMachine_BBAAE99040AA0FFA2CC5A8841BEFCE2C, 0x3608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SaveCachedPose_C25F585F480AF0BFE41D1AA5A6B2706A, 0x36E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, UnknownData_TQH2, 0x3788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_39A5602A49839606177E8BB161152E77, 0x3790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_286B47044348E9EDCAEDA58099A22C58, 0x3810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_32EDC20A430FFFAAAF1EF7AF317E1AEC, 0x3890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_0D5DFC8043E52D09432F27A1D6B5E887, 0x3910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_DC3FAA554D39D990349C94BD083526E2, 0x3990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_87ACAE244CC1F328EAD4529600FCB74E, 0x3A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_2E05D11B44624ADFE4BE06BC24B19D29, 0x3A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_4B00D27A46FCA6F6B3709FB3C2BFA4A1, 0x3B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_65A20ABF4E119F33A7938DB7DADF81C6, 0x3B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_304950724A537C31E9F6E688B974F042, 0x3C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_169DFD0843EF39B957B81A84F63F162D, 0x3C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_449E612F41CE177BBB703DA955871CD3, 0x3D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_C80B0C544DC124C8A3A97F88EC36A1A9, 0x3D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_20FC9A9B41B4432ED1DBAE9422CFC6D2, 0x3E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_026F7C0E447E942FA609F1B934C40BDC, 0x3E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_TransitionResult_2DC7F65B4C771374374FA2AF7FD9C8BE, 0x3F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_ACCCFE3B4EA3BA086A399283ECB86D5F, 0x3F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_A08F8D65447DA0DF0607DDABB12FC0D5, 0x4000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_D1F25ACD49E0436D856E5FA70CBF43F6, 0x4048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_97CA504C469A82AA708DFFBC00EF524F, 0x40B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_E8B5B90A4BE242ABDCA0DAB6F0B49ACB, 0x4100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_1A58E5434AA5FD8CF59FDA97C81C1872, 0x4170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_48B759BB45EF5EF82B3BF2A502A8EAE5, 0x41B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_2A1CFE364688FD1F6026EF8F5FE82453, 0x4228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_3682E54344BCB2CAC6EE5186BED5670D, 0x4270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_3887158B4E83C7D67855849D42FF4384, 0x42E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_BlendSpacePlayer_F8A4DBBA460717E3E60CE2AFCD006716, 0x4328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_7DC80E63463CBBC4E0BF7C8B3B7C71E1, 0x4450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_A9A078C847D2727DD252A291AD202BB7, 0x4498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_91C0AF794212994BD1053BA0C07A741A, 0x4508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_BlendSpacePlayer_122BE8DF45F2C9F0868456BD244CD6C6, 0x4550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateResult_7487735847472E88969FDDB42E05B5AD, 0x4678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_StateMachine_8809731249BF5E76059354A06485155C, 0x46C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_Root_683D6C4142AABC4E72DECB929F1EFC27, 0x4798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_SequencePlayer_384FF9D94AF52161DC9B3AB70F2FB966, 0x47E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_LayeredBoneBlend_2FB565BA42C77C35363894B6555206A9, 0x4850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_BlendListByBool_BE3B13D642D3A96BB29EE3A38947889E, 0x4930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_UseCachedPose_0A61CDCB493743D10B7579A2CAEA5BC8, 0x4A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_Slot_9190C1F54770E3D1D81803A39E444935, 0x4A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_UseCachedPose_353696E2408B21A292535DBD39851208, 0x4AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_UseCachedPose_F7462469474F23426B9AD29854970238, 0x4B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimGraphNode_LayeredBoneBlend_7ABBFC8A434BCD7EB70D3FB81173CEDD, 0x4B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, IsInAir_, 0x4C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, UnknownData_8Q6O, 0x4C39);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, Speed, 0x4C3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, Horizontal, 0x4C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, Vertical, 0x4C44);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, Character, 0x4C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, LookAtPitch, 0x4C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, LookAtYaw, 0x4C54);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, IsCrouch, 0x4C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, IsJump, 0x4C59);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, IsSprint, 0x4C5A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, IsAim, 0x4C5B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, EffectorAlphaRight, 0x4C5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, footDelay, 0x4C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, AnimPlayID, 0x4C64);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, PositionGunerX, 0x4C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, IsGunner, 0x4C6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, UnknownData_8Y6Y, 0x4C6D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, PositionGunerY, 0x4C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, IsBoxPlayer, 0x4C74);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, IsProne, 0x4C75);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, ZasadaRight, 0x4C76);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, ZasadaLeft, 0x4C77);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, lodUpdateTimer, 0x4C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, TypeSprint, 0x4C7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, IsPistol, 0x4C7D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, StepsType, 0x4C7E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, SprintSide, 0x4C7F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, Season, 0x4C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, UnknownData_9XLD, 0x4C81);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, StepSound, 0x4C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, IsLocallyControlled, 0x4C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, isWeaponUp, 0x4C91);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, UnknownData_XACT, 0x4C92);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, RIfleIdleAnimation, 0x4C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, DisableMove, 0x4CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, UnknownData_XPN4, 0x4CA1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMixamoBattalionAnimator_C, Velocity, 0x4CA4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMixamoBattalionAnimator_C, 0x4CA8);
		}

		// class UMap_SortButton_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Map_SortButton__Map_SortButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_SortButton_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_SortButton_C, Button_1, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_SortButton_C, Sort, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_SortButton_C, Text, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_SortButton_C, ButtonName, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_SortButton_C, ButtonClick, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_SortButton_C, FromMin, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMap_SortButton_C, 0x0249);
		}

		// class UInfoWeaponSlider_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InfoWeaponSlider__InfoWeaponSlider_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWeaponSlider_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWeaponSlider_C, Show, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWeaponSlider_C, Border_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWeaponSlider_C, Info_SliderSlot_2, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWeaponSlider_C, Info_SliderSlot_3, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWeaponSlider_C, Info_SliderSlot_4, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWeaponSlider_C, Info_SliderSlot_5, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWeaponSlider_C, Info_SliderSlot_6, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWeaponSlider_C, Info_SliderSlot_7, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWeaponSlider_C, Info_SliderSlot_8, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWeaponSlider_C, Info_SliderSlot0, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWeaponSlider_C, SlotsArray, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWeaponSlider_C, PreviousIndex, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWeaponSlider_C, CurentIndex, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWeaponSlider_C, Root, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWeaponSlider_C, IsShow, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWeaponSlider_C, UnknownData_4I78, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoWeaponSlider_C, ZLootArray, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfoWeaponSlider_C, 0x0290);
		}

		// class A_Rural_house_16_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass___Rural_house_17___Rural_house_16_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, _CraftDoor_Frame, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Door_06_Frame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Door_05_Frame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Door_04_Frame, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Socket_08, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Socket_07, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Socket_05, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Window_02, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Window_big, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Window_05, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Socket_06, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, StaticMesh16, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, StaticMesh15, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, StaticMesh13, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, StaticMesh14, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, StaticMesh8, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, StaticMesh12, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, StaticMesh11, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, StaticMesh10, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, StaticMesh9, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, StaticMesh7, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, StaticMesh6, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, StaticMesh4, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, StaticMesh2, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Door_06_Door_06_glass, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Chimney_Metal_Detail, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Glass_01, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, big_glass, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, StaticMesh5, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Window_04, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, StaticMesh3, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Window_03, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, StaticMesh1, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Windows_01, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Socket_04, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Door_02_Door_02_details, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Door_02_Door_02, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Door_02_Frame, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Door_06_Door_06_Details, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Door_06_Door_06, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Door_03_Frame, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Fireplace_01, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Socket_03, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Socket_02, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Socket_01, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Electrical_Socket_02, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Electrical_Box_01, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Chimney_02, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Foundation_01, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Porch_01_Porch_01, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Peak_01, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Roof_11, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_16_C, Attic_01, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_Rural_house_16_C, 0x0520);
		}

		// class ARoad_Debris3_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Road_Debris3__Road_Debris3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARoad_Debris3_C, 0x0378);
		}

		// class UGhoulDeathAnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__GhoulDeathAnimBP__GhoulDeathAnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhoulDeathAnimBP_C, UnknownData_VL1R, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhoulDeathAnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhoulDeathAnimBP_C, AnimGraphNode_Root_0A74ED2B4D4D95B852512F9DAC209375, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhoulDeathAnimBP_C, AnimGraphNode_SequencePlayer_E91F2F51404CBCF7A817C4906884B09F, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhoulDeathAnimBP_C, RandomDeathAnim, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGhoulDeathAnimBP_C, 0x0488);
		}

		// class Anastil_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__nastil__nastil_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Anastil_C, 0x0378);
		}

		// class AWoodFence_kalitka_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WoodFence_kalitka__WoodFence_kalitka_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWoodFence_kalitka_C, 0x0370);
		}

		// class UBaseWeapon_MK2_Grenade_Skeleton_AnimBlueprint_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__BaseWeapon_MK2_Grenade_Skeleton_AnimBlueprint__BaseWeapon_MK2_Grenade_Skeleton_AnimBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseWeapon_MK2_Grenade_Skeleton_AnimBlueprint_C, UnknownData_U5PL, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseWeapon_MK2_Grenade_Skeleton_AnimBlueprint_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseWeapon_MK2_Grenade_Skeleton_AnimBlueprint_C, AnimGraphNode_Root_46A301FA4D87462DCB8D83A5305E835D, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseWeapon_MK2_Grenade_Skeleton_AnimBlueprint_C, AnimGraphNode_Slot_251DF65D474EFD71D9F6BF81EC2ED09A, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseWeapon_MK2_Grenade_Skeleton_AnimBlueprint_C, AnimGraphNode_SequencePlayer_83CBAD5241DE43D07499CEB6D43BB1F2, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseWeapon_MK2_Grenade_Skeleton_AnimBlueprint_C, 0x04E8);
		}

		// class APodezd_01_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Podezd_01__Podezd_01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APodezd_01_C, _9_storey_tile_house_bench_02, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APodezd_01_C, _9_storey_tile_house_bench_01, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APodezd_01_C, 0x0388);
		}

		// class UFurniture_03_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture_03_AnimBP__Furniture_03_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_03_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_03_AnimBP_C, AnimGraphNode_Root_56DEB7F146B15AC6E5152CB0A45A46CB, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_03_AnimBP_C, AnimGraphNode_LocalRefPose_6C5559EB4462617B259E9A970879AAD6, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_03_AnimBP_C, AnimGraphNode_BlendListByBool_CAA4DF9843396738927BA49B9CB0471A, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_03_AnimBP_C, AnimGraphNode_SequencePlayer_E681953849B99326EA67099801111714, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture_03_AnimBP_C, 0x0588);
		}

		// class UWP_Smoky_C : public UWeatherPreset_C
		TEST_METHOD(BlueprintGeneratedClass__WP_Smoky__WP_Smoky_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWP_Smoky_C, 0x008C);
		}

		// class AHospital2_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Hospital2__Hospital2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh86, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh85, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh84, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh83, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _CraftDoor_Frame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor42, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor41, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh21, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh30, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh22, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh31, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh25, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh28, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh23, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh24, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh29, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Radio_03, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Radio_01, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Radio_05, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, chair9, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh11, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor40, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor39, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor38, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor37, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, garbage41, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, garbage3, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, garbage2, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, garbage10, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, garbage11, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, masks3, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh82, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh81, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Chair_Destroyed_01_Military, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Bed_Destroyed_01_Military1, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh80, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh79, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh78, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Furniture_Mattress011, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh77, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor36, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor35, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor34, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_152, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Iron_Cabinet_Destroyed_02_Military, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh76, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh75, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh72, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Furniture_Mattress01, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_023, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Blanket_03_2_Military1, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Mattress_01_Military2, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_034, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Mattress_03_Military, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_041, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Bed_01_Military3, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_022, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Cabinet_Destroyed_02_Military, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Mattress_04_Military1, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Mattress_02_Military, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Furniture2_042, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh74, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor33, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh73, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh71, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor32, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor31, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh70, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh69, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Bed_01_Military2, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Cabinet_Destroyed_03_Military, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Blanket_03_2_Military, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_04, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_01, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Bed_04_Military1, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh68, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh67, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh66, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh65, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor30, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor29, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, WoodBox, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh43, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh42, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh41, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh40, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh26, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor28, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, File_Cabinet_5, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Bed_021, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, File_Cabinet, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Bed_011, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh64, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh63, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh62, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh61, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh60, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh59, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh58, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh57, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh56, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_021, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_102, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_06, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh55, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh54, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh53, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, chair91, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Table_05, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_082, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, TV_01older2, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Table_08older1, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_093, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Sofa_05older, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_162, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh52, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh51, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh50, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh49, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh48, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh47, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor27, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor26, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Bed_Destroyed_02_Military, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Furniture2_032, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor25, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor24, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh46, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor11, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh45, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor10, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_122, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Mattress_01_Military1, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_033, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Bed_04_Military, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, garbage4, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, garbage1, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_16, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh44, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Crate_B_lod0, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh39, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh38, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh27, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh19, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, chair11, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor4, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh17, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Iron_Cabinet_02_Military, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh15, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh13, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh4, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Sofa, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Bed_02, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Bed_01, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, TV_01, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Mattress_04_Military, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor23, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor22, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor21, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor20, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, table3, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_17, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh34, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh37, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh36, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh35, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor19, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Mattress_01_Military, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor18, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, masks4, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor17, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor12, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Bed_02_Military, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Bed_Destroyed_01_Military, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor13, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh33, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh32, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh20, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Table_011, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_071, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_11, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Table_032, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_081, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Furniture2_041, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh18, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor16, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh16, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor15, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor14, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh14, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_012, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_092, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh12, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Bed_03_Military, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Bed_01_Military1, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_032, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_011, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_08, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_14, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_031, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Furniture2_04, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, time4, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Table_081, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_02, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_03, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Table_03, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_091, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh10, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh9, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh8, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Sofa_01, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Table_08, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Furniture2_03, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_13, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh7, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor9, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh6, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor8, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor7, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor6, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh5, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor5, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh3, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor3, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor2, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh2, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor1, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, ChildActor, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, _SpawnFurnitur_09, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, StaticMesh1, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHospital2_C, Bed_01_Military, 0x0AA8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHospital2_C, 0x0AB0);
		}

		// class USK_Crazy_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__SK_Crazy_AnimBP__SK_Crazy_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_Crazy_AnimBP_C, UnknownData_9A26, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_Crazy_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_Crazy_AnimBP_C, AnimGraphNode_Root_51B6E6C2494AF8113AD022A488EA5EF8, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_Crazy_AnimBP_C, AnimGraphNode_BlendSpacePlayer_89AA85BB4AEEA25ADFD4D68745B55203, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_Crazy_AnimBP_C, AnimGraphNode_Slot_A4DA092A4A83BA915993738CC8A70BDE, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_Crazy_AnimBP_C, Speed, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_Crazy_AnimBP_C, UnknownData_GI7W, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USK_Crazy_AnimBP_C, Creature, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USK_Crazy_AnimBP_C, 0x05B0);
		}

		// class ARadio_static_11_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Radio_static_12__Radio_static_11_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARadio_static_11_C, 0x0370);
		}

		// class ACv2_TankShell_Large_C : public ACv2_RocketActor_C
		TEST_METHOD(BlueprintGeneratedClass__Cv2_TankShell_Large__Cv2_TankShell_Large_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_TankShell_Large_C, 0x04B8);
		}

		// class UFurniture_16_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture_16_AnimBP__Furniture_16_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_16_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_16_AnimBP_C, AnimGraphNode_Root_E4E0ECD04B9932CDB93A17B9B87BD46B, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_16_AnimBP_C, AnimGraphNode_LocalRefPose_55D8F62546E94700922AA88BDB527D98, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_16_AnimBP_C, AnimGraphNode_BlendListByBool_F8DDCD42473340201647CA9F5FB9E4D4, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_16_AnimBP_C, AnimGraphNode_SequencePlayer_BDB2BDD8408D44FB8B3D7B87E3D670C3, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture_16_AnimBP_C, 0x0588);
		}

		// class APosadka_static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Posadka_static_BP__Posadka_static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APosadka_static_BP_C, 0x0370);
		}

		// class URenderWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__RenderWidget__RenderWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URenderWidget_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::URenderWidget_C, Image_25, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::URenderWidget_C, MouseIsDown, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::URenderWidget_C, UnknownData_QPGX, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::URenderWidget_C, RenderCharacter, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::URenderWidget_C, TempMousePositionX, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::URenderWidget_C, UnknownData_7YE5, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::URenderWidget_C, RenderTextureMaterial, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URenderWidget_C, 0x0230);
		}

		// class UCreature_Wolf_DeadAnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Creature_Wolf_DeadAnimBP__Creature_Wolf_DeadAnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreature_Wolf_DeadAnimBP_C, UnknownData_MWQM, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreature_Wolf_DeadAnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreature_Wolf_DeadAnimBP_C, AnimGraphNode_Root_8CBE652B4D859C4F5EBFF0A0914A5FAA, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreature_Wolf_DeadAnimBP_C, AnimGraphNode_SequencePlayer_FFC3602442968E0B6F87CBAD5F9ECA5C, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreature_Wolf_DeadAnimBP_C, RandomDeathAnim, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreature_Wolf_DeadAnimBP_C, 0x0488);
		}

		// class AContainerF_Static_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__ContainerF_Static__ContainerF_Static_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AContainerF_Static_C, 0x0370);
		}

		// class ATelephone_Box_02_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Telephone_Box_02__Telephone_Box_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATelephone_Box_02_C, 0x0378);
		}

		// class APlayground_Object_11_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Playground_Object_12__Playground_Object_11_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayground_Object_11_C, 0x0378);
		}

		// class ASaray_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Saray__Saray_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASaray_C, 0x0378);
		}

		// class ACv2_TankShell_Medium_C : public ACv2_RocketActor_C
		TEST_METHOD(BlueprintGeneratedClass__Cv2_TankShell_Medium__Cv2_TankShell_Medium_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_TankShell_Medium_C, 0x04B8);
		}

		// class UInventoryBackPackToolTip_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InventoryBackPackToolTip__InventoryBackPackToolTip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackToolTip_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackToolTip_C, Show, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackToolTip_C, Border_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackToolTip_C, Image_4, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackToolTip_C, TextBlock_6, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackToolTip_C, VerticalBox_2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackToolTip_C, VerticalBox_3, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackToolTip_C, NOUseSplit, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackToolTip_C, NoToolTip, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackToolTip_C, MoveOnly, 0x023A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryBackPackToolTip_C, 0x023B);
		}

		// class UFurniture_18_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture_18_AnimBP__Furniture_18_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_18_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_18_AnimBP_C, AnimGraphNode_Root_AC3D1AFE46C2452CAF2D34ABFDEA0047, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_18_AnimBP_C, AnimGraphNode_LocalRefPose_F6CBB36144E224491B380D9FA34F540B, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_18_AnimBP_C, AnimGraphNode_BlendListByBool_82D76BE244E8BE0AEC3707AC926AA82F, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_18_AnimBP_C, AnimGraphNode_SequencePlayer_7E265E684FCD399DB3630EB8B68950C2, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture_18_AnimBP_C, 0x0588);
		}

		// class UZ_Tooltip_Root_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Z_Tooltip_Root__Z_Tooltip_Root_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Tooltip_Root_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Tooltip_Root_C, Root_Name, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Tooltip_Root_C, Root_Icon, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Tooltip_Root_C, Root_NameText, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_Tooltip_Root_C, Root_DescriptionText, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZ_Tooltip_Root_C, 0x0228);
		}

		// class ATV_Static_1_Older_1_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__TV_Static_1_Older_2__TV_Static_1_Older_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATV_Static_1_Older_1_C, 0x0370);
		}

		// class ABoat_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Boat__Boat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABoat_C, 0x0378);
		}

		// class AWoodNastil_Static_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WoodNastil_Static__WoodNastil_Static_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWoodNastil_Static_C, 0x0370);
		}

		// class AWood_Box_01_Winter_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Wood_Box_01_Winter__Wood_Box_01_Winter_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWood_Box_01_Winter_C, 0x0378);
		}

		// class ASurv_HUD_C : public AHUD
		TEST_METHOD(BlueprintGeneratedClass__Surv_HUD__Surv_HUD_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_HUD_C, UberGraphFrame, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_HUD_C, DefaultSceneRoot, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_HUD_C, SlotsTimer, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_HUD_C, MainMenu, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_HUD_C, LobbyVar, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_HUD_C, RenderCharacter, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_HUD_C, AmmoPrymaryStr, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_HUD_C, AmmoSecondaryStr, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_HUD_C, ConnectWidget, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_HUD_C, NewVar_1, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_HUD_C, PlayerIformationCorrect, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurv_HUD_C, 0x04E9);
		}

		// class AChair_Static_1_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Chair_Static_2__Chair_Static_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChair_Static_1_C, 0x0370);
		}

		// class AAZS_rezdacha_static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AZS_rezdacha_static_BP__AZS_rezdacha_static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAZS_rezdacha_static_BP_C, 0x0370);
		}

		// class Aturnik_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__turnik__turnik_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aturnik_C, 0x0378);
		}

		// class UAppleARKitAnchor : public UObject
		TEST_METHOD(Class__AppleARKit__AppleARKitAnchor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleARKitAnchor, Identifier, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleARKitAnchor, UnknownData_MBCJ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleARKitAnchor, 0x0090);
		}

		// class UAppleARKitBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AppleARKit__AppleARKitBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleARKitBlueprintLibrary, 0x0028);
		}

		// class UAppleARKitPlaneAnchor : public UAppleARKitAnchor
		TEST_METHOD(Class__AppleARKit__AppleARKitPlaneAnchor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleARKitPlaneAnchor, UnknownData_049R, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleARKitPlaneAnchor, 0x00B0);
		}

		// class UARKitCameraOverlayMaterialLoader : public UObject
		TEST_METHOD(Class__AppleARKit__ARKitCameraOverlayMaterialLoader)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARKitCameraOverlayMaterialLoader, DefaultCameraOverlayMaterial, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARKitCameraOverlayMaterialLoader, 0x0030);
		}

		// class UMaterialExpressionARKitPassthroughCamera : public UMaterialExpression
		TEST_METHOD(Class__AppleARKit__MaterialExpressionARKitPassthroughCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionARKitPassthroughCamera, Coordinates, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionARKitPassthroughCamera, ConstCoordinate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionARKitPassthroughCamera, TextureType, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionARKitPassthroughCamera, UnknownData_PREB, 0x009D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionARKitPassthroughCamera, 0x00A0);
		}

		// class UMAP_RespAnimMarker_C : public UMapMarkerROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__MAP_RespAnimMarker__MAP_RespAnimMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_RespAnimMarker_C, UnknownData_SLUB, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_RespAnimMarker_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_RespAnimMarker_C, SpawnAnim, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_RespAnimMarker_C, Border_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_RespAnimMarker_C, TextBlock_1, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMAP_RespAnimMarker_C, 0x0258);
		}

		// class ACv3_LootFurniture_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv3_LootFurniture__Cv3_LootFurniture_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_LootFurniture_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_LootFurniture_C, Z_InventoryComponent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_LootFurniture_C, Box, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_LootFurniture_C, SkeletalMesh, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_LootFurniture_C, DefaultSceneRoot, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_LootFurniture_C, IsOpen, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_LootFurniture_C, FurnitureType, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_LootFurniture_C, isDestroy, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_LootFurniture_C, UnknownData_Z4JG, 0x0393);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_LootFurniture_C, Open_Sound, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_LootFurniture_C, Close_Sound, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_LootFurniture_C, StartTime, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_LootFurniture_C, proxyIndex, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_LootFurniture_C, proxyLootName, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_LootFurniture_C, KeyItemName, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_LootFurniture_C, isLock, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_LootFurniture_C, playersNoSpawn, 0x03C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv3_LootFurniture_C, 0x03C2);
		}

		// class UScoreNumberWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ScoreNumberWidget__ScoreNumberWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScoreNumberWidget_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScoreNumberWidget_C, Show, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScoreNumberWidget_C, Border_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScoreNumberWidget_C, NumberText, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScoreNumberWidget_C, Overlay_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScoreNumberWidget_C, SelfSize, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScoreNumberWidget_C, Location, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScoreNumberWidget_C, 0x023C);
		}

		// class UVampireAnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__VampireAnimBP__VampireAnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVampireAnimBP_C, UnknownData_6ZBC, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVampireAnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVampireAnimBP_C, AnimGraphNode_Root_A09FBABD43130D16546256B42FC5BC32, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVampireAnimBP_C, AnimGraphNode_BlendSpacePlayer_3C24971844657B6BF5A84F8F91E3FF25, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVampireAnimBP_C, AnimGraphNode_Slot_E53DBD4A4C05AA489F9930A4678C1995, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVampireAnimBP_C, Creature, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVampireAnimBP_C, Speed, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVampireAnimBP_C, 0x05AC);
		}

		// class USurvChooseOfSideBASE_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SurvChooseOfSideBASE__SurvChooseOfSideBASE_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvChooseOfSideBASE_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvChooseOfSideBASE_C, L, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvChooseOfSideBASE_C, HoverRight, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvChooseOfSideBASE_C, Close, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvChooseOfSideBASE_C, R, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvChooseOfSideBASE_C, HoverLeft, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvChooseOfSideBASE_C, BorderLeft, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvChooseOfSideBASE_C, BorderRight, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvChooseOfSideBASE_C, Button_North, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvChooseOfSideBASE_C, Button_South, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvChooseOfSideBASE_C, Fon_Left, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvChooseOfSideBASE_C, Fon_Right, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvChooseOfSideBASE_C, Image_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvChooseOfSideBASE_C, Image_3, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvChooseOfSideBASE_C, north, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvChooseOfSideBASE_C, NorthCount, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvChooseOfSideBASE_C, SouthCount, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvChooseOfSideBASE_C, Timer, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvChooseOfSideBASE_C, 0x0290);
		}

		// class ASet_of_Boxes_04_2_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Set_of_Boxes_04_3__Set_of_Boxes_04_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASet_of_Boxes_04_2_C, 0x03C2);
		}

		// class AStyroFoam_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__StyroFoam__StyroFoam_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStyroFoam_C, 0x0370);
		}

		// class UWP_Snowy_C : public UWeatherPreset_C
		TEST_METHOD(BlueprintGeneratedClass__WP_Snowy__WP_Snowy_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWP_Snowy_C, 0x008C);
		}

		// class UMouseWheelZone_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MouseWheelZone__MouseWheelZone_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMouseWheelZone_C, MouseWheel, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMouseWheelZone_C, UnHandle, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseWheelZone_C, 0x0211);
		}

		// class AFurniture_Bed_Static_03_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture_Bed_Static_03__Furniture_Bed_Static_03_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture_Bed_Static_03_C, 0x0370);
		}

		// class ACv2_MineBase_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv2_MineBase__Cv2_MineBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_MineBase_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_MineBase_C, Sphere, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_MineBase_C, StaticMesh, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_MineBase_C, Side, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_MineBase_C, Is_PT, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_MineBase_C, isBoom, 0x0382);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_MineBase_C, UnknownData_KM2W, 0x0383);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_MineBase_C, OwnerController, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_MineBase_C, 0x0390);
		}

		// class UM2_Track_C : public UVehicleWheel
		TEST_METHOD(BlueprintGeneratedClass__M2_Track__M2_Track_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UM2_Track_C, 0x00F0);
		}

		// class UMovieSceneCaptureProtocolSettings : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureProtocolSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureProtocolSettings, 0x0028);
		}

		// class UBmpImageCaptureSettings : public UMovieSceneCaptureProtocolSettings
		TEST_METHOD(Class__MovieSceneCapture__BmpImageCaptureSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBmpImageCaptureSettings, 0x0028);
		}

		// class UFrameGrabberProtocolSettings : public UMovieSceneCaptureProtocolSettings
		TEST_METHOD(Class__MovieSceneCapture__FrameGrabberProtocolSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrameGrabberProtocolSettings, UnknownData_G0H5, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameGrabberProtocolSettings, 0x0030);
		}

		// class UImageCaptureSettings : public UFrameGrabberProtocolSettings
		TEST_METHOD(Class__MovieSceneCapture__ImageCaptureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageCaptureSettings, CompressionQuality, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageCaptureSettings, UnknownData_UFU1, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageCaptureSettings, 0x0038);
		}

		// class UMovieSceneCaptureInterface : public UInterface
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureInterface, 0x0028);
		}

		// class UMovieSceneCapture : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_LBB0, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, CaptureType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ProtocolSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, Settings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bUseSeparateProcess, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bCloseEditorWhenCaptureStarts, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_K2N4, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AdditionalCommandLineArguments, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, InheritedCommandLineArguments, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_B2IX, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCapture, 0x0240);
		}

		// class ULevelCapture : public UMovieSceneCapture
		TEST_METHOD(Class__MovieSceneCapture__LevelCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_MQMU, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, PrerequisiteActorId, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_5UAL, 0x0254);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelCapture, 0x0260);
		}

		// class UMovieSceneCaptureEnvironment : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureEnvironment)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureEnvironment, 0x0028);
		}

		// class UVideoCaptureSettings : public UFrameGrabberProtocolSettings
		TEST_METHOD(Class__MovieSceneCapture__VideoCaptureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureSettings, bUseCompression, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureSettings, UnknownData_ZVUT, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureSettings, CompressionQuality, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureSettings, VideoCodec, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVideoCaptureSettings, 0x0048);
		}

		// class UAutomatedLevelSequenceCapture : public UMovieSceneCapture
		TEST_METHOD(Class__MovieSceneCapture__AutomatedLevelSequenceCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomatedLevelSequenceCapture, 0x0240);
		}

		// class UCompositionGraphCaptureSettings : public UMovieSceneCaptureProtocolSettings
		TEST_METHOD(Class__MovieSceneCapture__CompositionGraphCaptureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureSettings, IncludeRenderPasses, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureSettings, bCaptureFramesInHDR, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureSettings, UnknownData_EQTG, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureSettings, HDRCompressionQuality, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureSettings, CaptureGamut, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureSettings, UnknownData_IIDM, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureSettings, PostProcessingMaterial, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositionGraphCaptureSettings, 0x0060);
		}

		// class USURV_Inventory_Tooltip_C : public UZ_Tooltip_Root_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__SURV_Inventory_Tooltip__SURV_Inventory_Tooltip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Tooltip_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Tooltip_C, Show_Hor, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Tooltip_C, Show, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Tooltip_C, Border_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Tooltip_C, Description, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Tooltip_C, Fon, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Tooltip_C, Header, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Tooltip_C, Icon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Tooltip_C, Image_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Tooltip_C, Image_3, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Tooltip_C, Image_4, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Tooltip_C, Mass, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Tooltip_C, MassHorizontalBox, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Tooltip_C, SizeBox_1, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USURV_Inventory_Tooltip_C, 0x0298);
		}

		// class ACrate1_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Crate1__Crate1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACrate1_C, 0x0378);
		}

		// class UUdpMessagingSettings : public UObject
		TEST_METHOD(Class__UdpMessaging__UdpMessagingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTransport, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_LHHP, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnicastEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastEndpoint, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastTimeToLive, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_44Z3, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, StaticEndpoints, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTunnel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_T9CZ, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelUnicastEndpoint, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelMulticastEndpoint, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, RemoteTunnelEndpoints, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUdpMessagingSettings, 0x00A0);
		}

		// class ACv4_CraftDoor_Base_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv4_CraftDoor_Base__Cv4_CraftDoor_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftDoor_Base_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftDoor_Base_C, _CraftDoor_Metal_Rig, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftDoor_Base_C, Scene, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftDoor_Base_C, IsOpen, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftDoor_Base_C, UnknownData_GQSM, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftDoor_Base_C, AnimInstance, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftDoor_Base_C, DoorId, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftDoor_Base_C, IsDamaged, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftDoor_Base_C, IsDestroyed, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftDoor_Base_C, UnknownData_L2JD, 0x0396);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftDoor_Base_C, DamagedSK, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftDoor_Base_C, HitPoints, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftDoor_Base_C, HitPointsMax, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftDoor_Base_C, DestructionDamageMesh, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftDoor_Base_C, DestructionDebrisMesh, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftDoor_Base_C, OwnerID, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftDoor_Base_C, LobbyID, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv4_CraftDoor_Base_C, 0x03CC);
		}

		// class ASurv_MI_8_Military_C : public ACv2_BaseCar_4W_C
		TEST_METHOD(BlueprintGeneratedClass__Surv_MI_8_Military__Surv_MI_8_Military_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_MI_8_Military_C, UberGraphFrame, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_MI_8_Military_C, isBoom, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASurv_MI_8_Military_C, randomHeliFire, 0x0949);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurv_MI_8_Military_C, 0x094A);
		}

		// class Atube_2_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__tube_3__tube_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Atube_2_C, 0x0370);
		}

		// class ASurv_Car_Uaz469_Police_C : public ACv2_BaseCar_4W_C
		TEST_METHOD(BlueprintGeneratedClass__Surv_Car_Uaz469_Police__Surv_Car_Uaz469_Police_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurv_Car_Uaz469_Police_C, 0x0940);
		}

		// class AWood_Box_01_Set1_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Wood_Box_01_Set1__Wood_Box_01_Set1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWood_Box_01_Set1_C, 0x0378);
		}

		// class UGeometryCacheTrack : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, UnknownData_1J89, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack, 0x0050);
		}

		// class UGeometryCacheTrack_TransformAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformAnimation, UnknownData_95HR, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformAnimation, 0x00A0);
		}

		// class UGeometryCacheTrack_TransformGroupAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformGroupAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformGroupAnimation, UnknownData_GL7H, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformGroupAnimation, 0x00A0);
		}

		// class UGeometryCache : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_X58A, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Materials, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Tracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_DBH8, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCache, 0x0060);
		}

		// class AGeometryCacheActor : public AActor
		TEST_METHOD(Class__GeometryCache__GeometryCacheActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCacheActor, GeometryCacheComponent, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCacheActor, 0x0370);
		}

		// class UGeometryCacheComponent : public UMeshComponent
		TEST_METHOD(Class__GeometryCache__GeometryCacheComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, GeometryCache, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bRunning, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bLooping, 0x06C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_JSYU, 0x06C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, StartTimeOffset, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, PlaybackSpeed, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, NumTracks, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, ElapsedTime, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_IUTY, 0x06D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheComponent, 0x0730);
		}

		// class UGeometryCacheTrack_FlipbookAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_FlipbookAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, NumMeshSamples, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, UnknownData_KKJV, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_FlipbookAnimation, 0x0078);
		}

		// class UMenu_ControllerOptionsSurv_C : public UMenu_InGame_Panel_ROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Menu_ControllerOptionsSurv__Menu_ControllerOptionsSurv_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_ControllerOptionsSurv_C, UnknownData_VRZ8, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_ControllerOptionsSurv_C, UberGraphFrame, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_ControllerOptionsSurv_C, Image_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_ControllerOptionsSurv_C, Image_2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_ControllerOptionsSurv_C, Menu_InGame_Keyboard_options, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_ControllerOptionsSurv_C, Menu_InGame_Mouse_options, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenu_ControllerOptionsSurv_C, 0x0240);
		}

		// class UIOSRuntimeSettings : public UObject
		TEST_METHOD(Class__IOSRuntimeSettings__IOSRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, UnknownData_NZMH, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, bSupportsMetal, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, bSupportsMetalMRT, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, bCookPVRTCTextures, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, bCookASTCTextures, 0x002F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, bSupportsOpenGLES2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, EnableRemoteShaderCompile, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, bGeneratedSYMFile, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, bGeneratedSYMBundle, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, bGenerateXCArchive, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, bDevForArmV7, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, bDevForArm64, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, bDevForArmV7S, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, bShipForArmV7, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, bShipForArm64, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, bShipForArmV7S, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, bShipForBitcode, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, UnknownData_VWNT, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, AdditionalLinkerFlags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, AdditionalShippingLinkerFlags, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, RemoteServerName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, bUseRSync, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, UnknownData_DM4S, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, RSyncUsername, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, DeltaCopyInstallPath, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, SSHPrivateKeyLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, SSHPrivateKeyOverridePath, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, bTreatRemoteAsSeparateController, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, bAllowRemoteRotation, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, bUseRemoteAsVirtualJoystick, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, bUseRemoteAbsoluteDpadValues, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, UnknownData_74YU, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, BundleDisplayName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, BundleName, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, BundleIdentifier, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, VersionInfo, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, FrameRateLock, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, MinimumiOSVersion, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, UnknownData_RT7K, 0x0102);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, UnknownData_MAED, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, AdditionalPlistData, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, bEnableFacebookSupport, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, UnknownData_SJZ1, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, FacebookAppID, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, MobileProvision, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, SigningCertificate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, bAutomaticSigning, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, MaxShaderLanguageVersion, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, UseFastIntrinsics, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, EnableMathOptimisations, 0x0153);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, bUseIntegratedKeyboard, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, UnknownData_6296, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, AudioSampleRate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, AudioCallbackBufferFrameSize, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, AudioNumBuffersToEnqueue, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, AudioMaxChannels, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, AudioNumSourceWorkers, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, UnknownData_WQ2W, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, SpatializationPlugin, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, ReverbPlugin, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIOSRuntimeSettings, OcclusionPlugin, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIOSRuntimeSettings, 0x01A0);
		}

		// class ABlackCoube_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BlackCoube__BlackCoube_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlackCoube_C, Sphere, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlackCoube_C, DefaultSceneRoot, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlackCoube_C, 0x0378);
		}

		// class USessionString_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SessionString__SessionString_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USessionString_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USessionString_C, Button_1, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USessionString_C, Flag, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USessionString_C, Fon, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USessionString_C, NumPlayers, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USessionString_C, ServerName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USessionString_C, Session, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USessionString_C, TryesCount, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USessionString_C, UnknownData_EXIL, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USessionString_C, Parent, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USessionString_C, 0x02F8);
		}

		// class A_SOLDIER_EMPTY_Actor_Survival_ChildActor_C : public A_SOLDIER_EMPTY_Actor_Survival_C
		TEST_METHOD(BlueprintGeneratedClass___SOLDIER_EMPTY_Actor_Survival_ChildActor___SOLDIER_EMPTY_Actor_Survival_ChildActor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_SOLDIER_EMPTY_Actor_Survival_ChildActor_C, 0x03A8);
		}

		// class AWoodFence_3_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WoodFence_4__WoodFence_3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWoodFence_3_C, 0x0370);
		}

		// class ARadio_static_9_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Radio_static_10__Radio_static_9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARadio_static_9_C, 0x0370);
		}

		// class UInfo_CharacterPanel_C : public UInfoPanelRoot_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Info_CharacterPanel__Info_CharacterPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_CharacterPanel_C, UberGraphFrame, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_CharacterPanel_C, Ammo, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_CharacterPanel_C, Ammo_HorizontalBox, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_CharacterPanel_C, AmmoBackPack, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_CharacterPanel_C, AmmoImage, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_CharacterPanel_C, Cold, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_CharacterPanel_C, ConditionIcon, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_CharacterPanel_C, DeltaHP, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_CharacterPanel_C, HP_ProgressBar_90, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_CharacterPanel_C, hungr, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_CharacterPanel_C, Inventory, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_CharacterPanel_C, ProgressBar_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_CharacterPanel_C, Thrusty, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_CharacterPanel_C, LootWeapon, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_CharacterPanel_C, AmmoType, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_CharacterPanel_C, UnknownData_I2C4, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_CharacterPanel_C, VarDeltaHp, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_CharacterPanel_C, BoostPercent, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfo_CharacterPanel_C, 0x028C);
		}

		// class APodezd_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Podezd_Static_BP__Podezd_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APodezd_Static_BP_C, 0x0370);
		}

		// class UFurniture_13_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture_13_AnimBP__Furniture_13_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_13_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_13_AnimBP_C, AnimGraphNode_Root_28AF475E46614BDC7ADFD1A04AF06B59, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_13_AnimBP_C, AnimGraphNode_LocalRefPose_2E4E32E841DC6572580CA18540AD4408, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_13_AnimBP_C, AnimGraphNode_BlendListByBool_58C0C5974533D896D200719E0EA58DB2, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_13_AnimBP_C, AnimGraphNode_SequencePlayer_1D62BB02426E53281371B0A163DC3FB9, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture_13_AnimBP_C, 0x0588);
		}

		// class UGamerOverTop_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GamerOverTop__GamerOverTop_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamerOverTop_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamerOverTop_C, Show, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamerOverTop_C, GameOverTopString, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamerOverTop_C, GameOverTopString_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamerOverTop_C, GameOverTopString_2, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamerOverTop_C, HeaderText, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamerOverTop_C, Image_1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamerOverTop_C, Header, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGamerOverTop_C, ParametrName, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGamerOverTop_C, 0x0268);
		}

		// class ASet_of_Boxes_04_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Set_of_Boxes_04__Set_of_Boxes_04_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASet_of_Boxes_04_C, 0x03C2);
		}

		// class UMAP_SpawnMarker_C : public UMapMarkerROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__MAP_SpawnMarker__MAP_SpawnMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_SpawnMarker_C, UnknownData_IIGS, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_SpawnMarker_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_SpawnMarker_C, Button_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_SpawnMarker_C, Image_1, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMAP_SpawnMarker_C, 0x0250);
		}

		// class UABP_AnimalsWolf_Wolf_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__ABP_AnimalsWolf_Wolf__ABP_AnimalsWolf_Wolf_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, UnknownData_HBS2, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_Root_AE91BC2D4B9A957F3C0E7B8C05FA4211, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_TransitionPoseEvaluator_3E6B773D4486BAD962381ABB6581647B, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_TransitionPoseEvaluator_BE3907FB4C68AC1D703A0FA74D47F488, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_SequencePlayer_A87DBF714A44806032621E8DB8BE9C34, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_CustomTransitionResult_3FFC3DBF45A2F159C5F3A98D39F73886, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, UnknownData_ODAL, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_TransitionResult_5E568E9A4F8C78798C50C7A711C74094, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_TransitionResult_1E62AC104AB1DD70C26C058779A708DB, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_TransitionResult_ABBD90AF4C487FF5C6F44D9282F1BFC3, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_TransitionResult_7B5843DB4952D0F4F14781B707FCDABD, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_TransitionResult_B0ABE4314638BBF51791388A5345F087, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_TransitionResult_1C287C424D98A1D2075A6E952A6471B7, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_TransitionPoseEvaluator_36FDC5FF4AFBD012F60C8985BDF24791, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_TransitionPoseEvaluator_A27B930A4D6C945EDFA669A99C96C224, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_SequencePlayer_017C7DD14BA2DC62C10FE29C5F9A9FD0, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_CustomTransitionResult_B35D701848AF37C0EE40009A9CF1E80C, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, UnknownData_4I44, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_TransitionResult_3399611A4CF3CA73BAE519AB3F35C90E, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_TransitionResult_1A0281AF421E9845657E4C9CB960CCF9, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_SequencePlayer_C4109EAB4BDE13A7DA5B049B83A515AF, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_StateResult_4ADA348649994885030AA8B9D04064B3, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_SequencePlayer_F74857714EF18AE07F4903897A520830, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_StateResult_2F647B34438A9037FA0DCB8CE34A9F9D, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_BlendSpacePlayer_CAE148D84314AD784B483E8556E59925, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_StateResult_02DC78DA426F98E8C11E8383B5329AD4, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_RandomPlayer_F41810D6462F210BCD3EF5BDE1B010C3, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_StateResult_34181BAC4A00A6123B194AB7380B980F, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_StateMachine_2F31AACE4C5DF53D9A649D90608B4D78, 0x0F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_RotationOffsetBlendSpace_1FFF150C415491B5E6A4548ED485A0C7, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, AnimGraphNode_Slot_6652590B46E859900EE56B862DB0A8F2, 0x1158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, ABP_Speed, 0x11C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, ABP_MoveForward, 0x11C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, ABP_MoveRight, 0x11C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, ABP_LookUp, 0x11CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, ABP_Turn, 0x11D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, DeltaTimeVar, 0x11D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, IsFalling, 0x11D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsWolf_Wolf_C, Attack, 0x11D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UABP_AnimalsWolf_Wolf_C, 0x11DA);
		}

		// class UInventoryPanelsROOT_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InventoryPanelsROOT__InventoryPanelsROOT_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelsROOT_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelsROOT_C, InventoryArray, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelsROOT_C, DrawCards, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelsROOT_C, SelectedItems, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelsROOT_C, SlotsAllWidgets, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryPanelsROOT_C, Base_Inventory, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryPanelsROOT_C, 0x0258);
		}

		// class A_SpawnFurnitur_11_C : public ACv3_SpawnLootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass___SpawnFurnitur_12___SpawnFurnitur_11_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_SpawnFurnitur_11_C, 0x0390);
		}

		// class UEvaquationBase_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__EvaquationBase__EvaquationBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvaquationBase_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvaquationBase_C, MainText, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvaquationBase_C, Time, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvaquationBase_C, SecondsToReboot, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvaquationBase_C, UnknownData_RCIV, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvaquationBase_C, TimerTimer, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEvaquationBase_C, 0x0228);
		}

		// class UMAP_EnemyMarker_C : public UMapMarkerROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__MAP_EnemyMarker__MAP_EnemyMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_EnemyMarker_C, UnknownData_FL1S, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_EnemyMarker_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_EnemyMarker_C, Show, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_EnemyMarker_C, Image_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_EnemyMarker_C, TimeAnimate, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMAP_EnemyMarker_C, 0x0258);
		}

		// class ACv2_AmbientSound_C : public AAmbientSound
		TEST_METHOD(BlueprintGeneratedClass__Cv2_AmbientSound__Cv2_AmbientSound_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AmbientSound_C, UberGraphFrame, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_AmbientSound_C, 0x0378);
		}

		// class ABOT_CreatureAI_Controller_C : public AAIController
		TEST_METHOD(BlueprintGeneratedClass__BOT_CreatureAI_Controller__BOT_CreatureAI_Controller_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureAI_Controller_C, UberGraphFrame, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureAI_Controller_C, CHAR, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABOT_CreatureAI_Controller_C, 0x0470);
		}

		// class UOverlays : public UObject
		TEST_METHOD(Class__Overlay__Overlays)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlays, 0x0028);
		}

		// class UBasicOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__BasicOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicOverlays, Overlays, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasicOverlays, 0x0038);
		}

		// class ULocalizedOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__LocalizedOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, DefaultOverlays, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, LocaleToOverlaysMap, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalizedOverlays, 0x0080);
		}

		// class ABOT_CreatureBase_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__BOT_CreatureBase__BOT_CreatureBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, UberGraphFrame, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, AmbientCreature, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, Mesh, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, Collision, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, FloatingPawnMovement, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, PawnSensing, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, AI_COntroller, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, Speed, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, OldLocation, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, PawnPosition, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, PawnRotation, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, HitPoints, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, isDeath, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, UnknownData_QFL2, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, AnimInstance, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, Target, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, CreatureStructure, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, NameCreature, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, MaxWalkSpeed, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, MaxRunSpeed, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, Damage, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, MaxHitPoints, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, DeadAnimBP, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, AttackRange, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, AttackDelay, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, GlobalIsSleep, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, UnknownData_6VKO, 0x0509);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, RandomMoveCorrectMax, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, RandomMoveCorrectMin, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, UnknownData_4TBT, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, HeadBoneName, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, ImpactBoneName, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, ImpactImpulse, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, DropLoot, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, isDisablePatrool, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, UnknownData_RNI0, 0x053D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, StartLocation, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, isNPC, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, UnknownData_PR5I, 0x054D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, lastVoiceTime, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, UnknownData_WDYG, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, SeesPawn, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_CreatureBase_C, lastDamageTime, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABOT_CreatureBase_C, 0x0564);
		}

		// class UBARRET_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__BARRET_AnimBP__BARRET_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBARRET_AnimBP_C, UnknownData_JE63, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBARRET_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBARRET_AnimBP_C, AnimGraphNode_Root_8FE7D2AA4F18C6882B3F948D1532A140, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBARRET_AnimBP_C, AnimGraphNode_Slot_4F13C20F4612550B664EF49FE6D14C97, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBARRET_AnimBP_C, AnimGraphNode_SequencePlayer_D83717BC4D97100A878102829CDDF1AC, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBARRET_AnimBP_C, 0x04E8);
		}

		// class AWood_box_02_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Wood_box_02__Wood_box_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWood_box_02_C, 0x0378);
		}

		// class UChatWidgetBASE_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ChatWidgetBASE__ChatWidgetBASE_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, ShowMainChat, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, Button_Close, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, Button_Send, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, CHAT_WINDOW, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, ChatVerticalBox, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, EditableTextBoxCHAT, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, Image_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, Image_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, Image_3, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, MainChatVB, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, MainChatWindow, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, ScrollBox_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, ScrollBox_MainChat, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, SEND_Panel, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, VertBox, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, SendToAll, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, UnknownData_S2JX, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, String, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, CurrentMessageType, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, UnknownData_MJ0X, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, NormalButoonStyle, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, RemoveWidget, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, UnknownData_W0S4, 0x04D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatWidgetBASE_C, MutedPlayers, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChatWidgetBASE_C, 0x04E8);
		}

		// class AWoodFence_stolb_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WoodFence_stolb__WoodFence_stolb_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWoodFence_stolb_C, 0x0370);
		}

		// class ALadder_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Ladder_BP__Ladder_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALadder_BP_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALadder_BP_C, BoxTrigger, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALadder_BP_C, CharacterRef, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALadder_BP_C, 0x0380);
		}

		// class UCv3_Shkaf_military_A_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Cv3_Shkaf_military_A_AnimBP__Cv3_Shkaf_military_A_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv3_Shkaf_military_A_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv3_Shkaf_military_A_AnimBP_C, AnimGraphNode_Root_C28AB07F4E7C978226886EABFACA27C7, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv3_Shkaf_military_A_AnimBP_C, AnimGraphNode_LocalRefPose_BC6AA910424B4A283F55EC8FFDBAF4E0, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv3_Shkaf_military_A_AnimBP_C, AnimGraphNode_BlendListByBool_47E8CEEB433500B68046CA9A1A34CD3D, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv3_Shkaf_military_A_AnimBP_C, AnimGraphNode_SequencePlayer_76686E4F4650B9D48088CBBCFC713CB6, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCv3_Shkaf_military_A_AnimBP_C, 0x0588);
		}

		// class UBinocularGUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BinocularGUI__BinocularGUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBinocularGUI_C, OpticTexture, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBinocularGUI_C, 0x0208);
		}

		// class UFurniture_14_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture_14_AnimBP__Furniture_14_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_14_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_14_AnimBP_C, AnimGraphNode_Root_7C69A893403742396640EF86E3529C44, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_14_AnimBP_C, AnimGraphNode_LocalRefPose_C36690774BB56EBBCB4EFCB9864275CC, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_14_AnimBP_C, AnimGraphNode_BlendListByBool_FA77146A45CD3AA59DD0158A918705EF, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_14_AnimBP_C, AnimGraphNode_SequencePlayer_B73FAAB34CC0687D600912963859AF24, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture_14_AnimBP_C, 0x0588);
		}

		// class AInventoryCraftRenderActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__InventoryCraftRenderActor__InventoryCraftRenderActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCraftRenderActor_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCraftRenderActor_C, PointLight, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCraftRenderActor_C, Arrow, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCraftRenderActor_C, RenderActor, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCraftRenderActor_C, SceneCaptureComponent2D, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCraftRenderActor_C, Plane1, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCraftRenderActor_C, StaticMesh2, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCraftRenderActor_C, StaticMesh1, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCraftRenderActor_C, StaticMesh, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCraftRenderActor_C, Plane2, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCraftRenderActor_C, Plane, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCraftRenderActor_C, DefaultSceneRoot, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCraftRenderActor_C, Timeline_0_NewTrack_0_0C113C964562AF16F11A90AD57624C93, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCraftRenderActor_C, Timeline_0__Direction_0C113C964562AF16F11A90AD57624C93, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCraftRenderActor_C, UnknownData_CXR7, 0x03CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCraftRenderActor_C, Timeline_1, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCraftRenderActor_C, ProxySortedCraft, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCraftRenderActor_C, proxyArrayLength, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInventoryCraftRenderActor_C, 0x03EC);
		}

		// class UAhtungTable_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__AhtungTable__AhtungTable_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAhtungTable_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAhtungTable_C, IsShow, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAhtungTable_C, BackgroundBlur_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAhtungTable_C, Button_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAhtungTable_C, Button_2, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAhtungTable_C, Fon, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAhtungTable_C, Image_1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAhtungTable_C, Image_3, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAhtungTable_C, Yes, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAhtungTable_C, No, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAhtungTable_C, 0x0260);
		}

		// class UMenu_InGame_Keyboard_options_C : public UMenu_InGame_Panel_ROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Menu_InGame_Keyboard_options__Menu_InGame_Keyboard_options_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, UnknownData_I2WE, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, UberGraphFrame, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Fon, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Image_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Image_3, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Menu_KeyboardString, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Menu_KeyboardString_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Menu_KeyboardString_2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Menu_KeyboardString_3, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Menu_KeyboardString_4, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Menu_KeyboardString_12, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Menu_KeyboardString_38, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Menu_KeyboardString_63, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Menu_KeyboardString_91, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Menu_KeyboardString_123, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Menu_KeyboardString_157, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Menu_KeyboardString_158, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Menu_KeyboardString_159, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Menu_KeyboardString_160, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Menu_KeyboardString_161, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Menu_KeyboardString_162, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Menu_KeyboardString_163, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Menu_KeyboardString_164, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Menu_KeyboardString_165, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Menu_KeyboardString_166, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Menu_KeyboardString_167, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Menu_KeyboardString_168, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Menu_KeyboardString_169, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Menu_KeyboardString_170, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, VerticalBox_3, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Parent, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, NewVar_1, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, CurrentScale, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, Inversion, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, UnknownData_31MZ, 0x031D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, KeyStrings, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Keyboard_options_C, HeaderColor, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenu_InGame_Keyboard_options_C, 0x0358);
		}

		// class UFurniture_17_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture_17_AnimBP__Furniture_17_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_17_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_17_AnimBP_C, AnimGraphNode_Root_D1D03888401B9E979426F1808547054C, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_17_AnimBP_C, AnimGraphNode_LocalRefPose_4D66EF054C94F938BE453B805AF93791, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_17_AnimBP_C, AnimGraphNode_BlendListByBool_A59887884A21D19D80EC6A88090EEE66, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_17_AnimBP_C, AnimGraphNode_SequencePlayer_C5AE52FB460777EC4C582A9F4A274DC4, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture_17_AnimBP_C, 0x0588);
		}

		// class UABP_AnimalsBear_Bear_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__ABP_AnimalsBear_Bear__ABP_AnimalsBear_Bear_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, UnknownData_PR4N, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, AnimGraphNode_Root_86B0F5E740887AE08B375BB575BB0395, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, AnimGraphNode_RotationOffsetBlendSpace_2FEE535441FBB7341EB2B98AD3502629, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, UnknownData_8L0R, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, AnimGraphNode_TransitionResult_68261D834E920027326D37876E661C59, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, AnimGraphNode_TransitionResult_8BB17E9A42CFDEF2F6B4FDB4C5EBF9A5, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, AnimGraphNode_TransitionResult_3E15A6104C0104D1AFF656903FB5917F, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, AnimGraphNode_TransitionResult_40E71F224D04BB118565A880D09F9E41, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, AnimGraphNode_TransitionResult_5A32989A4F551935B28D3481B123646A, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, AnimGraphNode_TransitionResult_4DDB33C546D13B20DB7D39A443DDDF5F, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, AnimGraphNode_TransitionResult_ABBBC7944CA7FD4E182B8FAB5A5D616E, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, AnimGraphNode_TransitionResult_759329CF4DED97B8F29DC4BD88F4129D, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, AnimGraphNode_SequencePlayer_B05662914CF572DDFD1AD0AC332BC6F0, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, AnimGraphNode_StateResult_6EDD9FF84DD26AE1E5D137821815D5D2, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, AnimGraphNode_BlendSpacePlayer_ABDF49FC4B8B986D96E28F9215506A95, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, AnimGraphNode_StateResult_14B57406479D946F3D43579A1513367A, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, AnimGraphNode_SequencePlayer_FCA1FEA84AA2AE76516E6DA3BE36A3C5, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, AnimGraphNode_StateResult_2D3D0D0B466D6A91F0A7D28D69D3488E, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, AnimGraphNode_RandomPlayer_13EACB9A4173883271182091EF71F33B, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, AnimGraphNode_StateResult_928FAF9A44243A4F0CD16183E3FB40A2, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, AnimGraphNode_StateMachine_4A73819F41EBEC1FAC4D248E815C131A, 0x0D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, ABP_Speed, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, ABP_MoveForward, 0x0E04);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, ABP_MoveRight, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, ABP_LookUp, 0x0E0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, ABP_Turn, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, DeltaTimeVar, 0x0E14);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, IsFalling, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UABP_AnimalsBear_Bear_C, Attack, 0x0E19);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UABP_AnimalsBear_Bear_C, 0x0E1A);
		}

		// class AFurniture_Bed_Static_01_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture_Bed_Static_01__Furniture_Bed_Static_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture_Bed_Static_01_C, 0x0370);
		}

		// class ACv3_Fence_wood_04_C : public ACv2_HouseBase_C
		TEST_METHOD(BlueprintGeneratedClass__Cv3_Fence_wood_04__Cv3_Fence_wood_04_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_Fence_wood_04_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_Fence_wood_04_C, Scene, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_Fence_wood_04_C, Stone_Wood_04_Stone_Wood_04_z1_1, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_Fence_wood_04_C, Stone_Wood_04_Foundation_Wood_04, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_Fence_wood_04_C, Stone_Wood_04_Stone_Wood_04_z2_1, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv3_Fence_wood_04_C, 0x0440);
		}

		// class ARock_5_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Rock_5_Static_BP__Rock_5_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARock_5_Static_BP_C, 0x0370);
		}

		// class ASand_03_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Sand_03__Sand_03_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASand_03_C, 0x0378);
		}

		// class USelectSpawnWidgetPortable_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SelectSpawnWidgetPortable__SelectSpawnWidgetPortable_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectSpawnWidgetPortable_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectSpawnWidgetPortable_C, Image_1, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectSpawnWidgetPortable_C, Map_Overlay, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectSpawnWidgetPortable_C, TownString, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectSpawnWidgetPortable_C, TownString_2, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectSpawnWidgetPortable_C, TownsVB, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectSpawnWidgetPortable_C, Strings, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectSpawnWidgetPortable_C, Timer, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectSpawnWidgetPortable_C, Root, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectSpawnWidgetPortable_C, OfficersTimer, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelectSpawnWidgetPortable_C, 0x0258);
		}

		// class ACliff1_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Cliff1__Cliff1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACliff1_C, 0x0370);
		}

		// class AMedic_House_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Medic_House__Medic_House_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMedic_House_C, _SpawnFurnitur_16, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMedic_House_C, _SpawnFurnitur_05, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMedic_House_C, ChildActor2, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMedic_House_C, _SpawnFurnitur_01, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMedic_House_C, _SpawnFurnitur_17, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMedic_House_C, _SpawnFurnitur_12, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMedic_House_C, _SpawnFurnitur_03, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMedic_House_C, _CraftDoor_Frame, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMedic_House_C, ChildActor1, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMedic_House_C, ChildActor, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMedic_House_C, 0x03C8);
		}

		// class A_SpawnFurnitur_16_C : public ACv3_SpawnLootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass___SpawnFurnitur_17___SpawnFurnitur_16_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_SpawnFurnitur_16_C, 0x0390);
		}

		// class UWP_Sunny_C : public UWeatherPreset_C
		TEST_METHOD(BlueprintGeneratedClass__WP_Sunny__WP_Sunny_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWP_Sunny_C, 0x008C);
		}

		// class UInputCoreTypes : public UObject
		TEST_METHOD(Class__InputCore__InputCoreTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputCoreTypes, 0x0028);
		}

		// class AHiWood_Fence_Static_BP_3_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__HiWood_Fence_Static_BP_4__HiWood_Fence_Static_BP_3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHiWood_Fence_Static_BP_3_C, 0x0370);
		}

		// class ACv2_CameraManager_C : public APlayerCameraManager
		TEST_METHOD(BlueprintGeneratedClass__Cv2_CameraManager__Cv2_CameraManager_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_CameraManager_C, 0x1AB0);
		}

		// class AFurniture2_23_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture2_23_Rig__Furniture2_23_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture2_23_Rig_C, 0x03C2);
		}

		// class UAK47_Base_Skeleton_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AK47_Base_Skeleton_AnimBP__AK47_Base_Skeleton_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAK47_Base_Skeleton_AnimBP_C, UnknownData_QX8B, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAK47_Base_Skeleton_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAK47_Base_Skeleton_AnimBP_C, AnimGraphNode_Root_596F8F00483D23792190B0A9B0E792A0, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAK47_Base_Skeleton_AnimBP_C, AnimGraphNode_Slot_9F88CD06416B909A2CE288AE01243BA1, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAK47_Base_Skeleton_AnimBP_C, AnimGraphNode_SequencePlayer_FD50598142B6A917A8D1479A6E57EA0A, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAK47_Base_Skeleton_AnimBP_C, 0x04E8);
		}

		// class Afan_2_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__fan_3__fan_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Afan_2_C, 0x0370);
		}

		// class UInfoPanelRoot_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InfoPanelRoot__InfoPanelRoot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoPanelRoot_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoPanelRoot_C, RootCheckVarTimer, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoPanelRoot_C, RootVehicleInfoPanel, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfoPanelRoot_C, 0x0218);
		}

		// class ARock_6_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Rock_6_Static_BP__Rock_6_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARock_6_Static_BP_C, 0x0370);
		}

		// class AWall_Room_Transition_BP_01_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Wall_Room_Transition_BP_01__Wall_Room_Transition_BP_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWall_Room_Transition_BP_01_C, 0x0370);
		}

		// class UGrammofon_Vinyl_Rig_Skeleton_AnimBlueprint_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Grammofon_Vinyl_Rig_Skeleton_AnimBlueprint__Grammofon_Vinyl_Rig_Skeleton_AnimBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrammofon_Vinyl_Rig_Skeleton_AnimBlueprint_C, UnknownData_GBA7, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrammofon_Vinyl_Rig_Skeleton_AnimBlueprint_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrammofon_Vinyl_Rig_Skeleton_AnimBlueprint_C, AnimGraphNode_Root_E91AAB804E802DC194F484A93A34B36F, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrammofon_Vinyl_Rig_Skeleton_AnimBlueprint_C, AnimGraphNode_SequencePlayer_895FC2014676F1BB029550978B8A7438, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrammofon_Vinyl_Rig_Skeleton_AnimBlueprint_C, AnimGraphNode_ModifyBone_0592796B48355961CA61F298CF48AB5C, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrammofon_Vinyl_Rig_Skeleton_AnimBlueprint_C, AnimGraphNode_LocalToComponentSpace_67897DC243E5356A1194F4A41D4E3C04, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrammofon_Vinyl_Rig_Skeleton_AnimBlueprint_C, AnimGraphNode_ComponentToLocalSpace_9BC055C849C9990F079564ACE39CBFE3, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrammofon_Vinyl_Rig_Skeleton_AnimBlueprint_C, isPlay, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrammofon_Vinyl_Rig_Skeleton_AnimBlueprint_C, UnknownData_E4LK, 0x05C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrammofon_Vinyl_Rig_Skeleton_AnimBlueprint_C, Yaw, 0x05CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGrammofon_Vinyl_Rig_Skeleton_AnimBlueprint_C, 0x05D0);
		}

		// class UCreature_Bear_DeadAnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Creature_Bear_DeadAnimBP__Creature_Bear_DeadAnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreature_Bear_DeadAnimBP_C, UnknownData_71JG, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreature_Bear_DeadAnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreature_Bear_DeadAnimBP_C, AnimGraphNode_Root_6495983F4B7179A1F0BEE1A50A21100A, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreature_Bear_DeadAnimBP_C, AnimGraphNode_SequencePlayer_A623E9D34B692243646AD8B6A6DE9652, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreature_Bear_DeadAnimBP_C, 0x0480);
		}

		// class UCv2_CameraShake_Fall_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__Cv2_CameraShake_Fall__Cv2_CameraShake_Fall_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCv2_CameraShake_Fall_C, 0x0160);
		}

		// class Akacheli_1_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__kacheli_2__kacheli_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Akacheli_1_C, 0x0370);
		}

		// class ASurv_Car_GAZ_3321_Police_C : public ACv2_BaseCar_4W_C
		TEST_METHOD(BlueprintGeneratedClass__Surv_Car_GAZ_3321_Police__Surv_Car_GAZ_3321_Police_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurv_Car_GAZ_3321_Police_C, 0x0940);
		}

		// class AWall_BP_02_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Wall_BP_02__Wall_BP_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWall_BP_02_C, 0x0370);
		}

		// class UFurniture_20_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture_20_AnimBP__Furniture_20_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_20_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_20_AnimBP_C, AnimGraphNode_Root_D4DA351746C6F8CA757722BE856B43F9, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_20_AnimBP_C, AnimGraphNode_LocalRefPose_03BCD82F4BB282CB721EBD8E43FEDA25, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_20_AnimBP_C, AnimGraphNode_BlendListByBool_146211734B9C0253C097999B1CD9F80F, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_20_AnimBP_C, AnimGraphNode_SequencePlayer_6076D936458DFD4635BF2098AF534638, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture_20_AnimBP_C, 0x0588);
		}

		// class UTownString_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TownString__TownString_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownString_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownString_C, Arrow, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownString_C, Button_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownString_C, MAP_RoundProgress, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownString_C, TentIco, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownString_C, TextBlock_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownString_C, Actor, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownString_C, IsSelect, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownString_C, UnknownData_FQAI, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownString_C, Root, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownString_C, Zone, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownString_C, Officer, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownString_C, UnknownData_0DF2, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTownString_C, OfficerStr, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTownString_C, 0x0278);
		}

		// class A_SpawnFurnitur_01_C : public ACv3_SpawnLootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass___SpawnFurnitur_01___SpawnFurnitur_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_SpawnFurnitur_01_C, 0x0390);
		}

		// class Acupboard4_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__cupboard4__cupboard4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acupboard4_C, 0x0370);
		}

		// class UZ_InventoryCRAFT_Root_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Z_InventoryCRAFT_Root__Z_InventoryCRAFT_Root_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFT_Root_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFT_Root_C, HeaderOfBox, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFT_Root_C, TempCanCraft, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFT_Root_C, UnknownData_C0FD, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFT_Root_C, CraftArrayResults, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFT_Root_C, SelectedItem, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFT_Root_C, UnknownData_DPBN, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFT_Root_C, CraftResourceSlotsArray, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFT_Root_C, ActorVar, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFT_Root_C, FromOtherActor, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFT_Root_C, TempHaveRank, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFT_Root_C, UnknownData_YZJO, 0x025A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFT_Root_C, AboutIconDefaultSize, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFT_Root_C, UnknownData_K286, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFT_Root_C, ClickClose, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFT_Root_C, NoCraftDistance, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFT_Root_C, UnknownData_F73F, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFT_Root_C, CraftTimer, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFT_Root_C, Root_MainSlots_Class, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFT_Root_C, Root_SlotsAllWidget, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCRAFT_Root_C, Root_ResourceSlotsArray, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZ_InventoryCRAFT_Root_C, 0x02B0);
		}

		// class USet_of_Boxes_02_Rig_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Set_of_Boxes_02_Rig_AnimBP__Set_of_Boxes_02_Rig_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_02_Rig_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_02_Rig_AnimBP_C, AnimGraphNode_Root_0CDF976D452D287A15F414AEBA6B0065, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_02_Rig_AnimBP_C, AnimGraphNode_LocalRefPose_7A3D835F4B1C84FD0101C89478311E74, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_02_Rig_AnimBP_C, AnimGraphNode_BlendListByBool_E885BC5E4A9D64366A2C5D96BE59BD30, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::USet_of_Boxes_02_Rig_AnimBP_C, AnimGraphNode_SequencePlayer_A2D5107E4545935004642C8424235025, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USet_of_Boxes_02_Rig_AnimBP_C, 0x0588);
		}

		// class AFurniture2_19_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture2_19_Rig__Furniture2_19_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture2_19_Rig_C, 0x03C2);
		}

		// class A_SpawnFurnitur_13_C : public ACv3_SpawnLootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass___SpawnFurnitur_14___SpawnFurnitur_13_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::A_SpawnFurnitur_13_C, NewVar_1, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_SpawnFurnitur_13_C, 0x0391);
		}

		// class AWall_Room_Transition_BP_02_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Wall_Room_Transition_BP_02__Wall_Room_Transition_BP_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWall_Room_Transition_BP_02_C, 0x0370);
		}

		// class AFence_Brick_2_type_2_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Fence_Brick_2_type_3__Fence_Brick_2_type_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFence_Brick_2_type_2_C, 0x0378);
		}

		// class UCv4_TurrelGunner_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Cv4_TurrelGunner__Cv4_TurrelGunner_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_TurrelGunner_C, UnknownData_5K9O, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_TurrelGunner_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_TurrelGunner_C, AnimGraphNode_Root_A67DB493446CB7B1A6646090C88CCEAC, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_TurrelGunner_C, AnimGraphNode_BlendListByBool_81B67FE047C6A1F878CB7086BAE5F377, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_TurrelGunner_C, AnimGraphNode_BlendListByBool_6A0209C640B1AF1493577A967D8E080B, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_TurrelGunner_C, AnimGraphNode_SequencePlayer_71D5F8D34F4C522E13C7E6929F1C0647, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_TurrelGunner_C, AnimGraphNode_SequencePlayer_FA045BB146493B3496A040B683E6E72F, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_TurrelGunner_C, AnimGraphNode_SequencePlayer_E4EF6C17478DD959E55E8DAF8A35D7CE, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_TurrelGunner_C, MoveLeft, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv4_TurrelGunner_C, MoveRight, 0x0701);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCv4_TurrelGunner_C, 0x0702);
		}

		// class ASkhaf_1_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Skhaf_2__Skhaf_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkhaf_1_C, 0x0370);
		}

		// class ACv2_ProjectileBase_ChildAIrBomb_C : public ACv2_ProjectileBase_C
		TEST_METHOD(BlueprintGeneratedClass__Cv2_ProjectileBase_ChildAIrBomb__Cv2_ProjectileBase_ChildAIrBomb_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_ProjectileBase_ChildAIrBomb_C, 0x03F0);
		}

		// class UMenu_MainMenu_Character_C : public UMenu_InGame_Panel_ROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Menu_MainMenu_Character__Menu_MainMenu_Character_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Character_C, UnknownData_8PAQ, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Character_C, UberGraphFrame, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Character_C, Body, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Character_C, Head, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Character_C, Image_1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Character_C, Parent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Character_C, SerchingVisibility, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Character_C, UnknownData_A5NS, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_Character_C, InvCharacterVar, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenu_MainMenu_Character_C, 0x0250);
		}

		// class UBeretta_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Beretta_AnimBP__Beretta_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeretta_AnimBP_C, UnknownData_PKVJ, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeretta_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeretta_AnimBP_C, AnimGraphNode_Root_20E1EDAE4E7D38CCCCBF388460BF060D, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeretta_AnimBP_C, AnimGraphNode_SequencePlayer_01970B8C4B36FA82E4B137A745A627D3, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeretta_AnimBP_C, AnimGraphNode_Slot_5E45079B4505D79F2C0FC199F3469547, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeretta_AnimBP_C, AnimGraphNode_BlendListByBool_10BF5B774F1D33A4EB4851A13F0C01D4, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeretta_AnimBP_C, AnimGraphNode_SequencePlayer_F409103A483D05AB537D49B46DE41734, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeretta_AnimBP_C, lastShoot, 0x0628);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBeretta_AnimBP_C, 0x0629);
		}

		// class UMobileInstalledContent : public UObject
		TEST_METHOD(Class__MobilePatchingUtils__MobileInstalledContent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileInstalledContent, UnknownData_XJKI, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobileInstalledContent, 0x0048);
		}

		// class UMobilePendingContent : public UMobileInstalledContent
		TEST_METHOD(Class__MobilePatchingUtils__MobilePendingContent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobilePendingContent, UnknownData_GCQR, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobilePendingContent, 0x0088);
		}

		// class UMobilePatchingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MobilePatchingUtils__MobilePatchingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobilePatchingLibrary, 0x0028);
		}

		// class ACv3_Fence_Concrete_Stone_04_C : public ACv2_HouseBase_C
		TEST_METHOD(BlueprintGeneratedClass__Cv3_Fence_Concrete_Stone_04__Cv3_Fence_Concrete_Stone_04_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_Fence_Concrete_Stone_04_C, UberGraphFrame, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_Fence_Concrete_Stone_04_C, Scene, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_Fence_Concrete_Stone_04_C, Stone_04_Stone_04_z2_1, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_Fence_Concrete_Stone_04_C, Stone_04_Stone_04_z1_1, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_Fence_Concrete_Stone_04_C, Stone_04_Foundation_Stone_04, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv3_Fence_Concrete_Stone_04_C, 0x0440);
		}

		// class ACraneTower_BP1_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__CraneTower_BP1__CraneTower_BP1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraneTower_BP1_C, ChildActor, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraneTower_BP1_C, Ladder_BP1, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACraneTower_BP1_C, 0x0388);
		}

		// class ABuild_6_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Build_7__Build_6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABuild_6_C, 0x0370);
		}

		// class URegionDefend_C : public UPointer_Root_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__RegionDefend__RegionDefend_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionDefend_C, UnknownData_P2JN, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionDefend_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionDefend_C, Border_3, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionDefend_C, MAP_RoundProgress, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionDefend_C, TextBlock_78, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionDefend_C, TextMarker, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionDefend_C, Zone, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URegionDefend_C, 0x0258);
		}

		// class ASofa_05_older_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Sofa_05_older__Sofa_05_older_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASofa_05_older_C, 0x0370);
		}

		// class Abuilding_A_static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__building_A_static_BP__building_A_static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Abuilding_A_static_BP_C, 0x0370);
		}

		// class UMessageKillShip_Base_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MessageKillShip_Base__MessageKillShip_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageKillShip_Base_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageKillShip_Base_C, Message_KillerShipMessage, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageKillShip_Base_C, Message_KillerShipMessage_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageKillShip_Base_C, Message_KillerShipMessage_2, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageKillShip_Base_C, Message_KillerShipMessage_183, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageKillShip_Base_C, VerticalBox_1, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMessageKillShip_Base_C, 0x0230);
		}

		// class UCv2_GameInstance_C : public UGameInstance
		TEST_METHOD(BlueprintGeneratedClass__Cv2_GameInstance__Cv2_GameInstance_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, UnknownData_PLOQ, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, UberGraphFrame, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, MasterSoundVolume, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, UnknownData_2GYF, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, SettingsStruct, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, SupportedResolution, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, JoinServerName, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, MyFiends, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, isConnectToSaveServer, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, UnknownData_4VZI, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, PlayersSaveData, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, MusicVolume, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, isMainMenuSurv, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, UnknownData_373A, 0x019D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, MouseMaxScale, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, UnknownData_CEX3, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, Zagluha, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, selectedSession, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, SavedConnectSession, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, ConnectedToMainMenu, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, UnknownData_LF4C, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, LobbyFriends, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, LobbyID, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, UnknownData_BPEB, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, MainMenuConnection, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, MyDlc, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, LobbyCountPlayers, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, UnknownData_XGBQ, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, BOT_Kills, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, NPC_Save, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, PlayerKills, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, PlayerDeath, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, LifeHours, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, OldInventoryCost, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, ShowStatWindow, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, UnknownData_4J26, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, SeifOpen, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, UnknownData_UG52, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, ServerName, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_GameInstance_C, AC_SystemOK, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCv2_GameInstance_C, 0x03A1);
		}

		// class UMenu_InGame_OptionsMenu_C : public UMenu_InGame_Panel_ROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Menu_InGame_OptionsMenu__Menu_InGame_OptionsMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_OptionsMenu_C, UnknownData_F4HI, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_OptionsMenu_C, UberGraphFrame, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_OptionsMenu_C, Audio, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_OptionsMenu_C, Back, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_OptionsMenu_C, Keyboard, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_OptionsMenu_C, Mouse, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_OptionsMenu_C, Video, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenu_InGame_OptionsMenu_C, 0x0248);
		}

		// class UDRAGUNOV_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__DRAGUNOV_AnimBP__DRAGUNOV_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDRAGUNOV_AnimBP_C, UnknownData_65IA, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDRAGUNOV_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDRAGUNOV_AnimBP_C, AnimGraphNode_Root_B286CC15402061CEAA6B849C453EA2AE, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDRAGUNOV_AnimBP_C, AnimGraphNode_SequencePlayer_905D9C3A4BA12862F9E5B9B27AA1F975, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDRAGUNOV_AnimBP_C, AnimGraphNode_Slot_57A6B7024B516169815924B17C95D9BB, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDRAGUNOV_AnimBP_C, 0x04E8);
		}

		// class ARock_14_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Rock_14_Static_BP__Rock_14_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARock_14_Static_BP_C, 0x0370);
		}

		// class UMenu_InGame_Panel_ROOT_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Menu_InGame_Panel_ROOT__Menu_InGame_Panel_ROOT_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Panel_ROOT_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Panel_ROOT_C, Root_Parent, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_Panel_ROOT_C, Root_MenuType, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenu_InGame_Panel_ROOT_C, 0x0211);
		}

		// class USurv_AR15_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Surv_AR15_AnimBP__Surv_AR15_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_AR15_AnimBP_C, UnknownData_JBWH, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_AR15_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_AR15_AnimBP_C, AnimGraphNode_Root_1C695CB949FF7C35C7C9EA847821E3FB, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_AR15_AnimBP_C, AnimGraphNode_Slot_33240CAA48D46D21D70BC796DB6B1225, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_AR15_AnimBP_C, AnimGraphNode_SequencePlayer_06F1586E40E07F7D3D058689AA476642, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurv_AR15_AnimBP_C, 0x04E8);
		}

		// class ATV_Static_2_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__TV_Static_3__TV_Static_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATV_Static_2_C, 0x0370);
		}

		// class AConcretesA_Static_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__ConcretesA_Static__ConcretesA_Static_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConcretesA_Static_C, 0x0370);
		}

		// class AGates_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Gates_Static_BP__Gates_Static_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGates_Static_BP_C, gateMetaStolb_L, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGates_Static_BP_C, gateMetal_R, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGates_Static_BP_C, gateMetal_L, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGates_Static_BP_C, 0x0388);
		}

		// class ASofa_01_older_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Sofa_01_older__Sofa_01_older_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASofa_01_older_C, 0x0370);
		}

		// class UImgMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__ImgMedia__ImgMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, FramesPerSecondOverride, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, UnknownData_WQKJ, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, ProxyOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, SequencePath, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImgMediaSource, 0x0060);
		}

		// class ACv2_PassagerPawn_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__Cv2_PassagerPawn__Cv2_PassagerPawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PassagerPawn_C, UberGraphFrame, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PassagerPawn_C, VoiceAudio, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PassagerPawn_C, VoiceChat, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PassagerPawn_C, Camera, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PassagerPawn_C, SpringArm, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PassagerPawn_C, DefaultSceneRoot, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PassagerPawn_C, Character, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PassagerPawn_C, Vehicle, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PassagerPawn_C, TypeCrew, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PassagerPawn_C, PushToTalk, 0x0409);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_PassagerPawn_C, 0x040A);
		}

		// class UInventory_MassWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Inventory_MassWidget__Inventory_MassWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_MassWidget_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_MassWidget_C, overloadProgressbar_27, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_MassWidget_C, OverloadMassAnim, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_MassWidget_C, overloadProgressbar, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_MassWidget_C, CountText, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_MassWidget_C, Overlay_2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_MassWidget_C, OverloadMass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_MassWidget_C, PercentText, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_MassWidget_C, ProgressBar_Main, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_MassWidget_C, ProgressBar_Overload, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_MassWidget_C, Spacer_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_MassWidget_C, Percent, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_MassWidget_C, UnknownData_VJPO, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_MassWidget_C, TimerVar, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_MassWidget_C, MaxMass, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_MassWidget_C, Mass, 0x026C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventory_MassWidget_C, 0x0270);
		}

		// class ABlind_5_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Blind_6__Blind_5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlind_5_C, 0x0370);
		}

		// class UImgMediaSettings : public UObject
		TEST_METHOD(Class__ImgMediaFactory__ImgMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, DefaultFps, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheBehindPercentage, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheSizeGB, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, ExrDecoderThreads, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, DefaultProxy, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UseDefaultProxy, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_XTJO, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImgMediaSettings, 0x0050);
		}

		// class Ahangar_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__hangar_Static_BP__hangar_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ahangar_Static_BP_C, 0x0370);
		}

		// class UCV2_Panel_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CV2_Panel__CV2_Panel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_Panel_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_Panel_C, BodyFon, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_Panel_C, BodySlot, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_Panel_C, HeaderFon, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_Panel_C, HeaderText, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_Panel_C, Header_text, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCV2_Panel_C, 0x0240);
		}

		// class AJB_Fence_Static_BP_2_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__JB_Fence_Static_BP_3__JB_Fence_Static_BP_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AJB_Fence_Static_BP_2_C, 0x0370);
		}

		// class AL_House_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__L_House__L_House_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AL_House_C, StairConcrete, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AL_House_C, L_House_New_L_House_Windows, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AL_House_C, 0x0380);
		}

		// class UZ_InventoryCraftSlot_ROOT_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Z_InventoryCraftSlot_ROOT__Z_InventoryCraftSlot_ROOT_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftSlot_ROOT_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftSlot_ROOT_C, ROOT_InventoryPanel, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftSlot_ROOT_C, Root_Index, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftSlot_ROOT_C, UnknownData_F7Q5, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftSlot_ROOT_C, RootPanel, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftSlot_ROOT_C, HoverColorRoot, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftSlot_ROOT_C, UnHoverColorRoot, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftSlot_ROOT_C, RootSelectedImage, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZ_InventoryCraftSlot_ROOT_C, 0x0230);
		}

		// class ACv2_ProjectileBase_ChildRocket_C : public ACv2_ProjectileBase_C
		TEST_METHOD(BlueprintGeneratedClass__Cv2_ProjectileBase_ChildRocket__Cv2_ProjectileBase_ChildRocket_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ProjectileBase_ChildRocket_C, UberGraphFrame, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ProjectileBase_ChildRocket_C, Sphere, 0x03F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_ProjectileBase_ChildRocket_C, 0x0400);
		}

		// class AInventoryCharacterMainMenuRender_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__InventoryCharacterMainMenuRender__InventoryCharacterMainMenuRender_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, MOD_SILENCER, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, Face, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, LEGS_PARTS, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, HANDS_PARTS, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, FOOT_PARTS, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, TORSE_PARTS, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, MOD_OPTIC, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, Backpack, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, MeleeWeapon, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, GrenadeRight, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, GrenadeLeft, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, Pistol, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, Helmet, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, Weapon, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, ToonSoldier_Soviet, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, DefaultSceneRoot, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, Turbine_NewTrack_0_4B884EF24551DEC0B75A1EAE5EEB8A28, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, Turbine__Direction_4B884EF24551DEC0B75A1EAE5EEB8A28, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, UnknownData_PJVS, 0x03F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, Turbine, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, Nation, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, UnknownData_4QFM, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, oldIndex, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, oldMaterials, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, proxyModMesh, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, proxyWeapon, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, UnknownData_UIOT, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, proxySilencerMesh, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryCharacterMainMenuRender_C, proxyWeaponMesh, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInventoryCharacterMainMenuRender_C, 0x0438);
		}

		// class ABuilding_02_miha_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Building_02_miha__Building_02_miha_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_02_miha_C, StaticMesh2, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_02_miha_C, CraftWindow_Frame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_02_miha_C, _CraftDoor_Frame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_02_miha_C, chair6, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_02_miha_C, StaticMesh1, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_02_miha_C, ChildActor, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_02_miha_C, _SpawnFurnitur_04, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_02_miha_C, _SpawnFurnitur_09, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_02_miha_C, sink6, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_02_miha_C, blind_01, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_02_miha_C, blind5, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_02_miha_C, table4, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuilding_02_miha_C, bed1, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABuilding_02_miha_C, 0x03E0);
		}

		// class ASplineSpawner_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__SplineSpawner_BP__SplineSpawner_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineSpawner_BP_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineSpawner_BP_C, Spline, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineSpawner_BP_C, DefaultSceneRoot, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineSpawner_BP_C, PrefabsArray, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineSpawner_BP_C, SpawnedPrefabs, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineSpawner_BP_C, ActorsCount, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineSpawner_BP_C, SpawnDistanceAlongSpline, 0x03A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASplineSpawner_BP_C, 0x03A8);
		}

		// class ARockFlats_Boulder_Alone_Prefab_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__RockFlats_Boulder_Alone_Prefab__RockFlats_Boulder_Alone_Prefab_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARockFlats_Boulder_Alone_Prefab_C, 0x0370);
		}

		// class UPointerMapActor_C : public UPointer_Root_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__PointerMapActor__PointerMapActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointerMapActor_C, UnknownData_5WKM, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointerMapActor_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointerMapActor_C, Image_1, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointerMapActor_C, 0x0238);
		}

		// class UT40_Back_C : public UVehicleWheel
		TEST_METHOD(BlueprintGeneratedClass__T40_Back__T40_Back_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UT40_Back_C, 0x00F0);
		}

		// class AFence_Wall_02_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Fence_Wall_02__Fence_Wall_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFence_Wall_02_C, 0x0378);
		}

		// class AFurniture_04_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture_04_Rig__Furniture_04_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture_04_Rig_C, 0x03C2);
		}

		// class ARockRamp_Straight_01_Prefab_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__RockRamp_Straight_01_Prefab__RockRamp_Straight_01_Prefab_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARockRamp_Straight_01_Prefab_C, 0x0370);
		}

		// class UZ_InventoryCraftResourseSlotROOT_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Z_InventoryCraftResourseSlotROOT__Z_InventoryCraftResourseSlotROOT_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourseSlotROOT_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourseSlotROOT_C, RootNeedRecourcecount, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourseSlotROOT_C, UnknownData_ZQRA, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourseSlotROOT_C, RootIcon, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourseSlotROOT_C, RootResourceName, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourseSlotROOT_C, RootNowRecourseCount, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourseSlotROOT_C, UnknownData_UHEW, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourseSlotROOT_C, RootProgressBar, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourseSlotROOT_C, RootLootName, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourseSlotROOT_C, LootStr, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZ_InventoryCraftResourseSlotROOT_C, 0x02D8);
		}

		// class APillars_02_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Pillars_02__Pillars_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APillars_02_C, 0x0378);
		}

		// class ASaray2_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Saray2__Saray2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASaray2_C, 0x0378);
		}

		// class USURV_Inventory_Backpack_C : public UZ_Inventory_Slot_ROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__SURV_Inventory_Backpack__SURV_Inventory_Backpack_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Backpack_C, UberGraphFrame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Backpack_C, CanCombineAnim, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Backpack_C, AttachPanel, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Backpack_C, Backpackicon, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Backpack_C, BlockDrop, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Backpack_C, CanCombineIcon, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Backpack_C, CanDrop, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Backpack_C, Count, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Backpack_C, CountText, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Backpack_C, DiscountText, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Backpack_C, Fon, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Backpack_C, Icon, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Backpack_C, IconOverlay, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Backpack_C, MAGAZINE, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Backpack_C, MouseWheelZone, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Backpack_C, On_Drag, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Backpack_C, Overlay_1, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Backpack_C, Price, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Backpack_C, Scope, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Backpack_C, Silincer, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Backpack_C, SizeBox_1, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Backpack_C, SplitProgress, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_Inventory_Backpack_C, Discount, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USURV_Inventory_Backpack_C, 0x043C);
		}

		// class USurv_Car_Passat_AnimBP_C : public UVehicleAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Surv_Car_Passat_AnimBP__Surv_Car_Passat_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Passat_AnimBP_C, UberGraphFrame, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Passat_AnimBP_C, AnimGraphNode_Root_54592BF74A963D3AB29004B516AE2D75, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Passat_AnimBP_C, AnimGraphNode_WheelHandler_80E64B3C42A5BFF2E038C09BDB6308A1, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Passat_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_CE393BE549531F6BAEEEC48E1794119B, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Passat_AnimBP_C, AnimGraphNode_MeshRefPose_6E34F3E2440BBA797172EEAF4E893F91, 0x09D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurv_Car_Passat_AnimBP_C, 0x0A00);
		}

		// class ARedBuild_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__RedBuild__RedBuild_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARedBuild_C, 0x0370);
		}

		// class USurv_Car_Vaz_2101_AnimBP_C : public UVehicleAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Surv_Car_Vaz_2101_AnimBP__Surv_Car_Vaz_2101_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Vaz_2101_AnimBP_C, UberGraphFrame, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Vaz_2101_AnimBP_C, AnimGraphNode_Root_4334DC334EB8B880DCE036A65D027701, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Vaz_2101_AnimBP_C, AnimGraphNode_WheelHandler_B4C71AA34C0F0D7AFDF27BB3A224240C, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Vaz_2101_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_9FA60AE44F6C1BA45C9D7BB222225814, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Vaz_2101_AnimBP_C, AnimGraphNode_MeshRefPose_A42373AF4CEA485EEB18B589D37D29DF, 0x09D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurv_Car_Vaz_2101_AnimBP_C, 0x0A00);
		}

		// class ASofa_07_older_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Sofa_07_older__Sofa_07_older_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASofa_07_older_C, 0x0370);
		}

		// class USurv_Car_Vaz_2109_AnimBP_C : public UVehicleAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Surv_Car_Vaz_2109_AnimBP__Surv_Car_Vaz_2109_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Vaz_2109_AnimBP_C, UberGraphFrame, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Vaz_2109_AnimBP_C, AnimGraphNode_Root_FEFE440D4AC50EA2B92FF8ABD0B4F905, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Vaz_2109_AnimBP_C, AnimGraphNode_WheelHandler_66F6FCEE42EC54EEA6F0A5A4CC2F4AC5, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Vaz_2109_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_F75BBDB14672D4D01F42CE9273A7DAD2, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_Vaz_2109_AnimBP_C, AnimGraphNode_MeshRefPose_D4204E144B8F2B1DBD13BD930E2EE3F9, 0x09D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurv_Car_Vaz_2109_AnimBP_C, 0x0A00);
		}

		// class UZ_TradeInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__Z_TradeInterface__Z_TradeInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZ_TradeInterface_C, 0x0028);
		}

		// class AKacheli1_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Kacheli1__Kacheli1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKacheli1_C, 0x0378);
		}

		// class Aboylernaya_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__boylernaya__boylernaya_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Aboylernaya_C, Ladder_BP1, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aboylernaya_C, WINDOWS, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aboylernaya_C, glass, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aboylernaya_C, decalDark, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aboylernaya_C, decalBrick, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aboylernaya_C, brickTrash, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aboylernaya_C, boyler_roof, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Aboylernaya_C, Boyler_in, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aboylernaya_C, 0x03B0);
		}

		// class AFow_BotSpawnSystem_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Fow_BotSpawnSystem__Fow_BotSpawnSystem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BotSpawnSystem_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BotSpawnSystem_C, DefaultSceneRoot, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BotSpawnSystem_C, VillageController, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BotSpawnSystem_C, SpawnBot, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BotSpawnSystem_C, BotName, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BotSpawnSystem_C, BotCheckpoints, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFow_BotSpawnSystem_C, proxyCheckPoint, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFow_BotSpawnSystem_C, 0x03B8);
		}

		// class ACv3_FireCamp_Child_C : public ACv3_FireCamp_C
		TEST_METHOD(BlueprintGeneratedClass__Cv3_FireCamp_Child__Cv3_FireCamp_Child_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv3_FireCamp_Child_C, 0x03E8);
		}

		// class ACv2_BombBP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv2_BombBP__Cv2_BombBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BombBP_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BombBP_C, BombMesh, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BombBP_C, Cv2_DestroyComponent, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BombBP_C, Damage, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_BombBP_C, Damage_Destruct, 0x0384);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_BombBP_C, 0x0388);
		}

		// class ABuild_5_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Build_6__Build_5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABuild_5_C, 0x0370);
		}

		// class USpawnManager_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__SpawnManager__SpawnManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnManager_C, UberGraphFrame, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnManager_C, AllSpawnPoints, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnManager_C, AvailableSpawnPoints, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnManager_C, 0x0118);
		}

		// class AstoreFull_static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__storeFull_static_BP__storeFull_static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AstoreFull_static_BP_C, 0x0370);
		}

		// class ACrateB_Static_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__CrateB_Static__CrateB_Static_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACrateB_Static_C, 0x0370);
		}

		// class UFurniture2_18_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture2_18_AnimBP__Furniture2_18_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_18_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_18_AnimBP_C, AnimGraphNode_Root_280916E548A9351A685BD7BBD7437984, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_18_AnimBP_C, AnimGraphNode_LocalRefPose_D48669774923BD86DA35399D07A04CEB, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_18_AnimBP_C, AnimGraphNode_BlendListByBool_D0BCD17749C525D839CE90847D665C2B, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_18_AnimBP_C, AnimGraphNode_SequencePlayer_27A7777F445EF99F1EA295BCC4907175, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture2_18_AnimBP_C, 0x0588);
		}

		// class ACave_Rock_Path_Single_Prefab_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Cave_Rock_Path_Single_Prefab__Cave_Rock_Path_Single_Prefab_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACave_Rock_Path_Single_Prefab_C, 0x0370);
		}

		// class ATable_Static_5_Older_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Table_Static_5_Older__Table_Static_5_Older_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATable_Static_5_Older_C, 0x0370);
		}

		// class ATubesA_Static_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__TubesA_Static__TubesA_Static_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATubesA_Static_C, 0x0370);
		}

		// class AFow_BOT_War_USSR_C : public AFow_BOT_C
		TEST_METHOD(BlueprintGeneratedClass__Fow_BOT_War_USSR__Fow_BOT_War_USSR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFow_BOT_War_USSR_C, 0x0B20);
		}

		// class AWall_Room_BP_02_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Wall_Room_BP_02__Wall_Room_BP_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWall_Room_BP_02_C, 0x0370);
		}

		// class A_SpawnFurnitur_15_C : public ACv3_SpawnLootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass___SpawnFurnitur_16___SpawnFurnitur_15_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_SpawnFurnitur_15_C, 0x0390);
		}

		// class A_SpawnFurnitur_12_C : public ACv3_SpawnLootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass___SpawnFurnitur_13___SpawnFurnitur_12_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_SpawnFurnitur_12_C, 0x0390);
		}

		// class AlepBroken_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__lepBroken__lepBroken_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AlepBroken_C, 0x0378);
		}

		// class AClock_static_1_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Clock_static_2__Clock_static_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AClock_static_1_C, 0x0370);
		}

		// class AContainerB_Static_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__ContainerB_Static__ContainerB_Static_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AContainerB_Static_C, 0x0370);
		}

		// class ALadder_BP1_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Ladder_BP1__Ladder_BP1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALadder_BP1_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALadder_BP1_C, BoxTrigger, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALadder_BP1_C, CharacterRef, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALadder_BP1_C, 0x0380);
		}

		// class UFurniture3_06_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture3_06_AnimBP__Furniture3_06_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture3_06_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture3_06_AnimBP_C, AnimGraphNode_Root_208E987B47A48116544B5EA8B1E755BC, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture3_06_AnimBP_C, AnimGraphNode_LocalRefPose_4ACD1EB042A59D2668F48BBB26092BE7, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture3_06_AnimBP_C, AnimGraphNode_BlendListByBool_BD603B964029537D797EDF8BCFAA382D, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture3_06_AnimBP_C, AnimGraphNode_SequencePlayer_28B4114F4B2B1433EF34E59626787782, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture3_06_AnimBP_C, 0x0588);
		}

		// class Acaffe_static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__caffe_static_BP__caffe_static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acaffe_static_BP_C, 0x0370);
		}

		// class AabandonedPlayground_Object_17_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__abandonedPlayground_Object_18__abandonedPlayground_Object_17_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AabandonedPlayground_Object_17_C, 0x0378);
		}

		// class Acupboard8_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__cupboard8__cupboard8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acupboard8_C, 0x0370);
		}

		// class ACv2_TreeDead_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv2_TreeDead__Cv2_TreeDead_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TreeDead_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TreeDead_C, TreeMesh, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_TreeDead_C, 0x0378);
		}

		// class Avent_1_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__vent_2__vent_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Avent_1_C, 0x0370);
		}

		// class AStoneDoor_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__StoneDoor_BP__StoneDoor_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStoneDoor_BP_C, 0x0370);
		}

		// class UStatisticString_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__StatisticString__StatisticString_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticString_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticString_C, Fon, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticString_C, InGame, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticString_C, Name, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticString_C, TextBlock_4, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticString_C, Total, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticString_C, TotalText, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticString_C, InGameText, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticString_C, NameText, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticString_C, IsHeader, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticString_C, UnknownData_WNL4, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticString_C, HeaderName, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatisticString_C, 0x0298);
		}

		// class USurv_Car_GAZ_3302_AnimBP_C : public UVehicleAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Surv_Car_GAZ_3302_AnimBP__Surv_Car_GAZ_3302_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_GAZ_3302_AnimBP_C, UberGraphFrame, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_GAZ_3302_AnimBP_C, AnimGraphNode_Root_4471579245F131AAB4AA95B5A40AF19D, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_GAZ_3302_AnimBP_C, AnimGraphNode_WheelHandler_19EE0059465C38B31136949C87438295, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_GAZ_3302_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_E332E762450CBB491E35BEA4E7FACC6B, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_GAZ_3302_AnimBP_C, AnimGraphNode_MeshRefPose_4594FC6F48C81459FDA23B9A622CA34D, 0x09D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurv_Car_GAZ_3302_AnimBP_C, 0x0A00);
		}

		// class Acabinet24_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__cabinet24__cabinet24_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acabinet24_C, 0x0370);
		}

		// class ARock3_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Rock3__Rock3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARock3_C, 0x0378);
		}

		// class Abuild__C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__build___build__C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Abuild__C, 0x0378);
		}

		// class ABusStop_1_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__BusStop_1_Static_BP__BusStop_1_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABusStop_1_Static_BP_C, 0x0370);
		}

		// class Afridge4_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__fridge4__fridge4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Afridge4_C, 0x0370);
		}

		// class AWall_Room_BP_01_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Wall_Room_BP_01__Wall_Room_BP_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWall_Room_BP_01_C, 0x0370);
		}

		// class A_Rural_house_07_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass___Rural_house_07___Rural_house_07_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, _CraftDoor_Frame, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, Door_01_Door_01_Frame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, StaticMesh11, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, StaticMesh9, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, StaticMesh7, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, StaticMesh6, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, StaticMesh10, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, StaticMesh14, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, Chimney_Metal_Detail, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, StaticMesh12, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, StaticMesh4, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, StaticMesh3, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, StaticMesh2, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, StaticMesh1, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, Windows_02_2_Windows_02_3, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, Socket_04, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, Door_02_Door_02_Frame, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, Door_06_Door_06_Details, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, Door_06_Door_06, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, Door_06_Door_06_Frame, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, Fireplace_01, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, Socket_03, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, Socket_02, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, Socket_01, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, Electrical_Socket_02, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, Electrical_Box_01, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, Door_01_Door_01, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, Door_01_Door_01_details, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, Chimney_02, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, Foundation_01, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, Porch_01_Porch_01, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, Peak_01, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, Roof_11, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_07_C, Attic_01, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_Rural_house_07_C, 0x0488);
		}

		// class AStanokTokarniy_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__StanokTokarniy_Static_BP__StanokTokarniy_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStanokTokarniy_Static_BP_C, 0x0370);
		}

		// class UMAP_WarehouseMarker_C : public UMapMarkerROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__MAP_WarehouseMarker__MAP_WarehouseMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_WarehouseMarker_C, UnknownData_E5G0, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_WarehouseMarker_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_WarehouseMarker_C, Image_1, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMAP_WarehouseMarker_C, 0x0248);
		}

		// class UMAP_Radio_C : public UMapMarkerROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__MAP_Radio__MAP_Radio_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_Radio_C, UnknownData_QHCP, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_Radio_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_Radio_C, Locator, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_Radio_C, Image_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_Radio_C, Image_2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_Radio_C, StyleTimer, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMAP_Radio_C, 0x0260);
		}

		// class APlanksSmall_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__PlanksSmall__PlanksSmall_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlanksSmall_C, 0x0370);
		}

		// class UConsoleSettings : public UObject
		TEST_METHOD(Class__EngineSettings__ConsoleSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, MaxScrollbackSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_1MCT, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, ManualAutoCompleteList, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteMapPaths, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, BackgroundOpacityPercentage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bOrderTopToBottom, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_L4KE, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, InputColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, HistoryColor, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCommandColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCVarColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteFadedColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_L5OJ, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsoleSettings, 0x0070);
		}

		// class UGameMapsSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameMapsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, EditorStartupMap, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, LocalMapOptions, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TransitionMap, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bUseSplitscreen, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TwoPlayerSplitscreenLayout, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ThreePlayerSplitscreenLayout, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bOffsetPlayerGamepadIds, 0x006B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, UnknownData_269H, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameInstanceClass, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameDefaultMap, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ServerDefaultMap, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultGameMode, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultServerGameMode, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeMapPrefixes, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeClassAliases, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameMapsSettings, 0x0108);
		}

		// class UGameNetworkManagerSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameNetworkManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MinDynamicBandwidth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MaxDynamicBandwidth, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, TotalNetBandwidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, BadPingThreshold, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_MAI1, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyRxCheatTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyTxCheatTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForRxStandby, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForTxStandby, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentForBadPing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, JoinInProgressStandbyWaitTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_UT57, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameNetworkManagerSettings, 0x0058);
		}

		// class UGameSessionSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameSessionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxSpectators, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxPlayers, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, UnknownData_G9XX, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSessionSettings, 0x0038);
		}

		// class UGeneralEngineSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralEngineSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralEngineSettings, 0x0028);
		}

		// class UGeneralProjectSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyDistinguishedName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CopyrightNotice, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Homepage, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, LicensingTerms, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, PrivacyPolicy, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectID, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectVersion, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, SupportContact, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDisplayedTitle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDebugTitleInfo, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bShouldWindowPreserveAspectRatio, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bUseBorderlessWindow, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bStartInVR, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bStartInAR, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowWindowResize, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowClose, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMaximize, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMinimize, 0x010F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralProjectSettings, 0x0110);
		}

		// class UHudSettings : public UObject
		TEST_METHOD(Class__EngineSettings__HudSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, UnknownData_6E1T, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, DebugDisplay, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHudSettings, 0x0040);
		}

		// class UFurniture_24_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture_24_AnimBP__Furniture_24_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_24_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_24_AnimBP_C, AnimGraphNode_Root_FC07636F4C1907AFD87082A10430181D, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_24_AnimBP_C, AnimGraphNode_LocalRefPose_C540D7CD41B7A3B459E9B8B93C26C482, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_24_AnimBP_C, AnimGraphNode_BlendListByBool_D290C8D740754E55030AABA91F03CAD2, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_24_AnimBP_C, AnimGraphNode_SequencePlayer_C4F175864D7C2DEBCC8F0299CC82F1D0, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture_24_AnimBP_C, 0x0588);
		}

		// class AFurniture_21_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture_21_Rig__Furniture_21_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture_21_Rig_C, 0x03C2);
		}

		// class AMediaPlane : public AActor
		TEST_METHOD(Class__MediaCompositing__MediaPlane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMediaPlane, MediaPlane, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMediaPlane, 0x0370);
		}

		// class UMediaPlaneComponent : public UPrimitiveComponent
		TEST_METHOD(Class__MediaCompositing__MediaPlaneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlaneComponent, Plane, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlaneComponent, UnknownData_66TX, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlaneComponent, 0x0760);
		}

		// class UMediaPlaneFrustumComponent : public UPrimitiveComponent
		TEST_METHOD(Class__MediaCompositing__MediaPlaneFrustumComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlaneFrustumComponent, 0x0690);
		}

		// class UMovieSceneMediaSection : public UMovieSceneSection
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, Proxy, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaSource, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, UnknownData_ATRV, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaSection, 0x0130);
		}

		// class UMovieSceneMediaTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaTrack, 0x00E0);
		}

		// class AMetalGarage_B_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__MetalGarage_B_Static_BP__MetalGarage_B_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMetalGarage_B_Static_BP_C, 0x0370);
		}

		// class Akitchen5_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__kitchen5__kitchen5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Akitchen5_C, 0x0370);
		}

		// class AFence2B_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Fence2B__Fence2B_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFence2B_C, 0x0378);
		}

		// class UMAP_CharacterMarker_C : public UMapMarkerROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__MAP_CharacterMarker__MAP_CharacterMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CharacterMarker_C, UnknownData_J4UT, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CharacterMarker_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_CharacterMarker_C, Image_1, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMAP_CharacterMarker_C, 0x0248);
		}

		// class UMAP_BaseMarker_C : public UMapMarkerROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__MAP_BaseMarker__MAP_BaseMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_BaseMarker_C, UnknownData_947Z, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_BaseMarker_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_BaseMarker_C, Button_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_BaseMarker_C, Image_1, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMAP_BaseMarker_C, 0x0250);
		}

		// class UAssetRegistryImpl : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetRegistryImpl, UnknownData_81GY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryImpl, 0x0A20);
		}

		// class UAssetRegistryHelpers : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryHelpers, 0x0028);
		}

		// class UAssetRegistry : public UInterface
		TEST_METHOD(Class__AssetRegistry__AssetRegistry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistry, 0x0028);
		}

		// class A_SpawnFurnitur_04_C : public ACv3_SpawnLootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass___SpawnFurnitur_04___SpawnFurnitur_04_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_SpawnFurnitur_04_C, 0x0390);
		}

		// class AFurniture_Bed_Static_02_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture_Bed_Static_02__Furniture_Bed_Static_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture_Bed_Static_02_C, 0x0370);
		}

		// class ALamp_1_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Lamp_2__Lamp_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALamp_1_C, 0x0370);
		}

		// class UCustomMeshComponent : public UMeshComponent
		TEST_METHOD(Class__CustomMeshComponent__CustomMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomMeshComponent, UnknownData_NWLR, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomMeshComponent, UnknownData_YB6H, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomMeshComponent, 0x06D0);
		}

		// class UZ_CV3_FunctionLybryary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__Z_CV3_FunctionLybryary__Z_CV3_FunctionLybryary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZ_CV3_FunctionLybryary_C, 0x0028);
		}

		// class Acabinet17_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__cabinet17__cabinet17_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acabinet17_C, 0x0370);
		}

		// class ARock_1_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Rock_1_Static_BP__Rock_1_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARock_1_Static_BP_C, 0x0370);
		}

		// class AFence_Wall_04_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Fence_Wall_04__Fence_Wall_04_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFence_Wall_04_C, Fence_Wall2_1destroyed, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFence_Wall_04_C, Fence_Wall_1destroyed, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFence_Wall_04_C, Fence_Wall2_2, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFence_Wall_04_C, 0x0390);
		}

		// class ARockRamp_Curved_03_Prefab_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__RockRamp_Curved_03_Prefab__RockRamp_Curved_03_Prefab_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARockRamp_Curved_03_Prefab_C, 0x0370);
		}

		// class UTutorial_BASE_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Tutorial_BASE__Tutorial_BASE_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorial_BASE_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorial_BASE_C, TutorialMessage, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorial_BASE_C, PlayerTimers, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorial_BASE_C, CurentFrameIndex, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorial_BASE_C, UnknownData_X8SC, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorial_BASE_C, PlayerFrames, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorial_BASE_C, CheckersTimer, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorial_BASE_C, CheckersArray, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorial_BASE_C, CurrentCheckersIndex, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorial_BASE_C, 0x0254);
		}

		// class UPointerOverlay_BASE_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PointerOverlay_BASE__PointerOverlay_BASE_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointerOverlay_BASE_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointerOverlay_BASE_C, CanvasPanel_1, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointerOverlay_BASE_C, WidgetsInScreen, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointerOverlay_BASE_C, CheckShkaftimer, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointerOverlay_BASE_C, 0x0228);
		}

		// class Agarbage_01_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__garbage_01__garbage_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agarbage_01_C, 0x0378);
		}

		// class ABuild_1_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Build_2__Build_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABuild_1_C, 0x0370);
		}

		// class ACv2_AmmoBox_C : public ACv2_AirDropBox_C
		TEST_METHOD(BlueprintGeneratedClass__Cv2_AmmoBox__Cv2_AmmoBox_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_AmmoBox_C, 0x03B1);
		}

		// class ARock_3_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Rock_3_Static_BP__Rock_3_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARock_3_Static_BP_C, 0x0370);
		}

		// class ULightningPreset_C : public UObject
		TEST_METHOD(BlueprintGeneratedClass__LightningPreset__LightningPreset_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightningPreset_C, PositionMin, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightningPreset_C, PositionMax, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightningPreset_C, RadiusMinMax, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightningPreset_C, IntensityMinMax, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightningPreset_C, Color, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightningPreset_C, clouds, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightningPreset_C, Scattering, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightningPreset_C, SkyLight, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightningPreset_C, DelayMinMax, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightningPreset_C, 0x006C);
		}

		// class UWeaponBox3_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__WeaponBox3_AnimBP__WeaponBox3_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponBox3_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponBox3_AnimBP_C, AnimGraphNode_Root_2F4C0D644D392DE1CBBCB3BA388FBB8B, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponBox3_AnimBP_C, AnimGraphNode_LocalRefPose_1922CBD54DD5393281810286C6250811, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponBox3_AnimBP_C, AnimGraphNode_BlendListByBool_224D0E59434EE7426A8FD3852498C773, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeaponBox3_AnimBP_C, AnimGraphNode_SequencePlayer_A19DF1BC43887A1FD73E64A90D2B99CB, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeaponBox3_AnimBP_C, 0x0588);
		}

		// class ASaray_Open2_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Saray_Open2__Saray_Open2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASaray_Open2_C, 0x0378);
		}

		// class Aconcrete_Stair_static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__concrete_Stair_static_BP__concrete_Stair_static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Aconcrete_Stair_static_BP_C, 0x0370);
		}

		// class USurv_Vip_Card_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Surv_Vip_Card__Surv_Vip_Card_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Vip_Card_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Vip_Card_C, Hover, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Vip_Card_C, Dollars, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Vip_Card_C, DollarsPrice, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Vip_Card_C, Fon, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Vip_Card_C, IceCoins, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Vip_Card_C, IceCoinsPrice, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Vip_Card_C, Icon, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Vip_Card_C, Image_3, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Vip_Card_C, Name, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Vip_Card_C, Vip_Str, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Vip_Card_C, Vip, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurv_Vip_Card_C, 0x0281);
		}

		// class UFurniture_09_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture_09_AnimBP__Furniture_09_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_09_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_09_AnimBP_C, AnimGraphNode_Root_E84E20134D316716E4524BB3EB2346CB, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_09_AnimBP_C, AnimGraphNode_LocalRefPose_5A7E0782459DCA1E113BB5A81C6757B1, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_09_AnimBP_C, AnimGraphNode_BlendListByBool_AE18DDEC4A4D72E5D54601BA0E14138B, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_09_AnimBP_C, AnimGraphNode_SequencePlayer_47F0D0174C1AE8DDC49DFA8861969D7A, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture_09_AnimBP_C, 0x0588);
		}

		// class A_Rural_house_17_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass___Rural_house_18___Rural_house_17_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, _CraftDoor_Frame, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Door_06_Frame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Door_05_Frame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Door_04_Frame, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Socket_08, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Socket_07, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Socket_05, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Window_02, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Window_big, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Window_05, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Socket_06, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, StaticMesh13, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, StaticMesh12, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, StaticMesh11, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, StaticMesh10, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, StaticMesh9, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, StaticMesh7, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, StaticMesh6, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, StaticMesh4, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, StaticMesh2, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Door_06_Door_06_glass, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Chimney_Metal_Detail, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Glass_01, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, big_glass, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, StaticMesh8, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, StaticMesh5, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Window_04, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, StaticMesh3, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Window_03, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, StaticMesh1, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Windows_01, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Socket_04, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Door_02_Door_02_details, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Door_02_Door_02, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Door_02_Frame, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Door_06_Door_06_Details, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Door_06_Door_06, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Door_03_Frame, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Fireplace_01, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Socket_03, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Socket_02, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Socket_01, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Electrical_Socket_02, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Electrical_Box_01, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Chimney_02, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Foundation_01, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Porch_01_Porch_01, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Peak_01, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Roof_11, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_17_C, Attic_01, 0x0500);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_Rural_house_17_C, 0x0508);
		}

		// class UStove_04_Rig_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Stove_04_Rig_AnimBP__Stove_04_Rig_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStove_04_Rig_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStove_04_Rig_AnimBP_C, AnimGraphNode_Root_729E65DC431B81836D4172AC37C6865E, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStove_04_Rig_AnimBP_C, AnimGraphNode_LocalRefPose_7DEA07714F6983384D2F1A8BB9012776, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStove_04_Rig_AnimBP_C, AnimGraphNode_BlendListByBool_51BE6AC845BA59C84A3EEB84801F3EF0, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStove_04_Rig_AnimBP_C, AnimGraphNode_SequencePlayer_47A86B1B40A6AC3B3CD6EE9F8A9EA7EF, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStove_04_Rig_AnimBP_C, 0x0588);
		}

		// class ACv2_ProjectileBase_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv2_ProjectileBase__Cv2_ProjectileBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ProjectileBase_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ProjectileBase_C, Audio, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ProjectileBase_C, Cv2_DestroyComponent, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ProjectileBase_C, Sphere1, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ProjectileBase_C, GrenadeMesh, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ProjectileBase_C, ProjectileMovement, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ProjectileBase_C, TypeGrenade, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ProjectileBase_C, GrenadeEnum, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ProjectileBase_C, UnknownData_NTC0, 0x039A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ProjectileBase_C, ExploseTimer, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ProjectileBase_C, proxyDamage, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ProjectileBase_C, proxyRadius, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ProjectileBase_C, proxyGrenadeStructure, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ProjectileBase_C, isBoomed, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ProjectileBase_C, UnknownData_IH7C, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_ProjectileBase_C, proxyHitActor, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_ProjectileBase_C, 0x03F0);
		}

		// class UVaRestFunctionsComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__VaRestFunctionsComponent__VaRestFunctionsComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, UberGraphFrame, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, addRequest, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, displayRequest, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, DisplayUserScore_Return, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, updateRequest, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, checkRequest, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, Responce, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, checkIsAdminRequest, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, OutStructure, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, addScoreKey, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, VIEWER_ID, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, MyStructure, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, UnknownData_12ZS, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, AddedStructure, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, MyController, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, MyMainMenuController, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, BanStruct_Ref, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, ReturnGetTimeStamp, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, ReturnGetTimeStampError, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, GetTimeStampReqest, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, UpdateTimeStampReq, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, TestReq_Request, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, Req_URL, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, playerstate_viewer_id, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, INVENTORY_GET_req, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, PLAYER_STATE_GET_Req, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, PLAYER_STATE_Create_req, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, PLAYER_STATE_SET_req, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, INVENTORY_SET_req, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, INVENTORY_viewer_id, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, INVENTORY_CREATE_req, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, Req_count, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, CurrentReq_count, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, GetPlayerInformationFail, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, UnknownData_V5AW, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, ClearArray, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, GET_INFORMATION_COMPLITE, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, PlayerState_setItems, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, CLASSICAL_GET_Req, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, CLASSICAL_Create_Entry_req, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, CLASSICAL_SET_req, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, Classical_str, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, GET_CLASSICAL_COMPLITE, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, Classical_Is_UpdateCharacter, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, UnknownData_ECLC, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, GET_TOTAL_TOP_Req, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, TOP_ALL_JSON_OBJ, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, WeekMode_req, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, BAN_CreateEntry_req, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, Ban_SET_Req, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, BanGetReq, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, BAN_PHP_NAME, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, PHP_MAIN_PATH, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, BanStr, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, PLAYER_STATE_PHP_NAME, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, OLD_INVENTORY_PHP_NAME, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, CLASSICAL_INVENTORY_PHP_NAME, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaRestFunctionsComponent_C, LIDERBOARDS_INVENTORY_PHP_NAME, 0x07B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVaRestFunctionsComponent_C, 0x07C0);
		}

		// class UMaterialShaderQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__MaterialShaderQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialShaderQualitySettings, ForwardSettingMap, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialShaderQualitySettings, 0x0078);
		}

		// class UShaderPlatformQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__ShaderPlatformQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, QualityOverrides, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, UnknownData_4STY, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShaderPlatformQualitySettings, 0x0040);
		}

		// class ACv4_CraftWindow_Base_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv4_CraftWindow_Base__Cv4_CraftWindow_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftWindow_Base_C, CraftWindow, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftWindow_Base_C, DefaultSceneRoot, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftWindow_Base_C, IsDestroyed, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftWindow_Base_C, UnknownData_B9O5, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftWindow_Base_C, HitPoints, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftWindow_Base_C, DestructionDamageMesh, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftWindow_Base_C, IsDamaged, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftWindow_Base_C, UnknownData_R0W3, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftWindow_Base_C, HitPointsMax, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftWindow_Base_C, Damaged_Static_Window, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_CraftWindow_Base_C, Is_Spawned_, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv4_CraftWindow_Base_C, 0x0399);
		}

		// class Ablock1_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__block1__block1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ablock1_C, 0x0378);
		}

		// class AIE_DoorB_Static_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__IE_DoorB_Static__IE_DoorB_Static_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIE_DoorB_Static_C, 0x0370);
		}

		// class USURV_GlobalMenuButton_C : public UGlobalMenuButton_ROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__SURV_GlobalMenuButton__SURV_GlobalMenuButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuButton_C, UnknownData_P01E, 0x028A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuButton_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuButton_C, ConfirmAnim, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuButton_C, Select, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuButton_C, Hover, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuButton_C, Button_1, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuButton_C, Fon, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuButton_C, Icon, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuButton_C, Key, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuButton_C, Line, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuButton_C, MenuText, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuButton_C, YesNoDialog, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuButton_C, OnClick_button, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuButton_C, IconBrush, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuButton_C, UseHoverScaleOnSelected, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuButton_C, UnknownData_AJK2, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_GlobalMenuButton_C, FontSize, 0x0374);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USURV_GlobalMenuButton_C, 0x0378);
		}

		// class ARock_Stairs_BP_2_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Rock_Stairs_BP_3__Rock_Stairs_BP_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARock_Stairs_BP_2_C, 0x0370);
		}

		// class UM249_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__M249_AnimBP__M249_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UM249_AnimBP_C, UnknownData_YQWI, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UM249_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UM249_AnimBP_C, AnimGraphNode_Root_8EA3F0474E73EE088422DB9746FF50DE, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UM249_AnimBP_C, AnimGraphNode_Slot_2B412F074DF176A2D56617BBA6E77B47, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UM249_AnimBP_C, AnimGraphNode_SequencePlayer_DCD5782C42581AD05F2CF5BDAEE40AB5, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UM249_AnimBP_C, 0x04E8);
		}

		// class UMAP_VehicleMarker_C : public UMapMarkerROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__MAP_VehicleMarker__MAP_VehicleMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_VehicleMarker_C, UnknownData_MHDX, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_VehicleMarker_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_VehicleMarker_C, EnemyAnimation, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_VehicleMarker_C, Fon, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_VehicleMarker_C, Image_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_VehicleMarker_C, EnemyAnimTimer, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_VehicleMarker_C, IsMyStyle, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_VehicleMarker_C, Game, 0x0261);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMAP_VehicleMarker_C, 0x0262);
		}

		// class Alavka2_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__lavka2__lavka2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Alavka2_C, 0x0378);
		}

		// class ABig_chimney_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Big_chimney__Big_chimney_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABig_chimney_C, Ladder_BP1, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABig_chimney_C, 0x0380);
		}

		// class UMAP_MapActorMarker_C : public UMapMarkerROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__MAP_MapActorMarker__MAP_MapActorMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_MapActorMarker_C, UnknownData_GZJI, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_MapActorMarker_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_MapActorMarker_C, Image_1, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMAP_MapActorMarker_C, 0x0248);
		}

		// class AKA_26_Dead_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__KA_26_Dead__KA_26_Dead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKA_26_Dead_C, 0x0378);
		}

		// class AVentilation_Static_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Ventilation_Static__Ventilation_Static_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVentilation_Static_C, 0x0370);
		}

		// class AConcreteBlockA_Static_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__ConcreteBlockA_Static__ConcreteBlockA_Static_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConcreteBlockA_Static_C, 0x0370);
		}

		// class UStatisticEndGameBASE_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__StatisticEndGameBASE__StatisticEndGameBASE_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticEndGameBASE_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticEndGameBASE_C, Artefackt, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticEndGameBASE_C, Bear, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticEndGameBASE_C, Button_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticEndGameBASE_C, Button_84, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticEndGameBASE_C, Deadwolf, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticEndGameBASE_C, Deaths, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticEndGameBASE_C, Fon, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticEndGameBASE_C, Gulf, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticEndGameBASE_C, Image_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticEndGameBASE_C, Image_3, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticEndGameBASE_C, Kills, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticEndGameBASE_C, Moneys, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticEndGameBASE_C, Nark, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticEndGameBASE_C, Scientist, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticEndGameBASE_C, Seif, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticEndGameBASE_C, TimeText, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticEndGameBASE_C, VAMPIRE, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticEndGameBASE_C, Wolf, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticEndGameBASE_C, GI_Var, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatisticEndGameBASE_C, BonusMoney, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatisticEndGameBASE_C, 0x02A4);
		}

		// class ABed_04_Military_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Bed_04_Military__Bed_04_Military_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABed_04_Military_C, 0x0370);
		}

		// class ASaray_Static_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Saray_Static__Saray_Static_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASaray_Static_C, 0x0370);
		}

		// class UInfernalDog_Skeleton_AnimBlueprint_DEAD_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__InfernalDog_Skeleton_AnimBlueprint_DEAD__InfernalDog_Skeleton_AnimBlueprint_DEAD_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfernalDog_Skeleton_AnimBlueprint_DEAD_C, UnknownData_DQV1, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfernalDog_Skeleton_AnimBlueprint_DEAD_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfernalDog_Skeleton_AnimBlueprint_DEAD_C, AnimGraphNode_Root_118211934E1960AE51541882874ED4A8, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfernalDog_Skeleton_AnimBlueprint_DEAD_C, AnimGraphNode_SequencePlayer_35CE693C43EDF195AF2E7F9FBFCC7419, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfernalDog_Skeleton_AnimBlueprint_DEAD_C, RandomDeathAnim, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfernalDog_Skeleton_AnimBlueprint_DEAD_C, 0x0488);
		}

		// class ASand_01_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Sand_01__Sand_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASand_01_C, 0x0378);
		}

		// class At_40m_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__t_40m__t_40m_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::At_40m_C, 0x0378);
		}

		// class UCommandString_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CommandString__CommandString_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandString_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandString_C, ActionText, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandString_C, Fon, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandString_C, Image_27, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandString_C, KeyName, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandString_C, KeyNameText, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandString_C, ActionTextVar, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandString_C, VoiceEnum, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCommandString_C, 0x0259);
		}

		// class UFireTurrelCameraShake1_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__FireTurrelCameraShake1__FireTurrelCameraShake1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFireTurrelCameraShake1_C, 0x0160);
		}

		// class AContainerE_Static_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__ContainerE_Static__ContainerE_Static_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AContainerE_Static_C, 0x0370);
		}

		// class UEND_Game_XP_Bar_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__END_Game_XP_Bar__END_Game_XP_Bar_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEND_Game_XP_Bar_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEND_Game_XP_Bar_C, Curenttext, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEND_Game_XP_Bar_C, Nexttext, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEND_Game_XP_Bar_C, ProgressBar_65, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEND_Game_XP_Bar_C, FontSize, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEND_Game_XP_Bar_C, 0x0224);
		}

		// class ABP_Christmas_Tree_2021_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Christmas_Tree_2022__BP_Christmas_Tree_2021_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Christmas_Tree_2021_C, UberGraphFrame, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Christmas_Tree_2021_C, Audio, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Christmas_Tree_2021_C, Light_Colors, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Christmas_Tree_2021_C, M_dynamic_Christmas_Tree0, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Christmas_Tree_2021_C, M_dynamic_Christmas_Tree1, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Christmas_Tree_2021_C, 0x03A0);
		}

		// class AConcreteShalter_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__ConcreteShalter__ConcreteShalter_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConcreteShalter_C, 0x0378);
		}

		// class AFurniture_Bed_Static_04_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture_Bed_Static_04__Furniture_Bed_Static_04_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture_Bed_Static_04_C, 0x0370);
		}

		// class AFence_Wall2_02_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Fence_Wall2_02__Fence_Wall2_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFence_Wall2_02_C, 0x0378);
		}

		// class AStreetLightStolb_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__StreetLightStolb_BP__StreetLightStolb_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStreetLightStolb_BP_C, 0x0370);
		}

		// class ARadio_static_10_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Radio_static_11__Radio_static_10_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARadio_static_10_C, 0x0370);
		}

		// class UTradeWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TradeWidget__TradeWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTradeWidget_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTradeWidget_C, ShowNoMoneys, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTradeWidget_C, ShowAnim, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTradeWidget_C, Fon, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTradeWidget_C, FromAvatar, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTradeWidget_C, FromCount, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTradeWidget_C, FromLootIcon, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTradeWidget_C, Image_21, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTradeWidget_C, ToAvatar, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTradeWidget_C, ToCOunt, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTradeWidget_C, ToLootIcon, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTradeWidget_C, TradeArrows, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTradeWidget_C, 0x0260);
		}

		// class UMap_Overlay_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Map_Overlay__Map_Overlay_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, ShowNet2, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, Black, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, Map_Overlay, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, MapTexture, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, Net2Level, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, Z_Order0, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, LandscapePivotCoords, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, SelfSize, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, Perehod, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, TerrainSize, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, ActorsOnMap, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, UpdateCoordinatesTIMER, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, CheckActorArrayValidTIMER, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, AddMarkersTimer, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, BaseScale, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, MimiMapMode, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, UnknownData_LA1G, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, RespawnActor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, BaseMarker, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, MiniMapRotation, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, Map_Geometry, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, IsMouseDown, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, MapCanMove, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, UnknownData_FLR6, 0x02DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, PreviousMousePositionX, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, PreviousMousePositionY, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, UseAutomaticScale, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, UnknownData_1UQZ, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, MinimumScale, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, Proportion, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, GeometryProportion, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, FactNoScaleMapSize, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, UnknownData_E9MI, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, NetPointPairs, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, NetWidgets, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, NetLineCount, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, ZoomStep, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, BeginBaseScale, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, PreviousStep, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, ScaleFirstStep, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, SelectSpawnMode, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, UnknownData_FYWP, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, AddSpawns, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, CheckEnemyTimer, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, StaticActorsTimer, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, GameMode, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, UnknownData_AQDF, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMap_Overlay_C, MiniMapBaseScale, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMap_Overlay_C, 0x0374);
		}

		// class Akitchen3_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__kitchen3__kitchen3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Akitchen3_C, 0x0370);
		}

		// class USurvMainMenuHomePanel_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SurvMainMenuHomePanel__SurvMainMenuHomePanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, ShowHonor, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, ShowCredits, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, AwardCalendarBase, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, AwardDealyBase, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, Border_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, Button_Credits, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, Button_No, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, Button_Yes, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, EditableTextBox_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, Honor, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, Image_1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, Image_2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, Image_3, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, InSearch, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, Menu_MainMenu_Lobby, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, Online, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, StatisticEndGameBASE, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, SurvBannerBase, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, TUTORIAL_YES_NO, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, OnlineCount, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, UnknownData_QL6G, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, TimerAllOnline, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, InSearchTimer, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvMainMenuHomePanel_C, HonorsID, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvMainMenuHomePanel_C, 0x02C8);
		}

		// class UFurniture_15_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture_15_AnimBP__Furniture_15_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_15_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_15_AnimBP_C, AnimGraphNode_Root_31E6886444243C96FD304ABFF06B5FE0, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_15_AnimBP_C, AnimGraphNode_LocalRefPose_7AC360FA437B7DB54797EC9D58B54FCA, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_15_AnimBP_C, AnimGraphNode_BlendListByBool_37F2C42E420F733CAFD62C837E594D83, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_15_AnimBP_C, AnimGraphNode_SequencePlayer_F0130D7545BFA3F07DECA6A4B6D0FE68, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture_15_AnimBP_C, 0x0588);
		}

		// class ATomb_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Tomb_BP__Tomb_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATomb_BP_C, 0x0370);
		}

		// class USUR_P90_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__SUR_P90_AnimBP__SUR_P90_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USUR_P90_AnimBP_C, UnknownData_I987, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USUR_P90_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USUR_P90_AnimBP_C, AnimGraphNode_Root_D37080E34349A53F01751F8E041CDC4F, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USUR_P90_AnimBP_C, AnimGraphNode_Slot_3AB7976B47AAEF2FEC0B09AE9E23B420, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USUR_P90_AnimBP_C, AnimGraphNode_SequencePlayer_DB40540F40EE962BDEE88CB725F1785A, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USUR_P90_AnimBP_C, 0x04E8);
		}

		// class ABOT_Creature_DEADWOLF_C : public ABOT_CreatureBase_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Creature_DEADWOLF__BOT_Creature_DEADWOLF_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_Creature_DEADWOLF_C, UnknownData_9OMM, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_Creature_DEADWOLF_C, UberGraphFrame, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABOT_Creature_DEADWOLF_C, 0x0570);
		}

		// class AStove_02_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Stove_02_Rig__Stove_02_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStove_02_Rig_C, 0x03C2);
		}

		// class ASaray_02_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Saray_02__Saray_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASaray_02_C, 0x0378);
		}

		// class AChair_Static_8_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Chair_Static_9__Chair_Static_8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChair_Static_8_C, 0x0370);
		}

		// class AMattress_02_Military_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Mattress_02_Military__Mattress_02_Military_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMattress_02_Military_C, 0x0370);
		}

		// class ACv2_Base_Tank_C : public ATankVehicle
		TEST_METHOD(BlueprintGeneratedClass__Cv2_Base_Tank__Cv2_Base_Tank_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, UberGraphFrame, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, Cv4_BulletComponent, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, VoiceChat, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, VoiceAudio, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, Fire, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, Z_InventoryComponent, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, Camera, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, SpotLight, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, Passager2_Helmet, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, Capsule2, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, Passager2, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, Capsule1, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, Passager1_Helmet, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, Passager1, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, Cv2_DestroyComponent, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, Cv2_VehicleComponent, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, Turret, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, Scene, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, Box, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, DriverHelmet, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, Capsule, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, DriverMesh, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, tire, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, Engine, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, Kostil, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, SpringArm, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, AxisForward, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, AxisRight, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, MaxSpeed, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, EngineActive, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, UnknownData_X4UL, 0x04B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, TurretBase, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, TurretGun, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, NetTurretBase, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, NetTurretGun, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, VehicleEnum, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, isFire, 0x04C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, UnknownData_SRCD, 0x04CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, VehicleStructure, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, FireRateTimer, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, UnknownData_CG38, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, Crews, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, AIController, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, HitPoints, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, isDead, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, UnknownData_DK2N, 0x05E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, DynamicTrack2, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, DynamicTrack3, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, IsAim, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, UnknownData_MF8Z, 0x05F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, PassagersPawn, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, Light, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, IsOpen, 0x0611);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, UnknownData_NDC3, 0x0612);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, AttackHouseTimer, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, isFireNet, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, isMachinegunner, 0x0619);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, UnknownData_GQNM, 0x061A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, FireRateMachineguuner, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, WeaponStructure, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, damageDirection, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, CameraFollowProjectile, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, UnknownData_LI50, 0x0875);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, DynamicProjectile, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, FreeView, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, UnknownData_F4HO, 0x0881);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, NetVehicleLocation, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, NetVehicleRotation, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, dropVelocityTimer, 0x089C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, ShiftSpeed, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, isKazenniy, 0x08A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, IsDamaged, 0x08A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, UnknownData_G9V5, 0x08A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, damageEmitterTimer, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, RealSide, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, isZoomCamera, 0x08B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, isDamaged_Left_Track, 0x08B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, isDamaged_Right_Track, 0x08B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, repairTracksCount, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, cameraMoves, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, isDamaged_Engine, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, UnknownData_UAO0, 0x08BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, StartSpawnTime, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, PushToTalk, 0x08C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, UnknownData_AACB, 0x08C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_Base_Tank_C, AmmoShells, 0x08C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_Base_Tank_C, 0x08CC);
		}

		// class ACv4_SpawnDestoryedPrefab_Child_C : public ACv4_SpawnDestoryedPrefab_C
		TEST_METHOD(BlueprintGeneratedClass__Cv4_SpawnDestoryedPrefab_Child__Cv4_SpawnDestoryedPrefab_Child_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv4_SpawnDestoryedPrefab_Child_C, 0x0380);
		}

		// class UInventoryRenderWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InventoryRenderWidget__InventoryRenderWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryRenderWidget_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryRenderWidget_C, Show, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryRenderWidget_C, Image_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryRenderWidget_C, MouseIsDown, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryRenderWidget_C, UnknownData_CXSY, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryRenderWidget_C, OldMousePosition, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryRenderWidget_C, RenderActor, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryRenderWidget_C, RenderActor1, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryRenderWidget_C, 0x0230);
		}

		// class A_Rural_house_10_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass___Rural_house_11___Rural_house_10_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, _CraftDoor_Frame, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Door_06_Frame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Door_05_Frame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Door_04_Frame, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Socket_08, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Socket_06, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Socket_05, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Window_02, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Window_05, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Socket_07, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Window_big, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, StaticMesh10, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, StaticMesh9, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, StaticMesh7, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, StaticMesh6, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, StaticMesh4, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, StaticMesh2, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Door_06_Door_06_glass, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Chimney_Metal_Detail, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Glass_01, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, big_glass, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, StaticMesh8, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, StaticMesh5, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Window_04, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, StaticMesh3, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Window_03, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, StaticMesh1, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Windows_01, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Socket_04, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Door_02_Door_02_details, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Door_02_Door_02, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Door_02_Frame, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Door_06_Door_06_Details, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Door_06_Door_06, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Door_03_Frame, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Fireplace_01, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Socket_03, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Socket_02, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Socket_01, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Electrical_Socket_02, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Electrical_Box_01, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Chimney_02, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Foundation_01, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Porch_01_Porch_01, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Peak_01, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Roof_11, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_10_C, Attic_01, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_Rural_house_10_C, 0x04F0);
		}

		// class UDataBaseError_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DataBaseError__DataBaseError_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataBaseError_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataBaseError_C, Button_1, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataBaseError_C, Image_52, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataBaseError_C, Image_53, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataBaseError_C, ShowMouseCursor, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataBaseError_C, 0x0221);
		}

		// class UInventoryBigCard_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InventoryBigCard__InventoryBigCard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBigCard_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBigCard_C, Hover, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBigCard_C, Count, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBigCard_C, Fon, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBigCard_C, Footer, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBigCard_C, Header, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBigCard_C, HoverImage, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBigCard_C, Ico, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBigCard_C, Image_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBigCard_C, HeaderText, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBigCard_C, Texture, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBigCard_C, IsEmpty, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBigCard_C, UnknownData_I5G7, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBigCard_C, LootCargo, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBigCard_C, UnknownData_39R1, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBigCard_C, LootType, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBigCard_C, Contains _anything, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBigCard_C, UnknownData_AZO7, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBigCard_C, LootIndex, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBigCard_C, Root, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryBigCard_C, 0x0298);
		}

		// class ATable_Verstak_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Table_Verstak__Table_Verstak_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATable_Verstak_C, 0x0370);
		}

		// class AhiWoodFence04_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__hiWoodFence04__hiWoodFence04_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AhiWoodFence04_C, 0x0378);
		}

		// class ULobbyConfirm_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LobbyConfirm__LobbyConfirm_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyConfirm_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyConfirm_C, Image_1, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyConfirm_C, Image_66, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyConfirm_C, SURV_GlobalMenuButton, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyConfirm_C, SURV_GlobalMenuButton_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyConfirm_C, TextBlock_1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyConfirm_C, Yes, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyConfirm_C, No, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULobbyConfirm_C, 0x0250);
		}

		// class ACv2_RadioStation_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv2_RadioStation__Cv2_RadioStation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_RadioStation_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_RadioStation_C, CraftComponent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_RadioStation_C, StaticMesh, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_RadioStation_C, DefaultSceneRoot, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_RadioStation_C, HitPoints, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_RadioStation_C, Side, 0x038C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_RadioStation_C, 0x038D);
		}

		// class AW_Box_02_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__W_Box_02__W_Box_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AW_Box_02_C, 0x0378);
		}

		// class A_SpawnFurnitur_03_C : public ACv3_SpawnLootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass___SpawnFurnitur_03___SpawnFurnitur_03_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_SpawnFurnitur_03_C, 0x0390);
		}

		// class ALamp_3_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Lamp_4__Lamp_3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALamp_3_C, 0x0370);
		}

		// class ASofa_02_older_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Sofa_02_older__Sofa_02_older_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASofa_02_older_C, 0x0370);
		}

		// class AFence_BaseNet_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Fence_BaseNet__Fence_BaseNet_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFence_BaseNet_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFence_BaseNet_C, FenceMesh, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFence_BaseNet_C, isDestroy, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFence_BaseNet_C, UnknownData_6XCL, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFence_BaseNet_C, DestructMesh, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFence_BaseNet_C, HitPoints, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFence_BaseNet_C, Type, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFence_BaseNet_C, UnknownData_PS27, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFence_BaseNet_C, updateClientTimer, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFence_BaseNet_C, isSetHitPoints, 0x0394);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFence_BaseNet_C, 0x0395);
		}

		// class URenderCraftWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__RenderCraftWidget__RenderCraftWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URenderCraftWidget_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::URenderCraftWidget_C, Image_25, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::URenderCraftWidget_C, MouseIsDown, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::URenderCraftWidget_C, UnknownData_63S3, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::URenderCraftWidget_C, RenderCharacter, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::URenderCraftWidget_C, TempMousePositionX, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::URenderCraftWidget_C, UnknownData_C9Q0, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::URenderCraftWidget_C, RenderTextureMaterial, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::URenderCraftWidget_C, IsHonor, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::URenderCraftWidget_C, UnknownData_ECL9, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::URenderCraftWidget_C, HonorRenderActor, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URenderCraftWidget_C, 0x0240);
		}

		// class U_NPC_Death_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass___NPC_Death_AnimBP___NPC_Death_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::U_NPC_Death_AnimBP_C, UnknownData_3ICL, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::U_NPC_Death_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::U_NPC_Death_AnimBP_C, AnimGraphNode_Root_ACE7D07B4A48C39BD0F1E9B6125D6FB9, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::U_NPC_Death_AnimBP_C, AnimGraphNode_SequencePlayer_8ACBE76E40F19F470B182AAA0D2BB983, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::U_NPC_Death_AnimBP_C, 0x0480);
		}

		// class ALightningEpicenter_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__LightningEpicenter__LightningEpicenter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightningEpicenter_C, SM_Dummy, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightningEpicenter_C, DefaultSceneRoot, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightningEpicenter_C, 0x0378);
		}

		// class ACv2_PlayerState_C : public APlayerState
		TEST_METHOD(BlueprintGeneratedClass__Cv2_PlayerState__Cv2_PlayerState_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, UberGraphFrame, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, DefaultSceneRoot, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, PlayerSide, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, UnknownData_SIOH, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Kills, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Deaths, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Scores, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, KillsByLife, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, DestroyPoints, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Rank, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, XP, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Battle_Kills, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Battle_Deaths, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Nation, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, UnknownData_4CFO, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, O2, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Hungry, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Thirsty, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Temperature, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Health, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, HungryUpdateTimer, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, UnknownData_0FAU, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, honor_name_array, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Headshots, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Destroy_Tanks, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Destroy_Cars, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Capture_Tanks, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Capture_Cars, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Capture_Towers, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Woodman, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Craft_Tanks, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Craft_Tent, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Kill_In_Melee, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, VictoriesInBattles, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, proxyInt, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, BeginKills, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, BeginDeaths, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, BeginKillInMelee, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Begin_Destroy_Tanks, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Begin_Destroy_Cars, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Begin_Capture_Tanks, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Begin_Capture_Cars, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Begin_Rank, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Begin_Xp, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Begin_CraftTanks, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Begin_CraftTents, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Begin_CraftCars, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Begin_Capture_Towers, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Begin_Woodman, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, MyHonors, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, BeginHeadshots, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, UnknownData_IVGV, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, MyUniqNetId, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Boost, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, UnknownData_WSXJ, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, BoostTimer, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, HealthCharacter, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, PP_Material, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, proxyGameState, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, SAC_SpeedHack, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, UnknownData_UD2V, 0x0519);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, LobbyID, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, BOT_Kills, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, NPC_Saves, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, OpenSeifCount, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, PostProcess, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, AntiCheatOK, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, UnknownData_1I2Y, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Money, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Surv_coins, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, Ice_coins, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, surv_record, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_PlayerState_C, surv_coins_old, 0x0554);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_PlayerState_C, 0x0558);
		}

		// class USURV_InventoryCRAFTPanel_C : public UZ_InventoryCRAFT_Root_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__SURV_InventoryCRAFTPanel__SURV_InventoryCRAFTPanel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, About, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, About_Image_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, About_Image_3, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, About_Image_4, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, About_Image_5, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, About_text1, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, AboutText2, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, Button_Craft, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, Distance, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, Fon, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, GridPanel_1, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, HeaderCraft, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, NeedResourseVB, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, NocraftFon, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, OverlayNoCraft, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, RenderCraftWidget, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, RootVerticalBox, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, ScrollBox_1, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, SURV_Inventory_CraftResSlot, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, SURV_Inventory_CraftResSlot_1, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, SURV_Inventory_CraftResSlot_2, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, SURV_Inventory_CraftResSlot_3, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, SURV_Inventory_CraftResSlot_4, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, TextBlock_2, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, ClickClose_1, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::USURV_InventoryCRAFTPanel_C, Timer, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USURV_InventoryCRAFTPanel_C, 0x0390);
		}

		// class UInfo_WeaponSlot_C : public UInfoSoltRoot_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Info_WeaponSlot__Info_WeaponSlot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_WeaponSlot_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_WeaponSlot_C, ShowNext, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_WeaponSlot_C, Ammo, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_WeaponSlot_C, Ammo_HorizontalBox, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_WeaponSlot_C, AmmoBackPack, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_WeaponSlot_C, AmmoImage, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_WeaponSlot_C, Border_1, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_WeaponSlot_C, Count, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_WeaponSlot_C, Fon, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_WeaponSlot_C, Ico, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_WeaponSlot_C, InfoWeaponSlider, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_WeaponSlot_C, Key, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_WeaponSlot_C, PreviosIco, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_WeaponSlot_C, ScaleBox_1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_WeaponSlot_C, TopSlot, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_WeaponSlot_C, Timer, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_WeaponSlot_C, NormalColor, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_WeaponSlot_C, SelectColor, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfo_WeaponSlot_C, 0x0310);
		}

		// class AFence_Brick_2_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Fence_Brick_3__Fence_Brick_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFence_Brick_2_C, 0x0378);
		}

		// class UInfo_VehicleInfoBar_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Info_VehicleInfoBar__Info_VehicleInfoBar_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_VehicleInfoBar_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_VehicleInfoBar_C, NoBattery, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_VehicleInfoBar_C, NoFuel, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_VehicleInfoBar_C, Battery, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_VehicleInfoBar_C, BorderBattery, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_VehicleInfoBar_C, BorderFuel, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_VehicleInfoBar_C, fuel, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_VehicleInfoBar_C, NoFuelText, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfo_VehicleInfoBar_C, TextBlock_2, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfo_VehicleInfoBar_C, 0x0248);
		}

		// class AMetalGarage_A_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__MetalGarage_A_Static_BP__MetalGarage_A_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMetalGarage_A_Static_BP_C, 0x0370);
		}

		// class AcontainersCombine_BP_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__containersCombine_BP__containersCombine_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainersCombine_BP_C, MeshesArray, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainersCombine_BP_C, bIsRandomChoice, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainersCombine_BP_C, UnknownData_89YL, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::AcontainersCombine_BP_C, modelID, 0x038C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AcontainersCombine_BP_C, 0x0390);
		}

		// class ACv3_Wolf_AI_Controller_C : public AAIController
		TEST_METHOD(BlueprintGeneratedClass__Cv3_Wolf_AI_Controller__Cv3_Wolf_AI_Controller_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_Wolf_AI_Controller_C, UberGraphFrame, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_Wolf_AI_Controller_C, Wolf, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv3_Wolf_AI_Controller_C, 0x0470);
		}

		// class AMatrass_static_1_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Matrass_static_2__Matrass_static_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatrass_static_1_C, 0x0370);
		}

		// class Agaz_3322_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__gaz_3322__gaz_3322_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agaz_3322_C, 0x0378);
		}

		// class Atube_3_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__tube_4__tube_3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Atube_3_C, 0x0370);
		}

		// class ASand_02_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Sand_02__Sand_02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASand_02_C, 0x0378);
		}

		// class AStove_01older_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Stove_01older_Rig__Stove_01older_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStove_01older_Rig_C, 0x03C2);
		}

		// class UChatServiceString_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ChatServiceString__ChatServiceString_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatServiceString_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatServiceString_C, MessageText, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatServiceString_C, Service, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChatServiceString_C, 0x0218);
		}

		// class ABOT_Creature_NARKOMAN_C : public ABOT_CreatureBase_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Creature_NARKOMAN__BOT_Creature_NARKOMAN_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_Creature_NARKOMAN_C, UnknownData_KNF8, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_Creature_NARKOMAN_C, Helmet, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_Creature_NARKOMAN_C, Weapon, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABOT_Creature_NARKOMAN_C, 0x0578);
		}

		// class Abig_Zavod_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__big_Zavod_BP__big_Zavod_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Abig_Zavod_BP_C, Warehouse_big_alpha1, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::Abig_Zavod_BP_C, Warehouse_big_alpha, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::Abig_Zavod_BP_C, Wb_wall03, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Abig_Zavod_BP_C, 0x0388);
		}

		// class AClothes_03_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Clothes_03__Clothes_03_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AClothes_03_C, 0x0378);
		}

		// class AFence_Brick_3_type_2_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Fence_Brick_3_type_3__Fence_Brick_3_type_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFence_Brick_3_type_2_C, 0x0378);
		}

		// class ABuildings_Base_Surv_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Buildings_Base_Surv__Buildings_Base_Surv_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuildings_Base_Surv_C, StaticMesh, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABuildings_Base_Surv_C, DefaultSceneRoot, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABuildings_Base_Surv_C, 0x0378);
		}

		// class UMessageScoreMessage_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MessageScoreMessage__MessageScoreMessage_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageScoreMessage_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMessageScoreMessage_C, VerticalBox_1, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMessageScoreMessage_C, 0x0210);
		}

		// class ATable_Static_9_Older_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Table_Static_9_Older__Table_Static_9_Older_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATable_Static_9_Older_C, 0x0370);
		}

		// class UTOD_BloodyMidnight_C : public UTimeOfDayPreset_C
		TEST_METHOD(BlueprintGeneratedClass__TOD_BloodyMidnight__TOD_BloodyMidnight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTOD_BloodyMidnight_C, 0x00CC);
		}

		// class AKPP_01_miha_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__KPP_01_miha__KPP_01_miha_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AKPP_01_miha_C, StaticMesh3, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKPP_01_miha_C, StaticMesh2, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKPP_01_miha_C, _CraftDoor_Frame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKPP_01_miha_C, Radio_05, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKPP_01_miha_C, chair9, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKPP_01_miha_C, ChildActor, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKPP_01_miha_C, _SpawnFurnitur_01, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKPP_01_miha_C, _SpawnFurnitur_09, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKPP_01_miha_C, _SpawnFurnitur_04, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKPP_01_miha_C, Table_01, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKPP_01_miha_C, StaticMesh1, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKPP_01_miha_C, lamp16, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKPP_01_miha_C, 0x03D8);
		}

		// class UMineDamageType_C : public UDamageType
		TEST_METHOD(BlueprintGeneratedClass__MineDamageType__MineDamageType_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMineDamageType_C, 0x0040);
		}

		// class ASkhaf_2_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Skhaf_3__Skhaf_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkhaf_2_C, 0x0370);
		}

		// class Azil_130_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__zil_131__zil_130_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Azil_130_C, 0x0378);
		}

		// class AMattress_04_Military_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Mattress_04_Military__Mattress_04_Military_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMattress_04_Military_C, 0x0370);
		}

		// class UAdvancedSteamFriendsLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AdvancedSteamSessions__AdvancedSteamFriendsLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdvancedSteamFriendsLibrary, 0x0028);
		}

		// class UAdvancedSteamWorkshopLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AdvancedSteamSessions__AdvancedSteamWorkshopLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdvancedSteamWorkshopLibrary, 0x0028);
		}

		// class USteamRequestGroupOfficersCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSteamSessions__SteamRequestGroupOfficersCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamRequestGroupOfficersCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamRequestGroupOfficersCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamRequestGroupOfficersCallbackProxy, UnknownData_J044, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamRequestGroupOfficersCallbackProxy, 0x0098);
		}

		// class USteamWSRequestUGCDetailsCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__AdvancedSteamSessions__SteamWSRequestUGCDetailsCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamWSRequestUGCDetailsCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamWSRequestUGCDetailsCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamWSRequestUGCDetailsCallbackProxy, UnknownData_DHZH, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamWSRequestUGCDetailsCallbackProxy, 0x0080);
		}

		// class ACv2_AirPlaneBase_AirDrop_C : public ACv2_AirPlaneBase_C
		TEST_METHOD(BlueprintGeneratedClass__Cv2_AirPlaneBase_AirDrop__Cv2_AirPlaneBase_AirDrop_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_AirPlaneBase_AirDrop_C, 0x03E1);
		}

		// class AWoodPoddon_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WoodPoddon__WoodPoddon_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWoodPoddon_C, 0x0370);
		}

		// class UPointer_Root_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Pointer_Root__Pointer_Root_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_Root_C, ROOT_ActorLocation, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_Root_C, ROOT_ActorSide, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_Root_C, UnknownData_6GUW, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_Root_C, ROOT_Actor, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_Root_C, ROOTPosition, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointer_Root_C, ROOT_PointerClass, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointer_Root_C, 0x0221);
		}

		// class ACammo_01_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Cammo_01__Cammo_01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACammo_01_C, StaticMesh2, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACammo_01_C, StaticMesh1, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACammo_01_C, nastil, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACammo_01_C, 0x0390);
		}

		// class ASurv_Car_Uaz469_Military_C : public ACv2_BaseCar_4W_C
		TEST_METHOD(BlueprintGeneratedClass__Surv_Car_Uaz469_Military__Surv_Car_Uaz469_Military_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurv_Car_Uaz469_Military_C, 0x0940);
		}

		// class UFurniture2_02_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture2_02_AnimBP__Furniture2_02_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_02_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_02_AnimBP_C, AnimGraphNode_Root_169E4AF5411B022D97BBAFB66555A60F, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_02_AnimBP_C, AnimGraphNode_LocalRefPose_7943A7C94AF697CE0B4750961EB3E226, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_02_AnimBP_C, AnimGraphNode_BlendListByBool_50F65B4A4F707827E25DAF86E82C3164, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_02_AnimBP_C, AnimGraphNode_SequencePlayer_45DEFF22447950CE689DBABDFE1E3E8D, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture2_02_AnimBP_C, 0x0588);
		}

		// class UFurniture_12_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture_12_AnimBP__Furniture_12_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_12_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_12_AnimBP_C, AnimGraphNode_Root_F2FDA1544700BC637C3BAA9C376155A9, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_12_AnimBP_C, AnimGraphNode_LocalRefPose_BE47A9A54F536FA3D47EE59CC6396C5A, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_12_AnimBP_C, AnimGraphNode_BlendListByBool_C46CAC2E49068E4B0F68A98ABDA49C0A, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_12_AnimBP_C, AnimGraphNode_SequencePlayer_23707D8041AE1C2A5621339BF158DEED, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture_12_AnimBP_C, 0x0588);
		}

		// class AIE_Warehouse_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__IE_Warehouse_Static_BP__IE_Warehouse_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIE_Warehouse_Static_BP_C, 0x0370);
		}

		// class Atube_4_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__tube_5__tube_4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Atube_4_C, 0x0370);
		}

		// class UCv2_CameraShake_Steps_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__Cv2_CameraShake_Steps__Cv2_CameraShake_Steps_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCv2_CameraShake_Steps_C, 0x0160);
		}

		// class UFurniture_19_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture_19_AnimBP__Furniture_19_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_19_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_19_AnimBP_C, AnimGraphNode_Root_3E3FBE974FBDA6571BEDF181F39279F1, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_19_AnimBP_C, AnimGraphNode_LocalRefPose_682DA6D1491E3657BC8C2789759CB793, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_19_AnimBP_C, AnimGraphNode_BlendListByBool_6D152FE24DAFED360711F59CF5BB33B0, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_19_AnimBP_C, AnimGraphNode_SequencePlayer_2CD2D28D4B36B323BC61768E6A19830C, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture_19_AnimBP_C, 0x0588);
		}

		// class ACave_Rock_Flat_Prefab_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Cave_Rock_Flat_Prefab__Cave_Rock_Flat_Prefab_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACave_Rock_Flat_Prefab_C, 0x0370);
		}

		// class ACurbstone_02Broken_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Curbstone_02Broken__Curbstone_02Broken_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACurbstone_02Broken_C, 0x0378);
		}

		// class ABarrel_2_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__barrel_3__Barrel_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABarrel_2_C, 0x0378);
		}

		// class UFurniture_21_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture_21_AnimBP__Furniture_21_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_21_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_21_AnimBP_C, AnimGraphNode_Root_9617FB20491C243873D08995E91D1E91, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_21_AnimBP_C, AnimGraphNode_LocalRefPose_20FA1C2A4FF7498C204C3591E100C436, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_21_AnimBP_C, AnimGraphNode_BlendListByBool_1E5D01454B9942D7428863A7AEDB1D2C, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_21_AnimBP_C, AnimGraphNode_SequencePlayer_9E6EC3DD4BD3ECFAFE3FCDB73099AC16, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture_21_AnimBP_C, 0x0588);
		}

		// class ABlind_4_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Blind_5__Blind_4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlind_4_C, 0x0370);
		}

		// class UCv4_EffectData_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__Cv4_EffectData__Cv4_EffectData_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCv4_EffectData_C, 0x0028);
		}

		// class ACraneTower_BP_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__CraneTower_BP__CraneTower_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraneTower_BP_C, Box2, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraneTower_BP_C, Box1, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraneTower_BP_C, Box, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACraneTower_BP_C, Ladder_BP1, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACraneTower_BP_C, 0x0398);
		}

		// class ACliff3_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Cliff3__Cliff3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACliff3_C, 0x0370);
		}

		// class AWarehouse_brick_alpha_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Warehouse_brick_alpha__Warehouse_brick_alpha_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWarehouse_brick_alpha_C, WINDOWS, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWarehouse_brick_alpha_C, 0x0378);
		}

		// class ABuilding_10_1_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Building_10_2__Building_10_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABuilding_10_1_C, 0x0378);
		}

		// class ASurv_Car_GAZ_3321_C : public ACv2_BaseCar_4W_C
		TEST_METHOD(BlueprintGeneratedClass__Surv_Car_GAZ_3321__Surv_Car_GAZ_3321_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurv_Car_GAZ_3321_C, 0x0940);
		}

		// class UCv3_LootLibrary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__Cv3_LootLibrary__Cv3_LootLibrary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCv3_LootLibrary_C, 0x0028);
		}

		// class UKA26_Front_C : public UVehicleWheel
		TEST_METHOD(BlueprintGeneratedClass__KA26_Front__KA26_Front_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKA26_Front_C, 0x00F0);
		}

		// class UCompasMarkerWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CompasMarkerWidget__CompasMarkerWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompasMarkerWidget_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompasMarkerWidget_C, Image_1, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompasMarkerWidget_C, TextBlock_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompasMarkerWidget_C, ActorVar, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompasMarkerWidget_C, Timer, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompasMarkerWidget_C, Location, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompasMarkerWidget_C, ShowDistance, 0x0234);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompasMarkerWidget_C, 0x0235);
		}

		// class Atube_1_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__tube_2__tube_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Atube_1_C, 0x0370);
		}

		// class APanel_House_5Floor_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Panel_House_5Floor__Panel_House_5Floor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APanel_House_5Floor_C, ChildActor1, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APanel_House_5Floor_C, IE_DoorB_Static, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APanel_House_5Floor_C, Ladder_BP1, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::APanel_House_5Floor_C, ChildActor, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APanel_House_5Floor_C, Panel_House_02_panel_house_walls_5_storey, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::APanel_House_5Floor_C, Panel_House_02_Object, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APanel_House_5Floor_C, 0x03A8);
		}

		// class Abuilding_B_static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__building_B_static_BP__building_B_static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Abuilding_B_static_BP_C, 0x0370);
		}

		// class ACv2_TentSaveGame_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv2_TentSaveGame__Cv2_TentSaveGame_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TentSaveGame_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TentSaveGame_C, Z_InventoryComponent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TentSaveGame_C, PalatkaMesh, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TentSaveGame_C, Scene, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TentSaveGame_C, HitPoints, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TentSaveGame_C, isDestroy, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TentSaveGame_C, UnknownData_W0VK, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TentSaveGame_C, OwnerID, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TentSaveGame_C, Side, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_TentSaveGame_C, 0x03A1);
		}

		// class ASet_of_Boxes_06_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Set_of_Boxes_06__Set_of_Boxes_06_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASet_of_Boxes_06_C, 0x03C2);
		}

		// class UJsonUtilitiesDummyObject : public UObject
		TEST_METHOD(Class__JsonUtilities__JsonUtilitiesDummyObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJsonUtilitiesDummyObject, 0x0028);
		}

		// class ACv2_RocketActor_Shell_150mm_Fugas_C : public ACv2_RocketActor_C
		TEST_METHOD(BlueprintGeneratedClass__Cv2_RocketActor_Shell_150mm_Fugas__Cv2_RocketActor_Shell_150mm_Fugas_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_RocketActor_Shell_150mm_Fugas_C, 0x04B8);
		}

		// class ARedBuild_2_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__RedBuild_3__RedBuild_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARedBuild_2_C, 0x0370);
		}

		// class ASofa_03_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Sofa_03__Sofa_03_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASofa_03_C, 0x0370);
		}

		// class A_SpawnFurnitur_07_C : public ACv3_SpawnLootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass___SpawnFurnitur_07___SpawnFurnitur_07_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_SpawnFurnitur_07_C, 0x0390);
		}

		// class UAudioMixerBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AudioMixer__AudioMixerBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioMixerBlueprintLibrary, 0x0028);
		}

		// class USubmixEffectDynamicsProcessorPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectDynamicsProcessorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, UnknownData_V2OW, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, Settings, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDynamicsProcessorPreset, 0x00B8);
		}

		// class USubmixEffectSubmixEQPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectSubmixEQPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, UnknownData_L0AG, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectSubmixEQPreset, 0x0088);
		}

		// class USubmixEffectReverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectReverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, UnknownData_OO44, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, Settings, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectReverbPreset, 0x00C8);
		}

		// class USynthSound : public USoundWaveProcedural
		TEST_METHOD(Class__AudioMixer__SynthSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, UnknownData_B9CM, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSound, 0x0340);
		}

		// class USynthComponent : public USceneComponent
		TEST_METHOD(Class__AudioMixer__SynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_C671, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationSettings, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationOverrides, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySettings, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundClass, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SourceEffectChain, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmix, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmixSends, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_69QJ, 0x0591);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, Synth, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AudioComponent, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_3ZFF, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponent, 0x05D0);
		}

		// class Acabinet30_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__cabinet30__cabinet30_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Acabinet30_C, 0x0370);
		}

		// class Ahutor_static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__hutor_static_BP__hutor_static_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ahutor_static_BP_C, decal, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ahutor_static_BP_C, inside, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ahutor_static_BP_C, 0x0380);
		}

		// class USurv_Car_GAZ_3321_AnimBP_C : public UVehicleAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Surv_Car_GAZ_3321_AnimBP__Surv_Car_GAZ_3321_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_GAZ_3321_AnimBP_C, UberGraphFrame, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_GAZ_3321_AnimBP_C, AnimGraphNode_Root_930400F343B2A08E197F5BB06F7874A4, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_GAZ_3321_AnimBP_C, AnimGraphNode_WheelHandler_7BBEF8E145926F79A9940599EF6A2123, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_GAZ_3321_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_586D101B475D01CA1BE114BAA3A91F3D, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Car_GAZ_3321_AnimBP_C, AnimGraphNode_MeshRefPose_AB97D30C41F7F5A898AE85A405F2D02F, 0x09D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurv_Car_GAZ_3321_AnimBP_C, 0x0A00);
		}

		// class AContainerD_Static_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__ContainerD_Static__ContainerD_Static_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AContainerD_Static_C, 0x0370);
		}

		// class UM412_Front_C : public UVehicleWheel
		TEST_METHOD(BlueprintGeneratedClass__M412_Front__M412_Front_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UM412_Front_C, 0x00F0);
		}

		// class UConditionIcon_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ConditionIcon__ConditionIcon_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConditionIcon_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConditionIcon_C, Blink, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConditionIcon_C, Icon, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConditionIcon_C, Type, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConditionIcon_C, UnknownData_S5C8, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConditionIcon_C, Var, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConditionIcon_C, Timer, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConditionIcon_C, SetWhiteStyle, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConditionIcon_C, 0x0229);
		}

		// class UCv2_HintActionWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Cv2_HintActionWidget__Cv2_HintActionWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_HintActionWidget_C, TextBlock_1, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_HintActionWidget_C, Text, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCv2_HintActionWidget_C, 0x0220);
		}

		// class UVoiceAudioComponent : public UAudioComponent
		TEST_METHOD(Class__OctagonVoiceChat__VoiceAudioComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceAudioComponent, UnknownData_0TMV, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceAudioComponent, VoiceDecoder, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceAudioComponent, UnknownData_HNW9, 0x0700);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceAudioComponent, 0x0710);
		}

		// class UVoiceChatComponent : public UActorComponent
		TEST_METHOD(Class__OctagonVoiceChat__VoiceChatComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChatComponent, VoiceDataAvailableEvent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChatComponent, StartedTalkingEvent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChatComponent, StoppedTalkingEvent, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChatComponent, StopTalkingTimeThreshold, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChatComponent, UnknownData_WV4K, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceChatComponent, 0x0190);
		}

		// class UVoiceDecoder : public UObject
		TEST_METHOD(Class__OctagonVoiceChat__VoiceDecoder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceDecoder, UnknownData_Z3AQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceDecoder, 0x0038);
		}

		// class AClock_static_2_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Clock_static_3__Clock_static_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AClock_static_2_C, 0x0370);
		}

		// class ASofa_01_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Sofa_01__Sofa_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASofa_01_C, 0x0370);
		}

		// class UMoviePlayerSettings : public UObject
		TEST_METHOD(Class__MoviePlayer__MoviePlayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bWaitForMoviesToComplete, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bMoviesAreSkippable, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, UnknownData_2IYY, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, StartupMovies, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoviePlayerSettings, 0x0040);
		}

		// class UVampireDeathAnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__VampireDeathAnimBP__VampireDeathAnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVampireDeathAnimBP_C, UnknownData_ZZUQ, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVampireDeathAnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVampireDeathAnimBP_C, AnimGraphNode_Root_D9A309374AEE775D8B1DB5B04A345814, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVampireDeathAnimBP_C, AnimGraphNode_SequencePlayer_C1C73C8F4B45F697D0B769A583FBE9B6, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVampireDeathAnimBP_C, 0x0480);
		}

		// class AIE_Shelf_3_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__IE_Shelf_4__IE_Shelf_3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIE_Shelf_3_C, 0x0370);
		}

		// class UBanWidgetBase_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BanWidgetBase__BanWidgetBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBanWidgetBase_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBanWidgetBase_C, Image_1, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBanWidgetBase_C, Image_2, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBanWidgetBase_C, TextBlock_4, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBanWidgetBase_C, Time, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBanWidgetBase_C, UnknownData_P6R3, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBanWidgetBase_C, NewVar_1, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBanWidgetBase_C, 0x0230);
		}

		// class A_Rural_house_22_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass___Rural_house_23___Rural_house_22_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, _CraftDoor_Frame, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Door_06_Frame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Door_05_Frame, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Door_04_Frame, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Socket_08, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Socket_07, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Socket_05, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Window_02, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Window_big, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Window_05, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Socket_06, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, StaticMesh17, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, StaticMesh16, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, StaticMesh15, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, StaticMesh14, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, StaticMesh13, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, StaticMesh12, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, StaticMesh11, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, StaticMesh10, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, StaticMesh9, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, StaticMesh7, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, StaticMesh6, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, StaticMesh4, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, StaticMesh2, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Chimney_Metal_Detail, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Glass_01, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, big_glass, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, StaticMesh8, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Window_04, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, StaticMesh3, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Window_03, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, StaticMesh1, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Windows_01, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Socket_04, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Door_02_Door_02_details, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Door_02_Door_02, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Door_02_Frame, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Door_06_Door_06_Details, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Door_06_Door_06, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Door_03_Frame, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Fireplace_01, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Socket_03, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Socket_02, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Socket_01, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Electrical_Socket_02, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Electrical_Box_01, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Chimney_02, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Foundation_01, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Porch_01_Porch_01, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Peak_01, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Roof_11, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_22_C, Attic_01, 0x0510);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_Rural_house_22_C, 0x0518);
		}

		// class UMenu_MainMenu_ServerList_String_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Menu_MainMenu_ServerList_String__Menu_MainMenu_ServerList_String_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerList_String_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerList_String_C, Button_1, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerList_String_C, GameModeText, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerList_String_C, GameTime, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerList_String_C, Image_1, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerList_String_C, Image_2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerList_String_C, MapIcon, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerList_String_C, MapName, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerList_String_C, name_Icon, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerList_String_C, Ping_Icon, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerList_String_C, Players_icon, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerList_String_C, PlayersInServer, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerList_String_C, ServerName, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerList_String_C, ServerPing, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerList_String_C, Time_Icon, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerList_String_C, IsHeader, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerList_String_C, UnknownData_AVZ1, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_MainMenu_ServerList_String_C, Session, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenu_MainMenu_ServerList_String_C, 0x0338);
		}

		// class ACv2_BulletTracer_Ardennes_Red_C : public ACv2_BulletTracer_C
		TEST_METHOD(BlueprintGeneratedClass__Cv2_BulletTracer_Ardennes_Red__Cv2_BulletTracer_Ardennes_Red_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_BulletTracer_Ardennes_Red_C, 0x0380);
		}

		// class ACv2_TurrelBase_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__Cv2_TurrelBase__Cv2_TurrelBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, UberGraphFrame, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, SoldierMesh, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, ammo_closed, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, VoiceChat, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, VoiceAudio, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, Z_InventoryComponent, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, Cv2_OpticComponent, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, Cv2_DestroyComponent, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, TurrelMesh, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, Scene, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, Capsule, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, Cv2_VehicleComponent, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, HelmetMesh, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, Cv2_WeaponsComponent, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, GunFPSMesh, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, GunMesh, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, Kostil, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, Camera, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, SpringArm, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, TurretBase, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, TurretGun, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, NetTurretBase, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, NetTurretGun, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, IsAim, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, UnknownData_B2R4, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, WeaponStructure, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, WeaponEnum, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, UnknownData_W1QS, 0x06C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, FireRate, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, TurrelEnum, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, UnknownData_MMXN, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, TurrelStructure, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, isFire, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, isFireNet, 0x0721);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, UnknownData_548Y, 0x0722);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, Crews, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, isDead, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, UnknownData_QTJ5, 0x0739);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, HitPoints, 0x073C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, VehicleEnum, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, UnknownData_XARA, 0x0741);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, VehicleStructure, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, IsOpen, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, UnknownData_RPPB, 0x0839);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, bulletFireCount, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, CameraFollowProjectile, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, UnknownData_3R9P, 0x0841);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, DynamicProjectile, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, isZoomCamera, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, PushToTalk, 0x0851);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, RotateWheels, 0x0852);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, NetRotateWheels, 0x0853);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, proxyGunRotation, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, NetGunRotation, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_TurrelBase_C, isKazenniy, 0x085C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_TurrelBase_C, 0x085D);
		}

		// class USurv_G36_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Surv_G36_AnimBP__Surv_G36_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_G36_AnimBP_C, UnknownData_YGJ5, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_G36_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_G36_AnimBP_C, AnimGraphNode_Root_41AB73B14CE0E35473E1C7B8C93117D9, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_G36_AnimBP_C, AnimGraphNode_Slot_1B909AE0427EE5AC64377DBB66446C21, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_G36_AnimBP_C, AnimGraphNode_SequencePlayer_05012EE84C43DD6BF9F90A95672CF2B5, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurv_G36_AnimBP_C, 0x04E8);
		}

		// class UFurniture2_16_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture2_16_AnimBP__Furniture2_16_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_16_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_16_AnimBP_C, AnimGraphNode_Root_E25566764B89F8EE6AB7A9AD98688840, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_16_AnimBP_C, AnimGraphNode_LocalRefPose_E3012B584B9B8D0663D8D49E460943A6, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_16_AnimBP_C, AnimGraphNode_BlendListByBool_9207BF854CE911AF877ACCA479F83498, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_16_AnimBP_C, AnimGraphNode_SequencePlayer_992F11534A5EA7B08E7228BDAEE35927, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture2_16_AnimBP_C, 0x0588);
		}

		// class ADataBaseActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__DataBaseActor__DataBaseActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADataBaseActor_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADataBaseActor_C, Z_InventoryComponent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADataBaseActor_C, DefaultSceneRoot, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADataBaseActor_C, PlayerController, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADataBaseActor_C, SlotCount, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADataBaseActor_C, 0x038C);
		}

		// class ABT_CameraPawn_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__BT_CameraPawn__BT_CameraPawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABT_CameraPawn_C, UberGraphFrame, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABT_CameraPawn_C, Camera, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABT_CameraPawn_C, SpringArm, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABT_CameraPawn_C, DefaultSceneRoot, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABT_CameraPawn_C, Speed, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABT_CameraPawn_C, UnknownData_6GCG, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABT_CameraPawn_C, Player, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABT_CameraPawn_C, RotateAlways, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABT_CameraPawn_C, RotateUpDown, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABT_CameraPawn_C, Roll, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABT_CameraPawn_C, IsRoll, 0x0404);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABT_CameraPawn_C, 0x0405);
		}

		// class UInfoSoltRoot_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InfoSoltRoot__InfoSoltRoot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoSoltRoot_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoSoltRoot_C, Icon_Material_Root, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoSoltRoot_C, SlotTypeRoot, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoSoltRoot_C, UnknownData_Q9YD, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoSoltRoot_C, RootCount, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoSoltRoot_C, RootLootIndex, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoSoltRoot_C, Root_IsCountable, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoSoltRoot_C, CountableType, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoSoltRoot_C, UnknownData_EJ87, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoSoltRoot_C, PreviosIcon_Material_Root, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoSoltRoot_C, Root_Loot, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoSoltRoot_C, RootAction, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoSoltRoot_C, UnknownData_N60I, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoSoltRoot_C, RootKeyText_IfMoveForward, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoSoltRoot_C, RootZ_EquipType, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoSoltRoot_C, UnknownData_M0ER, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfoSoltRoot_C, RootZ_Loot, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfoSoltRoot_C, 0x0270);
		}

		// class AFenceB_WireStolb_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FenceB_WireStolb_Static_BP__FenceB_WireStolb_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFenceB_WireStolb_Static_BP_C, 0x0370);
		}

		// class AWeaponBox2_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__WeaponBox2_Rig__WeaponBox2_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeaponBox2_Rig_C, 0x03C2);
		}

		// class ACv4_Generator_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv4_Generator__Cv4_Generator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Generator_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Generator_C, Audio, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Generator_C, StaticMesh, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Generator_C, DefaultSceneRoot, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Generator_C, fuel, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Generator_C, isEnergyOn, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Generator_C, UnknownData_850Y, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Generator_C, Lights, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Generator_C, Elevator, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Generator_C, BunkerID, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv4_Generator_C, 0x03AC);
		}

		// class AHiWood_Fence_Static_BP_1_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__HiWood_Fence_Static_BP_2__HiWood_Fence_Static_BP_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHiWood_Fence_Static_BP_1_C, 0x0370);
		}

		// class UFurniture2_17_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture2_17_AnimBP__Furniture2_17_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_17_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_17_AnimBP_C, AnimGraphNode_Root_DB767BBC40F6F3DBF0F16B8A889BBEB1, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_17_AnimBP_C, AnimGraphNode_LocalRefPose_868687524FF92BD8167CEE8025A3EC21, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_17_AnimBP_C, AnimGraphNode_BlendListByBool_41A1FDF44B48B88E70A78F9253476E71, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture2_17_AnimBP_C, AnimGraphNode_SequencePlayer_518B916B4A8448510A1B4782A063C7E4, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture2_17_AnimBP_C, 0x0588);
		}

		// class AFences_06_x3_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Fences_06_x3__Fences_06_x3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFences_06_x3_C, StaticMesh2, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFences_06_x3_C, StaticMesh1, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFences_06_x3_C, 0x0388);
		}

		// class ACv3_Hovel_C : public ACv3_FireCamp_C
		TEST_METHOD(BlueprintGeneratedClass__Cv3_Hovel__Cv3_Hovel_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv3_Hovel_C, UberGraphFrame, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv3_Hovel_C, 0x03F0);
		}

		// class Afridge3_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__fridge3__fridge3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Afridge3_C, 0x0370);
		}

		// class UFurniture3_12_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture3_12_AnimBP__Furniture3_12_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture3_12_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture3_12_AnimBP_C, AnimGraphNode_Root_7C7283B549D89CB02BD828AB78F8D606, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture3_12_AnimBP_C, AnimGraphNode_LocalRefPose_159FFE0E4C192A2F007A8598B420B9E5, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture3_12_AnimBP_C, AnimGraphNode_BlendListByBool_7DD724AE4884C08FBA9677A9FB3A627E, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture3_12_AnimBP_C, AnimGraphNode_SequencePlayer_F1DE7F37420ED8B1B60A369C845DCE9C, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture3_12_AnimBP_C, 0x0588);
		}

		// class AabandonedPlayground_Object_18_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__abandonedPlayground_Object_19__abandonedPlayground_Object_18_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AabandonedPlayground_Object_18_C, 0x0378);
		}

		// class USurv_Top_String_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Surv_Top_String__Surv_Top_String_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Top_String_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Top_String_C, Image_32, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Top_String_C, Number, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Top_String_C, Top1_Icon, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Top_String_C, Top1Name, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Top_String_C, Top1Score, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Top_String_C, TopIconBack, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Top_String_C, Bronze, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Top_String_C, Silver, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurv_Top_String_C, Gold, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurv_Top_String_C, 0x0268);
		}

		// class UMenu_KeyboardString_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Menu_KeyboardString__Menu_KeyboardString_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_KeyboardString_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_KeyboardString_C, Fon, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_KeyboardString_C, InputKeySelector_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_KeyboardString_C, Name, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_KeyboardString_C, KeyVar, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_KeyboardString_C, IsAxis, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_KeyboardString_C, UnknownData_VU7G, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_KeyboardString_C, AxisVar, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_KeyboardString_C, Action, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenu_KeyboardString_C, 0x0279);
		}

		// class UHelmetsCorrectLibrary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__HelmetsCorrectLibrary__HelmetsCorrectLibrary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHelmetsCorrectLibrary_C, 0x0028);
		}

		// class UFurniture_01_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Furniture_01_AnimBP__Furniture_01_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_01_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_01_AnimBP_C, AnimGraphNode_Root_612E5B10465DE599513F6BB0FECE7883, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_01_AnimBP_C, AnimGraphNode_LocalRefPose_F7A7F91F47920E72335DF1A7469D297F, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_01_AnimBP_C, AnimGraphNode_BlendListByBool_7ED316F24E3EE113AD0E158CF0EFE660, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurniture_01_AnimBP_C, AnimGraphNode_SequencePlayer_677C881842F937B44BDF528291737215, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurniture_01_AnimBP_C, 0x0588);
		}

		// class ASofa_03_older_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Sofa_03_older__Sofa_03_older_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASofa_03_older_C, 0x0370);
		}

		// class UMenu_InGame_MainMenu_C : public UMenu_InGame_Panel_ROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Menu_InGame_MainMenu__Menu_InGame_MainMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_MainMenu_C, UnknownData_U2J8, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_MainMenu_C, UberGraphFrame, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_MainMenu_C, Exit, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_MainMenu_C, Menu_Item, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_MainMenu_C, Menu_Item_2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_MainMenu_C, Options, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_MainMenu_C, Return, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenu_InGame_MainMenu_C, Parent, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenu_InGame_MainMenu_C, 0x0250);
		}

		// class AChair_Static_9_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Chair_Static_10__Chair_Static_9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChair_Static_9_C, 0x0370);
		}

		// class UInventory_DND_Operation_C : public UDragDropOperation
		TEST_METHOD(BlueprintGeneratedClass__Inventory_DND_Operation__Inventory_DND_Operation_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_DND_Operation_C, UberGraphFrame, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventory_DND_Operation_C, 0x0090);
		}

		// class UPhoneMainWB_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PhoneMainWB__PhoneMainWB_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhoneMainWB_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhoneMainWB_C, ButtonFire, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhoneMainWB_C, ButtonReload, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhoneMainWB_C, PlayerCharacter, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhoneMainWB_C, 0x0220);
		}

		// class AWoodFence_break_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WoodFence_break__WoodFence_break_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWoodFence_break_C, 0x0370);
		}

		// class Agarbage4_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__garbage4__garbage4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agarbage4_C, 0x0370);
		}

		// class AKazarma_01_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Kazarma_01__Kazarma_01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh110, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh109, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh108, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh107, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh106, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh105, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh104, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh103, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh102, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh101, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh100, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh99, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh98, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh97, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, Lamp_01, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh96, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh95, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh94, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh93, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh92, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh91, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh90, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh89, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh88, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh6, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh87, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh86, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh85, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh84, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh83, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh82, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh81, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh76, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh80, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh79, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh78, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh77, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh75, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh74, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh73, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh72, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh71, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh70, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh69, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh68, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh67, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh66, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh65, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh61, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh60, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh59, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh58, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh57, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh56, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh55, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh54, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh53, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh46, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh45, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh44, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh43, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh33, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh32, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh31, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh27, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh26, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh25, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh21, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh20, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh19, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh15, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, StaticMesh12, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, Box1, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, Box, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, Plane2, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, Plane, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AKazarma_01_C, Ladder_BP1, 0x05D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKazarma_01_C, 0x05E0);
		}

		// class ACv2_DeadLootBox_C : public ACv2_AirDropBox_C
		TEST_METHOD(BlueprintGeneratedClass__Cv2_DeadLootBox__Cv2_DeadLootBox_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_DeadLootBox_C, UnknownData_PUBW, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_DeadLootBox_C, UberGraphFrame, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_DeadLootBox_C, Box, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_DeadLootBox_C, 0x03C8);
		}

		// class A_Rural_house_02_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass___Rural_house_02___Rural_house_02_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, _CraftDoor_Frame, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, StaticMesh17, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, StaticMesh13, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, StaticMesh6, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, StaticMesh14, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, StaticMesh11, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, StaticMesh9, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, StaticMesh7, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, Chimney_Metal_Detail, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, StaticMesh16, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, StaticMesh15, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, StaticMesh12, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, StaticMesh10, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, StaticMesh8, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, StaticMesh5, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, StaticMesh4, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, StaticMesh3, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, StaticMesh2, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, StaticMesh1, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, Windows_02_2_Windows_02_3, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, Socket_04, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, Door_02_Door_02_details, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, Door_02_Door_02, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, Door_02_Door_02_Frame, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, Door_06_Door_06_Details, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, Door_06_Door_06, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, Door_06_Door_06_Frame, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, Fireplace_01, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, Socket_03, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, Socket_02, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, Socket_01, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, Electrical_Socket_02, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, Electrical_Box_01, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, Chimney_02, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, Foundation_01, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, Porch_01_Porch_01, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, Peak_01, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, Roof_11, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::A_Rural_house_02_C, Attic_01, 0x04A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_Rural_house_02_C, 0x04B0);
		}

		// class UAfterDeadGUI_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__AfterDeadGUI__AfterDeadGUI_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAfterDeadGUI_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAfterDeadGUI_C, Border_2, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAfterDeadGUI_C, ButtonText, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAfterDeadGUI_C, Image_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAfterDeadGUI_C, Image_2, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAfterDeadGUI_C, Play, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAfterDeadGUI_C, ProgressBar_1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAfterDeadGUI_C, survcoins, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAfterDeadGUI_C, survrecord, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAfterDeadGUI_C, RespawnText, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAfterDeadGUI_C, ReadyText, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAfterDeadGUI_C, CurrentTime, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAfterDeadGUI_C, UnknownData_0SXF, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAfterDeadGUI_C, TimerVar, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAfterDeadGUI_C, DefaultTime, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAfterDeadGUI_C, UnknownData_UYCJ, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAfterDeadGUI_C, PressToRespawn, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAfterDeadGUI_C, ready, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAfterDeadGUI_C, 0x02A9);
		}

		// class ASet_of_Boxes_03_3_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Set_of_Boxes_03_4__Set_of_Boxes_03_3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASet_of_Boxes_03_3_C, 0x03C2);
		}

		// class ATable_Static_7_Older_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Table_Static_7_Older__Table_Static_7_Older_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATable_Static_7_Older_C, 0x0370);
		}

		// class AIE_stairs_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__IE_stairs__IE_stairs_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIE_stairs_C, 0x0370);
		}

		// class UInfernalDog_Skeleton_AnimBlueprint_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__InfernalDog_Skeleton_AnimBlueprint__InfernalDog_Skeleton_AnimBlueprint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfernalDog_Skeleton_AnimBlueprint_C, UnknownData_E2EF, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfernalDog_Skeleton_AnimBlueprint_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfernalDog_Skeleton_AnimBlueprint_C, AnimGraphNode_Root_42388B8F4D7890E3BE0FDCAF59025280, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfernalDog_Skeleton_AnimBlueprint_C, AnimGraphNode_Slot_5E37320347DE5A33D9A08B8DF13FD016, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfernalDog_Skeleton_AnimBlueprint_C, AnimGraphNode_BlendSpacePlayer_4C03BB4A40F380CA6188B6A8D1FF7E38, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfernalDog_Skeleton_AnimBlueprint_C, Speed, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfernalDog_Skeleton_AnimBlueprint_C, UnknownData_LU3R, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfernalDog_Skeleton_AnimBlueprint_C, Creature, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfernalDog_Skeleton_AnimBlueprint_C, 0x05B0);
		}

		// class ATable_Static_2_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Table_Static_3__Table_Static_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATable_Static_2_C, 0x0370);
		}

		// class U_NPC_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass___NPC_AnimBP___NPC_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::U_NPC_AnimBP_C, UnknownData_FZWL, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::U_NPC_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::U_NPC_AnimBP_C, AnimGraphNode_Root_0858BAD84AE1EB2605DE07A4AEE3AE7B, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::U_NPC_AnimBP_C, AnimGraphNode_BlendSpacePlayer_2C6A87244F512FE3EFC809BE26C05977, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::U_NPC_AnimBP_C, AnimGraphNode_Slot_050513BF4F6D4E66AC858095209004F8, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::U_NPC_AnimBP_C, Speed, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::U_NPC_AnimBP_C, UnknownData_UDNY, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::U_NPC_AnimBP_C, Creature, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::U_NPC_AnimBP_C, 0x05B0);
		}

		// class UGameOverHonor_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GameOverHonor__GameOverHonor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverHonor_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverHonor_C, Show, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverHonor_C, Image_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverHonor_C, Honor, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameOverHonor_C, 0x0219);
		}

		// class Agarbage5_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__garbage5__garbage5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agarbage5_C, 0x0370);
		}

		// class AFurniture_Bed_Static_01_old_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture_Bed_Static_01_old__Furniture_Bed_Static_01_old_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture_Bed_Static_01_old_C, 0x0370);
		}

		// class AShowers_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Showers__Showers_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShowers_C, 0x0378);
		}

		// class UGameOverWidgetBASE_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GameOverWidgetBASE__GameOverWidgetBASE_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, ShowMyRank, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, ShowRanks, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, ShowRewards, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, ShowTime, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, Rank_Down, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, Rank, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, Start, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, Honor, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, BattleXpScore, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, END_Game_XP_Bar, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, Fon, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, GameOverRank, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, GameOverRank_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, GameOverStatistic, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, GamerOverTop, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, GamerOverTop_1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, GamerOverTop_32, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, HonorAnim, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, HonorsHB, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, Line, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, Line1, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, Line2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, MyRancIcon, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, PlayerName, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, RankAnimTExture, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, RanksHB, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, TimeText, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, VictoryText1, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, VictoryText2, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, WinsText1, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, WinsText2, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, RenredActor, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, Particle_location, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, HonorCount, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, CurrentHonor, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, UnknownData_45JZ, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, HonorTimer, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, CurrentRankShower, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, RankCount, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, RankTimer, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, HonorsWasShow, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, RanksWasShow, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, UnknownData_CXY4, 0x033A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, GameState, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, PlayerSide, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, UnknownData_H455, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, PlayerRank, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, WinnerSide, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, UnknownData_5L40, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, TOPSTRINGS, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, Camera, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, Time, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, UnknownData_FGCG, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameOverWidgetBASE_C, TimerTimer, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameOverWidgetBASE_C, 0x0380);
		}

		// class AFence_Wall_01_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Fence_Wall_01__Fence_Wall_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFence_Wall_01_C, 0x0378);
		}

		// class ATable_Static_6_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Table_Static_7__Table_Static_6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATable_Static_6_C, 0x0370);
		}

		// class A_SpawnFurnitur_09_C : public ACv3_SpawnLootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass___SpawnFurnitur_09___SpawnFurnitur_09_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_SpawnFurnitur_09_C, 0x0390);
		}

		// class Agarbage6_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__garbage6__garbage6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agarbage6_C, 0x0370);
		}

		// class ASet_of_Boxes_03_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Set_of_Boxes_03__Set_of_Boxes_03_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASet_of_Boxes_03_C, 0x03C2);
		}

		// class ASofa_05_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Sofa_05__Sofa_05_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASofa_05_C, 0x0370);
		}

		// class AWarehouseBKG_static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WarehouseBKG_static_BP__WarehouseBKG_static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWarehouseBKG_static_BP_C, 0x0370);
		}

		// class ASet_of_Boxes_01_1_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Set_of_Boxes_01_2__Set_of_Boxes_01_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASet_of_Boxes_01_1_C, 0x03C2);
		}

		// class ALamps_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Lamps__Lamps_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALamps_C, LampsArray, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALamps_C, 0x0371);
		}

		// class UWebSocketConnection : public UNetConnection
		TEST_METHOD(Class__HTML5Networking__WebSocketConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebSocketConnection, UnknownData_YJBE, 0x33660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebSocketConnection, 0x33670);
		}

		// class UWebSocketNetDriver : public UNetDriver
		TEST_METHOD(Class__HTML5Networking__WebSocketNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebSocketNetDriver, WebSocketPort, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWebSocketNetDriver, UnknownData_BSZ9, 0x045C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWebSocketNetDriver, 0x0468);
		}

		// class UCV2_SaveOptions_C : public USaveGame
		TEST_METHOD(BlueprintGeneratedClass__CV2_SaveOptions__CV2_SaveOptions_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_SaveOptions_C, Video_Mode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_SaveOptions_C, UnknownData_ZE6E, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_SaveOptions_C, Resolution, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_SaveOptions_C, MasterVolume, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_SaveOptions_C, MouseSence, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_SaveOptions_C, MouseInversion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_SaveOptions_C, VSync, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_SaveOptions_C, Windowed, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_SaveOptions_C, UnknownData_QYX5, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_SaveOptions_C, PostProcess, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_SaveOptions_C, ShadowQuality, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_SaveOptions_C, TextureQuality, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_SaveOptions_C, AntiAliasing, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_SaveOptions_C, EffectQuality, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_SaveOptions_C, ViewDistance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_SaveOptions_C, ResolutionScale, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_SaveOptions_C, Foliage, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_SaveOptions_C, MusicVolume, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_SaveOptions_C, Brightness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_SaveOptions_C, FOV, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCV2_SaveOptions_C, FrameRate, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCV2_SaveOptions_C, 0x007C);
		}

		// class ABench_3_Static_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Bench_3_Static_BP__Bench_3_Static_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABench_3_Static_BP_C, 0x0370);
		}

		// class ACv4_AirDropPoint_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv4_AirDropPoint__Cv4_AirDropPoint_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_AirDropPoint_C, Billboard, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv4_AirDropPoint_C, 0x0370);
		}

		// class AConcreteBlockB_Static_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__ConcreteBlockB_Static__ConcreteBlockB_Static_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AConcreteBlockB_Static_C, 0x0370);
		}

		// class ABed_Destroyed_01_Military_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Bed_Destroyed_01_Military__Bed_Destroyed_01_Military_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABed_Destroyed_01_Military_C, 0x0370);
		}

		// class ASM_Cave_Rock_Wall_Prefab_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__SM_Cave_Rock_Wall_Prefab__SM_Cave_Rock_Wall_Prefab_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASM_Cave_Rock_Wall_Prefab_C, 0x0370);
		}

		// class Afan_3_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__fan_4__fan_3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Afan_3_C, 0x0370);
		}

		// class AMattress_01_2_Military_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Mattress_01_2_Military__Mattress_01_2_Military_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMattress_01_2_Military_C, 0x0370);
		}

		// class AFurniture_19_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture_19_Rig__Furniture_19_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture_19_Rig_C, 0x03C2);
		}

		// class ABed_02_Military_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Bed_02_Military__Bed_02_Military_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABed_02_Military_C, 0x0370);
		}

		// class UStove_01_Rig_AnimBP_C : public UFurnitureAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__Stove_01_Rig_AnimBP__Stove_01_Rig_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStove_01_Rig_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStove_01_Rig_AnimBP_C, AnimGraphNode_Root_5EAB13BA41C2800A6AFF1CB6D71C6E28, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStove_01_Rig_AnimBP_C, AnimGraphNode_LocalRefPose_9D4505DE4C59127526D5EDBCD2FF5FDA, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStove_01_Rig_AnimBP_C, AnimGraphNode_BlendListByBool_AFC490F04246E709461D73ADB888586C, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStove_01_Rig_AnimBP_C, AnimGraphNode_SequencePlayer_FFD03D9142089F6BC20614B1C70C0443, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStove_01_Rig_AnimBP_C, 0x0588);
		}

		// class ACv2_DesantParachute_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv2_DesantParachute__Cv2_DesantParachute_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_DesantParachute_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_DesantParachute_C, air_box, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_DesantParachute_C, Box, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_DesantParachute_C, parachute, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_DesantParachute_C, IsOpen, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_DesantParachute_C, Dropped, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_DesantParachute_C, IsServer, 0x038A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_DesantParachute_C, 0x038B);
		}

		// class UARBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AugmentedReality__ARBlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBlueprintFunctionLibrary, 0x0028);
		}

		// class ACave_Rocks_Stalactite_02_Prefab_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Cave_Rocks_Stalactite_02_Prefab__Cave_Rocks_Stalactite_02_Prefab_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACave_Rocks_Stalactite_02_Prefab_C, 0x0370);
		}

		// class ACv4_DestoryedPrefab_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv4_DestoryedPrefab__Cv4_DestoryedPrefab_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_DestoryedPrefab_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_DestoryedPrefab_C, StaticMesh, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_DestoryedPrefab_C, isDestroy, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_DestoryedPrefab_C, UnknownData_5LP6, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_DestoryedPrefab_C, DestructionMesh, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_DestoryedPrefab_C, HitPoints, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv4_DestoryedPrefab_C, 0x038C);
		}

		// class Ajb_zabor01_C : public AFence_BaseSpawn_C
		TEST_METHOD(BlueprintGeneratedClass__jb_zabor01__jb_zabor01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ajb_zabor01_C, 0x0380);
		}

		// class ACv2_SpawnLootBP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv2_SpawnLootBP__Cv2_SpawnLootBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SpawnLootBP_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SpawnLootBP_C, Billboard, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SpawnLootBP_C, Scene, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SpawnLootBP_C, LootMesh, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SpawnLootBP_C, Loot_Type, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SpawnLootBP_C, UnknownData_QVKH, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SpawnLootBP_C, SpawnedLootBp, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SpawnLootBP_C, CustomLoot, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SpawnLootBP_C, UnknownData_9QEK, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SpawnLootBP_C, CustomLootCount, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SpawnLootBP_C, AlwaysSpawn, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SpawnLootBP_C, UnknownData_H764, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SpawnLootBP_C, CustomLootName, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_SpawnLootBP_C, playersNoSpawn, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_SpawnLootBP_C, 0x03B1);
		}

		// class AChair_Static_7_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Chair_Static_8__Chair_Static_7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChair_Static_7_C, 0x0370);
		}

		// class UCv4_Bot_DamageType_C : public UDamageType
		TEST_METHOD(BlueprintGeneratedClass__Cv4_Bot_DamageType__Cv4_Bot_DamageType_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCv4_Bot_DamageType_C, 0x0040);
		}

		// class ASet_of_Boxes_01_3_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Set_of_Boxes_01_4__Set_of_Boxes_01_3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASet_of_Boxes_01_3_C, 0x03C2);
		}

		// class ACv2_AdminPawn_C : public APawn
		TEST_METHOD(BlueprintGeneratedClass__Cv2_AdminPawn__Cv2_AdminPawn_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AdminPawn_C, UberGraphFrame, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AdminPawn_C, brusok, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AdminPawn_C, Camera, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AdminPawn_C, SpringArm, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AdminPawn_C, DefaultSceneRoot, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AdminPawn_C, TargetPawn, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AdminPawn_C, isPressMouseButton, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AdminPawn_C, UnknownData_SRC6, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AdminPawn_C, IndexTargetPlayer, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AdminPawn_C, TargetNetId, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AdminPawn_C, TargetActor, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AdminPawn_C, myLocation, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_AdminPawn_C, 0x042C);
		}

		// class AFurniture_05_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture_05_Rig__Furniture_05_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture_05_Rig_C, 0x03C2);
		}

		// class ABarrel_3_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__barrel_4__Barrel_3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABarrel_3_C, 0x0378);
		}

		// class ABOT_Creature_NPC_A_C : public ABOT_CreatureBase_C
		TEST_METHOD(BlueprintGeneratedClass__BOT_Creature_NPC_A__BOT_Creature_NPC_A_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_Creature_NPC_A_C, UnknownData_3LMV, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_Creature_NPC_A_C, Custom_Hands, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_Creature_NPC_A_C, Weapon, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_Creature_NPC_A_C, Face, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_Creature_NPC_A_C, Helmet, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_Creature_NPC_A_C, Custom_Stupni, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_Creature_NPC_A_C, Custom_Nogi, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABOT_Creature_NPC_A_C, Custom_Torso, 0x0598);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABOT_Creature_NPC_A_C, 0x05A0);
		}

		// class AWeaponBox3_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__WeaponBox3_Rig__WeaponBox3_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWeaponBox3_Rig_C, 0x03C2);
		}

		// class UElevatorAnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__ElevatorAnimBP__ElevatorAnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UElevatorAnimBP_C, UnknownData_MPRF, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UElevatorAnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UElevatorAnimBP_C, AnimGraphNode_Root_8760A65F49E114D599CE7482423A07ED, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UElevatorAnimBP_C, AnimGraphNode_BlendListByBool_556C63E9452DE690DA3F5AB82D6D9BAF, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UElevatorAnimBP_C, AnimGraphNode_SequencePlayer_BBC83C6C404CC4DC5B6F7F8F7146D6AE, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UElevatorAnimBP_C, AnimGraphNode_SequencePlayer_E02EECCE427B348D836CE092B5FBC44B, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UElevatorAnimBP_C, IsOpen, 0x05C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UElevatorAnimBP_C, 0x05C1);
		}

		// class UFlagSlot_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FlagSlot__FlagSlot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlagSlot_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlagSlot_C, Arrow, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlagSlot_C, Button_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlagSlot_C, HorizontalBox_3, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlagSlot_C, Team, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlagSlot_C, UnknownData_OFC4, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlagSlot_C, Click, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlagSlot_C, IsDesabled, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlagSlot_C, IsReverseStyle, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlagSlot_C, 0x023A);
		}

		// class UCv3_SteamFunctionsAll_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__Cv3_SteamFunctionsAll__Cv3_SteamFunctionsAll_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCv3_SteamFunctionsAll_C, 0x0028);
		}

		// class UGrenadeCameraShake_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__GrenadeCameraShake__GrenadeCameraShake_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGrenadeCameraShake_C, 0x0160);
		}

		// class AAbandoned_School_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Abandoned_School__Abandoned_School_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh225, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh224, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh103, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, _CraftDoor_Frame, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, ChildActor17, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, ChildActor16, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, ChildActor15, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, ChildActor14, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, ChildActor13, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, ChildActor12, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, ChildActor11, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, ChildActor10, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, ChildActor9, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, ChildActor8, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, ChildActor7, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Ladder_BP1, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, ChildActor6, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, ChildActor5, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, ChildActor4, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, ChildActor3, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, ChildActor2, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, ChildActor1, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, ChildActor, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, _SpawnFurnitur_05, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, _SpawnFurnitur_17, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, _SpawnFurnitur_07, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, _SpawnFurnitur_08, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, _SpawnFurnitur_11, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, _SpawnFurnitur_14, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Box, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Ladder_BP, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh223, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh3, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, sink01, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, toilet01_5, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, toilet01_4, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, toilet01_3, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Scene, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh222, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh221, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh220, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh219, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh36, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh23, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh20, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh18, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh17, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh16, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh4, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh14, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh13, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh12, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh11, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh10, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh9, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh8, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh7, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh6, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh5, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh15, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh67, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh66, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh65, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh64, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh63, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh62, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh61, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh60, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh59, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh58, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh57, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh68, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh55, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh54, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh53, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh52, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh51, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh50, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh49, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh48, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh47, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh46, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh45, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh56, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh92, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh91, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh90, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh89, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh88, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh87, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh86, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh85, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh84, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh83, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh82, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh93, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh80, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh79, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh78, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh77, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh76, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh75, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh74, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh73, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh72, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh71, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh70, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh81, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh117, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh116, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh115, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh114, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh113, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh112, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh111, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh110, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh109, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh108, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh107, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh118, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh105, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh104, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh102, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh101, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh100, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh99, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh98, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh97, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh96, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh95, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh106, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh142, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh141, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh140, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh139, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh138, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh137, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh136, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh135, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh134, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh133, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh132, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh143, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh130, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh129, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh128, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh127, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh126, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh125, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh124, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh123, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh122, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh121, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh120, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh131, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh167, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh166, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh165, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh164, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh163, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh162, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh161, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh160, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh159, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh158, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh157, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh168, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh155, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh154, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh153, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh152, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh151, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh150, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh149, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh148, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh147, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh146, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh145, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh156, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh170, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh192, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh191, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh190, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh189, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh188, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh187, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh186, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh185, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh184, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh183, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh193, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh181, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh180, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh179, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh178, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh177, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh176, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh175, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh174, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh173, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh172, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh171, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh182, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh218, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh217, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh216, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh215, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh214, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh213, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh212, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh211, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh210, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh209, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh208, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh195, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh206, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh205, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh204, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh203, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh202, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh201, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh200, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh199, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh198, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh197, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh196, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh207, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh43, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh42, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh19, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh41, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh40, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh39, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh38, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh37, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh35, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh34, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh28, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh32, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh31, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh30, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh29, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh21, 0x0B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh27, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh26, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh25, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh24, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh22, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh33, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh194, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh169, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh144, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh119, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh94, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh69, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh44, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh2, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, StaticMesh1, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Clothes_hanger_01, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Wood_Barriers, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Wood_Mount, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Wood_Frame, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Wood_Columns, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Wood_Planks_01, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Wood_Planks_06, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Wood_Planks_05, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Wood_Planks_04, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Wood_Planks_03, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Wood_Planks_02, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Windowsills, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_School_Lamps, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Stairs, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_School_Wires, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_School_Ventilation_01, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_School_Star, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_School_Nameplate_02, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_School_Nameplate_01, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_School_Metal_Details, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_School_Decals_01, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_School_Decals_Destruction_02, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_School_Decals_Destruction_01, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_School_Decals_03, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_School_Decals_02, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_School_Board_02, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_School_Board_01, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Rope, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Posters_02, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Posters_01, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_School_Board_03, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Mosaic_01, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Heating_pipes, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Mosaic_02, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Gym_03, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Gym_02, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Gym_01, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Glass, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Books, 0x0CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Flags, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Electrical_Switch, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Electrical_Socket, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Electrical_Boxes, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Ceiling_02, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Ceiling_01, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Bricks, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_School_Roof_Frame, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_School_Roof, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Abandoned_School_Fence_01, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Abandoned_School_Fence_02, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_Entrance_Door, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_School_Windows_01, 0x0D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_School_Windows_03, 0x0D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbandoned_School_C, Abandoned_School_School_Windows_02, 0x0D30);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAbandoned_School_C, 0x0D38);
		}

		// class UDamageDirectionBase_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DamageDirectionBase__DamageDirectionBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageDirectionBase_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageDirectionBase_C, Show, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageDirectionBase_C, Image_42, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageDirectionBase_C, Timer, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageDirectionBase_C, Direction, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageDirectionBase_C, 0x022C);
		}

		// class Agaz_3302_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__gaz_3302__gaz_3302_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Agaz_3302_C, StaticMesh4, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agaz_3302_C, StaticMesh3, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agaz_3302_C, StaticMesh2, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::Agaz_3302_C, StaticMesh1, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Agaz_3302_C, 0x0398);
		}

		// class ACv4_ElevatorButton_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv4_ElevatorButton__Cv4_ElevatorButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_ElevatorButton_C, ElevatorButton, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_ElevatorButton_C, Scene, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_ElevatorButton_C, ElevatorActor, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_ElevatorButton_C, isDown, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv4_ElevatorButton_C, 0x0381);
		}

		// class UZ_InventoryCraftResourceSlot_C : public UInventorySlotsRoot_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__Z_InventoryCraftResourceSlot__Z_InventoryCraftResourceSlot_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourceSlot_C, UnknownData_4ZAN, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourceSlot_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourceSlot_C, Hover, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourceSlot_C, Count, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourceSlot_C, Fon, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourceSlot_C, Icon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourceSlot_C, ProgressBar_1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourceSlot_C, ResourceName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourceSlot_C, HoverColor, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourceSlot_C, UnHoverColor, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourceSlot_C, IsHovered_1, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourceSlot_C, UnknownData_BVPC, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourceSlot_C, LootCargoType, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourceSlot_C, CountClick, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourceSlot_C, Root, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourceSlot_C, IsEmpty, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourceSlot_C, UnknownData_BJF8, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourceSlot_C, LootIndex, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourceSlot_C, NowRecourseCount, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZ_InventoryCraftResourceSlot_C, NeedRecourcecount, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZ_InventoryCraftResourceSlot_C, 0x02C0);
		}

		// class UGhoulAnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__GhoulAnimBP__GhoulAnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhoulAnimBP_C, UnknownData_IX1C, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhoulAnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhoulAnimBP_C, AnimGraphNode_Root_7C246E9646B090AED7D0468564D701F3, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhoulAnimBP_C, AnimGraphNode_BlendSpacePlayer_0EBB5ADE4D767A198989B8926EE55147, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhoulAnimBP_C, AnimGraphNode_Slot_263874984214C16B6F89DEA010E3EDE4, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhoulAnimBP_C, Creature, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhoulAnimBP_C, Speed, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGhoulAnimBP_C, 0x05AC);
		}

		// class ABlast_furnance_miha_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__Blast_furnance_miha__Blast_furnance_miha_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, Box2, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, Box1, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, Box, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, Top_Ladder_Collision_2, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh36, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh35, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh34, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh33, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh32, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh31, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh30, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh29, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh28, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh27, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh26, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh25, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, Icicle_01, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh24, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh23, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh22, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh21, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh20, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh19, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh18, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh17, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh16, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh15, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh14, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh13, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh12, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh11, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh10, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh9, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh8, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh7, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh6, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh5, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh4, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh3, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh2, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, StaticMesh1, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABlast_furnance_miha_C, Office_stairs, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlast_furnance_miha_C, 0x04C8);
		}

		// class AZ_InventoryRenderActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Z_InventoryRenderActor__Z_InventoryRenderActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_InventoryRenderActor_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_InventoryRenderActor_C, StaticMesh4, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_InventoryRenderActor_C, StaticMesh3, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_InventoryRenderActor_C, StaticMesh2, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_InventoryRenderActor_C, StaticMesh1, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_InventoryRenderActor_C, StaticMesh, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_InventoryRenderActor_C, SkeletalMesh, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_InventoryRenderActor_C, Arrow, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_InventoryRenderActor_C, SceneCaptureComponent2D, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_InventoryRenderActor_C, SpotLight, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_InventoryRenderActor_C, front, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_InventoryRenderActor_C, Back, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_InventoryRenderActor_C, Right, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_InventoryRenderActor_C, Left, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_InventoryRenderActor_C, Top, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_InventoryRenderActor_C, Floor, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_InventoryRenderActor_C, DefaultSceneRoot, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZ_InventoryRenderActor_C, 0x03F0);
		}

		// class AbrickHouse_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__brickHouse_BP__brickHouse_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, Box1, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, Box, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, RoofCol_3, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, Collider, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_Windows, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_Tube01, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_Tsokol001, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_Tsokol, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_stair_01, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_Roof, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_Potolok_1, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_Pol02, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_Pol01, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_Perila, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_Object295, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_Object201, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_Object187, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_Object185, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_Object177, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_Object099, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_Object095, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_Musor00_001, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_Musor00_00, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_Mesh003, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_Mesh002, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_Line01, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_glass_01, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_door_plank_02, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_door_plank_01, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_door_plank_22, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_2Floor_Outsid01, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_2_floor_inside, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AbrickHouse_BP_C, brickHouse_1Floor_Outsid, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AbrickHouse_BP_C, 0x0478);
		}

		// class UGlobalMenu_ROOT_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GlobalMenu_ROOT__GlobalMenu_ROOT_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenu_ROOT_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenu_ROOT_C, Slidemenu, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenu_ROOT_C, RootButtonsArray, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenu_ROOT_C, RootCurrentInventoryRef, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenu_ROOT_C, Click_CRAFT_Button, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenu_ROOT_C, Click_MAP_Button, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenu_ROOT_C, Click_Options_Button, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenu_ROOT_C, Click_CLOSE_Button, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenu_ROOT_C, Click_RESPAWN_Button, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenu_ROOT_C, Click_EXIT_Button, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenu_ROOT_C, RootPanelsArray, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenu_ROOT_C, RootInventoryButton, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenu_ROOT_C, RootCraftButton, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenu_ROOT_C, RootMapButton, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenu_ROOT_C, RootOptionsButton, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenu_ROOT_C, RootExitButton, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenu_ROOT_C, RootCloseButton, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGlobalMenu_ROOT_C, RooRespawnButton, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGlobalMenu_ROOT_C, 0x02D0);
		}

		// class USurvBanner_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SurvBanner__SurvBanner_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBanner_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBanner_C, GoIn, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBanner_C, GoOuut, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBanner_C, Border_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBanner_C, Fon, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBanner_C, Header, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBanner_C, HeaderFon, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBanner_C, Image_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBanner_C, MainText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBanner_C, WebURL, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvBanner_C, Parent, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvBanner_C, 0x0260);
		}

		// class UMI_8_Military_AnimBP_C : public UVehicleAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__MI_8_Military_AnimBP__MI_8_Military_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMI_8_Military_AnimBP_C, UberGraphFrame, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMI_8_Military_AnimBP_C, AnimGraphNode_Root_68E10DFB47BB74A04A7C60B00AF54363, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMI_8_Military_AnimBP_C, AnimGraphNode_WheelHandler_3FB4E9234FDCEFC4B7850B8E5E7D6A36, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMI_8_Military_AnimBP_C, AnimGraphNode_MeshRefPose_E8F6D87E4089AFAEE54C88A45FB21F2E, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMI_8_Military_AnimBP_C, AnimGraphNode_ModifyBone_EB8E7631445C56FEFD42579E68E7F6E7, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMI_8_Military_AnimBP_C, AnimGraphNode_SaveCachedPose_E55F9FA243438360C1BAF29A08CAF56B, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMI_8_Military_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_AB4140514E7AF5A78A62C0BFB52CDEC2, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMI_8_Military_AnimBP_C, AnimGraphNode_ComponentToLocalSpace_1F8B96FF4128705B22BF94A45FDF7A65, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMI_8_Military_AnimBP_C, AnimGraphNode_CopyBone_47CF83A24BBAACDC2CE1AB8C77FC82BB, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMI_8_Military_AnimBP_C, AnimGraphNode_CopyBone_DA962C0D4ABC6FC45B0D6992ACF705AB, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMI_8_Military_AnimBP_C, AnimGraphNode_CopyBone_F6079DB94739FB610CC413876CC65471, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMI_8_Military_AnimBP_C, AnimGraphNode_ModifyBone_6E7C98324963B8075A6C45823F7565A7, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMI_8_Military_AnimBP_C, AnimGraphNode_UseCachedPose_3398EBAB4DD5163D72C125AC3BDF818F, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMI_8_Military_AnimBP_C, AnimGraphNode_LocalToComponentSpace_70DF3F314573352457A528907A723895, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMI_8_Military_AnimBP_C, Steering, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMI_8_Military_AnimBP_C, RotationFun, 0x0EF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMI_8_Military_AnimBP_C, isOpenBackDoor, 0x0EF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMI_8_Military_AnimBP_C, 0x0EF9);
		}

		// class UInventory_SlotType_Backpack_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Inventory_SlotType_Backpack__Inventory_SlotType_Backpack_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_SlotType_Backpack_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_SlotType_Backpack_C, ShowHintAnim, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_SlotType_Backpack_C, Attach1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_SlotType_Backpack_C, Attach2, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_SlotType_Backpack_C, Attached, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_SlotType_Backpack_C, Description, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_SlotType_Backpack_C, Hint, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_SlotType_Backpack_C, HintText, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_SlotType_Backpack_C, Icon, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_SlotType_Backpack_C, LootName, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_SlotType_Backpack_C, SizeBox_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_SlotType_Backpack_C, Spacer_2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_SlotType_Backpack_C, IsHintVisible, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_SlotType_Backpack_C, UnknownData_GF7Z, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_SlotType_Backpack_C, RealTooltipWidget, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventory_SlotType_Backpack_C, 0x0270);
		}

		// class UInventory_SlotType_Equip_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Inventory_SlotType_Equip__Inventory_SlotType_Equip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_SlotType_Equip_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_SlotType_Equip_C, AmmoIcon, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_SlotType_Equip_C, AmmoNameText, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_SlotType_Equip_C, Attach1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_SlotType_Equip_C, Attach2, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_SlotType_Equip_C, Attached, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_SlotType_Equip_C, Description, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_SlotType_Equip_C, Icon, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventory_SlotType_Equip_C, LootName, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventory_SlotType_Equip_C, 0x0248);
		}

		// class UMAP_TowerMarker_C : public UMapMarkerROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__MAP_TowerMarker__MAP_TowerMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_TowerMarker_C, UnknownData_BVUE, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_TowerMarker_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_TowerMarker_C, Locator, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_TowerMarker_C, Image_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_TowerMarker_C, Image_2, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMAP_TowerMarker_C, 0x0258);
		}

		// class UMAP_LocatorMarker_C : public UMapMarkerROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__MAP_LocatorMarker__MAP_LocatorMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_LocatorMarker_C, UnknownData_CNMT, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_LocatorMarker_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_LocatorMarker_C, Locator, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_LocatorMarker_C, Image_1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_LocatorMarker_C, Image_2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_LocatorMarker_C, StyleTimer, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_LocatorMarker_C, StopLocator, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMAP_LocatorMarker_C, 0x0261);
		}

		// class AFurniture_01_Rig_C : public ACv3_LootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass__Furniture_01_Rig__Furniture_01_Rig_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFurniture_01_Rig_C, 0x03C2);
		}

		// class ACv4_Elevator_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv4_Elevator__Cv4_Elevator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Elevator_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Elevator_C, Box, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Elevator_C, PointLight_Player, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Elevator_C, Celing_lamr_03, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Elevator_C, AudioMusic, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Elevator_C, ElevatorButton, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Elevator_C, PointLight, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Elevator_C, Audio, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Elevator_C, SkeletalMesh, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Elevator_C, IsOpen, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Elevator_C, UnknownData_FANO, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Elevator_C, netLocation, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Elevator_C, UpPosition, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Elevator_C, DownPosition, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Elevator_C, isMoving, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Elevator_C, isDown, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Elevator_C, UnknownData_DQ2W, 0x03C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Elevator_C, DoorTimer, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv4_Elevator_C, generator, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv4_Elevator_C, 0x03D0);
		}

		// class UMAP_AzsMarker_C : public UMapMarkerROOT_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__MAP_AzsMarker__MAP_AzsMarker_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_AzsMarker_C, UnknownData_JIRK, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_AzsMarker_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMAP_AzsMarker_C, Image_1, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMAP_AzsMarker_C, 0x0248);
		}

		// class UConnectToMainMenuBase_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ConnectToMainMenuBase__ConnectToMainMenuBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectToMainMenuBase_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectToMainMenuBase_C, CanvasPanelNOConncetion, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectToMainMenuBase_C, GetSessions, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectToMainMenuBase_C, Image_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectToMainMenuBase_C, Image_29, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectToMainMenuBase_C, Reconnect, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectToMainMenuBase_C, ServerListVB, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectToMainMenuBase_C, SessionString, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectToMainMenuBase_C, SessionString_25, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectToMainMenuBase_C, SessionString_52, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectToMainMenuBase_C, Throbber_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectToMainMenuBase_C, VerticalBox_61, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectToMainMenuBase_C, SessionExist, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectToMainMenuBase_C, UnknownData_UAST, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectToMainMenuBase_C, CountPopitok, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectToMainMenuBase_C, IsLookingForSession, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConnectToMainMenuBase_C, 0x0269);
		}

		// class UInventoryBackPackCard_C : public UInventorySlotsRoot_C
		TEST_METHOD(WidgetBlueprintGeneratedClass__InventoryBackPackCard__InventoryBackPackCard_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, UnknownData_MTZQ, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, Hover, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, CircularThrobber_71, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, CountText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, Fon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, HoverImage, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, Icon, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, LootNameLootname, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, SplitCountText, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, SplitProgress, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, VerticalBox_1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, HoverColor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, UnHoverColor, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, IsHovered_1, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, UnknownData_RO3Q, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, LootCargoType, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, CountClick, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, Root, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, IsEmpty, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, UnknownData_U7GQ, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, LootIndex, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, SplitCount, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, SplitStep, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, NOUseSplit, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryBackPackCard_C, NoUseToolTip, 0x02E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryBackPackCard_C, 0x02E2);
		}

		// class UCv2_OpticComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__Cv2_OpticComponent__Cv2_OpticComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCv2_OpticComponent_C, OpticWidget, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCv2_OpticComponent_C, 0x00F8);
		}

		// class ATV_Static_1_Older_2_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__TV_Static_1_Older_3__TV_Static_1_Older_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATV_Static_1_Older_2_C, 0x0370);
		}

		// class UChoseOfSidePlayerString_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ChoseOfSidePlayerString__ChoseOfSidePlayerString_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChoseOfSidePlayerString_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChoseOfSidePlayerString_C, ArrowAnim, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChoseOfSidePlayerString_C, Arrow, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChoseOfSidePlayerString_C, Image_1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChoseOfSidePlayerString_C, Image_2, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChoseOfSidePlayerString_C, Lock, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChoseOfSidePlayerString_C, Name, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChoseOfSidePlayerString_C, Rank, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChoseOfSidePlayerString_C, TextBlock_2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChoseOfSidePlayerString_C, TimeLock, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChoseOfSidePlayerString_C, WeaponScaleBox, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChoseOfSidePlayerString_C, CharStr, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChoseOfSidePlayerString_C, Root, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChoseOfSidePlayerString_C, isLock, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChoseOfSidePlayerString_C, UnknownData_E914, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChoseOfSidePlayerString_C, DynMat, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChoseOfSidePlayerString_C, BlockTime, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChoseOfSidePlayerString_C, IsSelect, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChoseOfSidePlayerString_C, IsLockByTime, 0x02E5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChoseOfSidePlayerString_C, 0x02E6);
		}

		// class UGUI_FunctionLybriary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__GUI_FunctionLybriary__GUI_FunctionLybriary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGUI_FunctionLybriary_C, 0x0028);
		}

		// class USUR_UZI_AnimBP_C : public UAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__SUR_UZI_AnimBP__SUR_UZI_AnimBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USUR_UZI_AnimBP_C, UnknownData_22N8, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USUR_UZI_AnimBP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USUR_UZI_AnimBP_C, AnimGraphNode_Root_EC3AD0D74D6309672DB474BBF5F31947, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USUR_UZI_AnimBP_C, AnimGraphNode_SequencePlayer_6F3260E242579EC702FFC8B1EE5955EB, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USUR_UZI_AnimBP_C, AnimGraphNode_Slot_3CFAD03C4C79FEFE964547A7D64E77B7, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USUR_UZI_AnimBP_C, 0x04E8);
		}

		// class AW_Box_03_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__W_Box_03__W_Box_03_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AW_Box_03_C, 0x0378);
		}

		// class ATable_Static_8_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Table_Static_9__Table_Static_8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATable_Static_8_C, 0x0370);
		}

		// class A_SpawnFurnitur_08_C : public ACv3_SpawnLootFurniture_C
		TEST_METHOD(BlueprintGeneratedClass___SpawnFurnitur_08___SpawnFurnitur_08_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::A_SpawnFurnitur_08_C, 0x0390);
		}

		// class AWireFence_01_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__WireFence_01__WireFence_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWireFence_01_C, 0x0378);
		}

		// class ACv2_AirPlaneBase_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Cv2_AirPlaneBase__Cv2_AirPlaneBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirPlaneBase_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirPlaneBase_C, TurbineRight, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirPlaneBase_C, Cv2_DestroyComponent, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirPlaneBase_C, AirPlane_Sound1, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirPlaneBase_C, StaticMesh1, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirPlaneBase_C, Scene, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirPlaneBase_C, DefaultSceneRoot, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirPlaneBase_C, DropVector, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirPlaneBase_C, GoBase, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirPlaneBase_C, UnknownData_GM1L, 0x03AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirPlaneBase_C, CountBombs, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirPlaneBase_C, netLocation, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirPlaneBase_C, PlayerPawn, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirPlaneBase_C, isBomber_, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirPlaneBase_C, UnknownData_URFA, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirPlaneBase_C, RandomDrop, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirPlaneBase_C, isBattleRoyaleSpawn_, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirPlaneBase_C, IsDamaged, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirPlaneBase_C, UnknownData_AN48, 0x03D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirPlaneBase_C, HitPoints, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirPlaneBase_C, damageEmitterTimer, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACv2_AirPlaneBase_C, isDeath, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACv2_AirPlaneBase_C, 0x03E1);
		}

		// class AUAZ_Destroyed_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__UAZ_Destroyed__UAZ_Destroyed_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AUAZ_Destroyed_C, 0x0378);
		}

		// class UCompasActorWidget_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CompasActorWidget__CompasActorWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompasActorWidget_C, UberGraphFrame, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompasActorWidget_C, Image_1, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompasActorWidget_C, TextBlock_1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompasActorWidget_C, ActorVar, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompasActorWidget_C, Timer, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompasActorWidget_C, 0x0228);
		}

		// class ASurv_Car_Passat_C : public ACv2_BaseCar_4W_C
		TEST_METHOD(BlueprintGeneratedClass__Surv_Car_Passat__Surv_Car_Passat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASurv_Car_Passat_C, 0x0940);
		}

		// class Avaz_2101m_C : public ABuildings_Base_Surv_C
		TEST_METHOD(BlueprintGeneratedClass__vaz_2101m__vaz_2101m_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Avaz_2101m_C, 0x0378);
		}

		// class AChair_Static_3_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Chair_Static_4__Chair_Static_3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChair_Static_3_C, 0x0370);
		}

		// class ACooling_Tower_BP_C : public AStaticPropsParent_BP_C
		TEST_METHOD(BlueprintGeneratedClass__Cooling_Tower_BP__Cooling_Tower_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACooling_Tower_BP_C, 0x0370);
		}

		// class UKismetProceduralMeshLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ProceduralMeshComponent__KismetProceduralMeshLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetProceduralMeshLibrary, 0x0028);
		}

		// class UProceduralMeshComponent : public UMeshComponent
		TEST_METHOD(Class__ProceduralMeshComponent__ProceduralMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_7VTK, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseComplexAsSimpleCollision, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseAsyncCooking, 0x06C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_DQZV, 0x06C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshBodySetup, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshSections, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, CollisionConvexElems, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, LocalBounds, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_7X4U, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, AsyncBodySetupQueue, 0x0710);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralMeshComponent, 0x0720);
		}

		// class AZ_LootActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Z_LootActor__Z_LootActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_LootActor_C, UberGraphFrame, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_LootActor_C, DefaultSceneRoot, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_LootActor_C, Loot_Struct, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_LootActor_C, LootID, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_LootActor_C, UnknownData_5OJ8, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_LootActor_C, LootBpActor, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AZ_LootActor_C, ZTransportLoot, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AZ_LootActor_C, 0x03F8);
		}

		// struct FBlueprintSessionResult
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__BlueprintSessionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintSessionResult, UnknownData_Q50G, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintSessionResult, 0x00B8);
		}

		// struct FPIELoginSettingsInternal
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PIELoginSettingsInternal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Token, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Type, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, TokenBytes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPIELoginSettingsInternal, 0x0040);
		}

		// struct FPlayerReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PlayerReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UniqueId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ValidationStr, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ElapsedTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UnknownData_X9ED, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerReservation, 0x0030);
		}

		// struct FPartyReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PartyReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, TeamNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, UnknownData_VVBG, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyLeader, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyMembers, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyReservation, 0x0030);
		}

		// struct FNodeObject
		TEST_METHOD(ScriptStruct__AnimationCore__NodeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, ParentName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeObject, 0x0010);
		}

		// struct FConstraintDescriptor
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, UnknownData_FC3N, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptor, 0x0010);
		}

		// struct FFilterOptionPerAxis
		TEST_METHOD(ScriptStruct__AnimationCore__FilterOptionPerAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bZ, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilterOptionPerAxis, 0x0003);
		}

		// struct FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptionEx)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_9AL7, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, AxesFilterOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_7OL7, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptionEx, 0x0010);
		}

		// struct FAxis
		TEST_METHOD(ScriptStruct__AnimationCore__Axis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, Axis, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, bInLocalSpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, UnknownData_Q0FG, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAxis, 0x0010);
		}

		// struct FAimConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__AimConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookAt_Axis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUp_Axis, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, bUseLookUp, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, UnknownData_P17Y, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAimConstraintDescription, 0x0038);
		}

		// struct FConstraintDescription
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bRotation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bScale, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bParent, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, TranslationAxes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, RotationAxes, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, ScaleAxes, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescription, 0x000D);
		}

		// struct FTransformConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, TransformType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, UnknownData_XDYH, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraintDescription, 0x0018);
		}

		// struct FNodeChain
		TEST_METHOD(ScriptStruct__AnimationCore__NodeChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeChain, Nodes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeChain, 0x0010);
		}

		// struct FTransformConstraint
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Operator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_YK8R, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, SourceNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, TargetNode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Weight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, bMaintainOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_FLL4, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraint, 0x0028);
		}

		// struct FNodeHierarchyData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Nodes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Transforms, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, NodeNameToIndexMapping, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyData, 0x0070);
		}

		// struct FNodeHierarchyWithUserData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyWithUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, UnknownData_8OPM, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, Hierarchy, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyWithUserData, 0x0078);
		}

		// struct FConstraintData
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Constraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, TargetNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Weight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, bMaintainOffset, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, UnknownData_N4M5, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Offset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, CurrentTransform, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintData, 0x0080);
		}

		// struct FConstraintOffset
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_003U, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_9PTA, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Parent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintOffset, 0x0060);
		}

		// struct FGUI_MapNet
		TEST_METHOD(UserDefinedStruct__GUI_MapNet__GUI_MapNet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_MapNet, ColumsArray_3_750AF24E4777D2D170C908885B611856, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGUI_MapNet, 0x0010);
		}

		// struct FZ_TradeStr
		TEST_METHOD(UserDefinedStruct__Z_TradeStr__Z_TradeStr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_TradeStr, IsFromPlayer_1_A2068D914AE97C5D1FC187A6C114094A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_TradeStr, IsNoMones_3_BB9909E64628FA00A8AE958FEDE96D6A, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_TradeStr, UnknownData_OKX2, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_TradeStr, FromLootName_6_36EE1EB94B8671D3A5C6BCA3B2375246, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_TradeStr, FromLootCount_13_F673E23F4631F0FF68CD119654756D50, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_TradeStr, UnknownData_FNL9, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_TradeStr, ToLootNameLoot_8_69993FA94DFD92F5C0A4CFB3BFE6E6EF, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_TradeStr, ToLootCount_14_113F15544AD8D36730437F9A47A5B2B0, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FZ_TradeStr, 0x0024);
		}

		// struct FGameOverPlayerInfoStr
		TEST_METHOD(UserDefinedStruct__GameOverPlayerInfoStr__GameOverPlayerInfoStr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameOverPlayerInfoStr, Name_2_447E17CF4F6FB8086758B9BE04147F65, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameOverPlayerInfoStr, Avatar_5_0EEF0E7E4CB592484B09C4B2F64B7E02, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameOverPlayerInfoStr, 0x0020);
		}

		// struct FS_Loot_ID_Idexes
		TEST_METHOD(UserDefinedStruct__S_Loot_ID_Idexes__S_Loot_ID_Idexes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_Loot_ID_Idexes, ID_Indexes_3_259E8B394AFAE825357FD6BDC7F4F550, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_Loot_ID_Idexes, 0x0010);
		}

		// struct FSurv2019_BanStructure
		TEST_METHOD(UserDefinedStruct__Surv2019_BanStructure__Surv2019_BanStructure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurv2019_BanStructure, UserID_12_E91D4589450F5DBDAC9377B4E41535C0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurv2019_BanStructure, DeviceID_16_04AFF4914168BAFC1EDA4ABB226B7227, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurv2019_BanStructure, PlayerName_17_19BD5CA24DFCBE99EA51B7B04F59E616, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurv2019_BanStructure, AdminID_13_770689834BDEB678ABDF49B852713B66, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurv2019_BanStructure, BanMessage_15_0789368C44586A4C835D3FB1001C52A8, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurv2019_BanStructure, IsFullLifeBan_11_AE7F2EC84E00DC3B5FF909AA989D126D, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSurv2019_BanStructure, 0x0051);
		}

		// struct FMovieSceneTransformMask
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTransformMask, 0x0004);
		}

		// struct FMovieScene3DTransformKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Rotation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Time, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, UnknownData_8D0P, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformKeyStruct, 0x0078);
		}

		// struct FMovieScene3DScaleKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DScaleKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, UnknownData_7NSK, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DScaleKeyStruct, 0x0030);
		}

		// struct FMovieScene3DRotationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DRotationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Rotation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, UnknownData_JO0B, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DRotationKeyStruct, 0x0030);
		}

		// struct FMovieScene3DLocationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DLocationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, UnknownData_B547, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DLocationKeyStruct, 0x0030);
		}

		// struct FMovieScene3DTransformTemplateData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformTemplateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, TranslationCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, RotationCurve, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ScaleCurve, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ManualWeight, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, BlendType, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_SNY2, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, Mask, 0x0464);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformTemplateData, 0x0468);
		}

		// struct FMovieSceneComponentTransformSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneComponentTransformSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentTransformSectionTemplate, TemplateData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneComponentTransformSectionTemplate, 0x0488);
		}

		// struct FMovieSceneActorReferenceSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, PropertyData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, ActorGuidIndexCurve, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, ActorGuids, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceSectionTemplate, 0x00C8);
		}

		// struct FMovieSceneAudioSectionTemplateData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAudioSectionTemplateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, Sound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, AudioStartOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, AudioRange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, UnknownData_SOY2, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, AudioPitchMultiplierCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, AudioVolumeCurve, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, RowIndex, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, bOverrideAttenuation, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, UnknownData_B675, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, AttenuationSettings, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, OnQueueSubtitles, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, OnAudioFinished, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplateData, OnAudioPlaybackPercent, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAudioSectionTemplateData, 0x0140);
		}

		// struct FMovieSceneAudioSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAudioSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplate, AudioData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAudioSectionTemplate, 0x0160);
		}

		// struct FMovieSceneCameraAnimSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, CameraAnim, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendInTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendOutTime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, bLooping, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, UnknownData_BX8J, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionData, 0x0020);
		}

		// struct FMovieSceneAdditiveCameraAnimationTrackTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAdditiveCameraAnimationTrackTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAdditiveCameraAnimationTrackTemplate, 0x0020);
		}

		// struct FMovieSceneAdditiveCameraAnimationTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAdditiveCameraAnimationTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAdditiveCameraAnimationTemplate, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, ShakeClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlayScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlaySpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_59IW, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UserDefinedPlaySpace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_MXGY, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionData, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, UnknownData_H388, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraAnimSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, UnknownData_XOKV, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraCutSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraCutSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, CameraGuid, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, CutTransform, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, bHasCutTransform, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, UnknownData_9NYK, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraCutSectionTemplate, 0x0070);
		}

		// struct FMovieSceneColorKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, UnknownData_BSUO, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorKeyStruct, 0x0060);
		}

		// struct FMovieSceneColorSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, Curves, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, BlendType, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, UnknownData_6DLN, 0x0209);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorSectionTemplate, 0x0210);
		}

		// struct FMovieSceneEventParameters
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventParameters, UnknownData_WEVW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventParameters, 0x0028);
		}

		// struct FEventPayload
		TEST_METHOD(ScriptStruct__MovieSceneTracks__EventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, EventName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, Parameters, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventPayload, 0x0030);
		}

		// struct FMovieSceneEventSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, KeyTimes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, KeyValues, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionData, 0x0020);
		}

		// struct FMovieSceneEventSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionTemplate, EventData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionTemplate, EventReceivers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionTemplate, UnknownData_9M3P, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionTemplate, 0x0058);
		}

		// struct FScalarParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ScalarParameterNameAndCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, Index, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, UnknownData_JG0P, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterCurve, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterNameAndCurve, 0x0080);
		}

		// struct FVectorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__VectorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, Index, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, UnknownData_RXU3, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, XCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, YCurve, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ZCurve, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterNameAndCurves, 0x0160);
		}

		// struct FColorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ColorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, Index, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, UnknownData_2YOG, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, RedCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, GreenCurve, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, BlueCurve, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, AlphaCurve, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorParameterNameAndCurves, 0x01D0);
		}

		// struct FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, PlayRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_6S1L, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, SlotName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Weight, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationParams, 0x0090);
		}

		// struct FMovieScene3DAttachSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DAttachSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachGuid, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachSocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachComponentName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentLocationRule, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentRotationRule, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentScaleRule, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentLocationRule, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentRotationRule, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentScaleRule, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, UnknownData_PRAY, 0x0046);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DAttachSectionTemplate, 0x0048);
		}

		// struct FMovieScene3DPathSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DPathSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, PathGuid, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, TimingCurve, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, FrontAxisEnum, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UpAxisEnum, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_8IZC, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_JRX2, 0x00A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DPathSectionTemplate, 0x00A8);
		}

		// struct FMovieSceneVectorKeyStructBase : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStructBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, UnknownData_6X06, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, Time, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, UnknownData_LERG, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStructBase, 0x0050);
		}

		// struct FMovieSceneVector2DKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector2DKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector2DKeyStruct, Vector, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector2DKeyStruct, 0x0058);
		}

		// struct FMovieSceneBoolPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBoolPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolPropertySectionTemplate, BoolCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolPropertySectionTemplate, 0x00B8);
		}

		// struct FMovieSceneVisibilitySectionTemplate : public FMovieSceneBoolPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVisibilitySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVisibilitySectionTemplate, bTemporarilyHiddenInGame, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVisibilitySectionTemplate, UnknownData_HA17, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVisibilitySectionTemplate, 0x00C0);
		}

		// struct FMovieSceneFadeSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneFadeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeColor, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, UnknownData_YMF2, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFadeSectionTemplate, 0x00A8);
		}

		// struct FMovieSceneLevelVisibilitySectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneLevelVisibilitySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, Visibility, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, UnknownData_EXPU, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, LevelNames, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneLevelVisibilitySectionTemplate, 0x0038);
		}

		// struct FMovieSceneParameterSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Scalars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vectors, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Colors, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParameterSectionTemplate, 0x0050);
		}

		// struct FMovieSceneMaterialParameterCollectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneMaterialParameterCollectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMaterialParameterCollectionTemplate, MPC, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMaterialParameterCollectionTemplate, 0x0058);
		}

		// struct FMovieSceneComponentMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneComponentMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, MaterialIndex, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, UnknownData_FNXE, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneComponentMaterialSectionTemplate, 0x0058);
		}

		// struct FMovieSceneParticleParameterSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleParameterSectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleParameterSectionTemplate, 0x0050);
		}

		// struct FMovieSceneParticleSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParticleSectionTemplate, ParticleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleSectionTemplate, 0x0090);
		}

		// struct FMovieSceneTransformPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneTransformPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTransformPropertySectionTemplate, TemplateData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTransformPropertySectionTemplate, 0x04B0);
		}

		// struct FMovieSceneVectorPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, ComponentCurves, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, NumChannelsUsed, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, BlendType, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, UnknownData_97I5, 0x020D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorPropertySectionTemplate, 0x0210);
		}

		// struct FMovieSceneStringPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringPropertySectionTemplate, StringCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringPropertySectionTemplate, 0x00C0);
		}

		// struct FMovieSceneIntegerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneIntegerPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, IntegerCurve, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, BlendType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, UnknownData_ZJ9U, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerPropertySectionTemplate, 0x00C0);
		}

		// struct FMovieSceneEnumPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEnumPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEnumPropertySectionTemplate, EnumCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEnumPropertySectionTemplate, 0x00B8);
		}

		// struct FMovieSceneBytePropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBytePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBytePropertySectionTemplate, ByteCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBytePropertySectionTemplate, 0x00B8);
		}

		// struct FMovieSceneFloatPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneFloatPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, FloatCurve, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, BlendType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, UnknownData_TEY6, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatPropertySectionTemplate, 0x00C0);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplateParameters : public FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionStartTime, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionEndTime, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, 0x0098);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplate, 0x00B8);
		}

		// struct FMovieSceneSlomoSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSlomoSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSlomoSectionTemplate, SlomoCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSlomoSectionTemplate, 0x0090);
		}

		// struct FMovieSceneSpawnSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSpawnSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnSectionTemplate, Curve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnSectionTemplate, 0x0090);
		}

		// struct FMovieSceneVector4KeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector4KeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, Vector, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector4KeyStruct, 0x0060);
		}

		// struct FMovieSceneVectorKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, Vector, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, UnknownData_94GX, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStruct, 0x0060);
		}

		// struct FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateWidgetStyle, UnknownData_Q7XU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateWidgetStyle, 0x0008);
		}

		// struct FSlateColor
		TEST_METHOD(ScriptStruct__SlateCore__SlateColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, SpecifiedColor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, ColorUseRule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, UnknownData_CO0N, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateColor, 0x0028);
		}

		// struct FMargin
		TEST_METHOD(ScriptStruct__SlateCore__Margin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMargin, 0x0010);
		}

		// struct FSlateBrush
		TEST_METHOD(ScriptStruct__SlateCore__SlateBrush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_PLYL, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Margin, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, TintColor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UVRegion, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, DrawAs, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Tiling, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Mirroring, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageType, 0x006F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_FEZI, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateBrush, 0x0078);
		}

		// struct FSlateSound
		TEST_METHOD(ScriptStruct__SlateCore__SlateSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, ResourceObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, UnknownData_2I88, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateSound, 0x0018);
		}

		// struct FCheckBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__CheckBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckBoxType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UnknownData_HIW2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedImage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedHoveredImage, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedPressedImage, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedImage, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedHoveredImage, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedPressedImage, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedImage, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedHoveredImage, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedPressedImage, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, Padding, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, ForegroundColor, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, BorderBackgroundColor, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedSlateSound, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedSlateSound, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, HoveredSlateSound, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCheckBoxStyle, 0x04F0);
		}

		// struct FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__InputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputEvent, UnknownData_A8ZF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputEvent, 0x0020);
		}

		// struct FMotionEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__MotionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotionEvent, UnknownData_5IYG, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotionEvent, 0x0050);
		}

		// struct FCharacterEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__CharacterEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterEvent, UnknownData_LPR5, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterEvent, 0x0028);
		}

		// struct FKeyEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__KeyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyEvent, UnknownData_QGRG, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyEvent, 0x0040);
		}

		// struct FAnalogInputEvent : public FKeyEvent
		TEST_METHOD(ScriptStruct__SlateCore__AnalogInputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnalogInputEvent, UnknownData_IHMY, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnalogInputEvent, 0x0048);
		}

		// struct FFocusEvent
		TEST_METHOD(ScriptStruct__SlateCore__FocusEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFocusEvent, UnknownData_D6TN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFocusEvent, 0x0008);
		}

		// struct FButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Normal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Hovered, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Pressed, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Disabled, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, NormalPadding, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedPadding, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedSlateSound, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, HoveredSlateSound, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FButtonStyle, 0x0238);
		}

		// struct FFontOutlineSettings
		TEST_METHOD(ScriptStruct__SlateCore__FontOutlineSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, UnknownData_FP20, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineColor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, bSeparateFillAlpha, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, UnknownData_N86X, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontOutlineSettings, 0x0028);
		}

		// struct FSlateFontInfo
		TEST_METHOD(ScriptStruct__SlateCore__SlateFontInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, OutlineSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_Y4E1, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, TypefaceFontName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, Size, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_HKWI, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateFontInfo, 0x0058);
		}

		// struct FTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ColorAndOpacity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowOffset, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowColorAndOpacity, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, SelectedBackgroundColor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightColor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightShape, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, UnderlineBrush, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextBlockStyle, 0x01C8);
		}

		// struct FWindowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__WindowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MinimizeButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MaximizeButtonStyle, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, RestoreButtonStyle, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, CloseButtonStyle, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, TitleTextStyle, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ActiveTitleBrush, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, InactiveTitleBrush, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, FlashTitleBrush, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundColor, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineBrush, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineColor, 0x0CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BorderBrush, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundBrush, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ChildBackgroundBrush, 0x0DD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowStyle, 0x0E48);
		}

		// struct FScrollBorderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBorderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, BottomShadowBrush, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBorderStyle, 0x00F8);
		}

		// struct FScrollBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, BottomShadowBrush, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, LeftShadowBrush, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, RightShadowBrush, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBoxStyle, 0x01E8);
		}

		// struct FPointerEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__PointerEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerEvent, UnknownData_8ZX9, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerEvent, 0x0070);
		}

		// struct FTableRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectorFocusedBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHoveredBrush, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveBrush, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHoveredBrush, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveBrush, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundHoveredBrush, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundBrush, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundHoveredBrush, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundBrush, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, TextColor, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectedTextColor, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Above, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Onto, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Below, 0x0580);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowStyle, 0x05F8);
		}

		// struct FEditableTextStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, ColorAndOpacity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageSelected, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageComposing, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, CaretImage, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextStyle, 0x01F0);
		}

		// struct FSpinBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SpinBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, BackgroundBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, HoveredBackgroundBrush, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ActiveFillBrush, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, InactiveFillBrush, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ArrowsImage, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ForegroundColor, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, TextPadding, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpinBoxStyle, 0x0298);
		}

		// struct FComboButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, DownArrowImage, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderBrush, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderPadding, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboButtonStyle, 0x0340);
		}

		// struct FComboBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, ComboButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, PressedSlateSound, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, SelectionChangeSlateSound, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboBoxStyle, 0x0378);
		}

		// struct FFontData
		TEST_METHOD(ScriptStruct__SlateCore__FontData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFilename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, Hinting, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, LoadingPolicy, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, UnknownData_BRD3, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFaceAsset, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontData, 0x0020);
		}

		// struct FTypefaceEntry
		TEST_METHOD(ScriptStruct__SlateCore__TypefaceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Font, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypefaceEntry, 0x0028);
		}

		// struct FTypeface
		TEST_METHOD(ScriptStruct__SlateCore__Typeface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypeface, Fonts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypeface, 0x0010);
		}

		// struct FCompositeSubFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeSubFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, Typeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, CharacterRanges, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, ScalingFactor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, UnknownData_JJ3K, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSubFont, 0x0028);
		}

		// struct FCompositeFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, DefaultTypeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, SubTypefaces, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFont, 0x0020);
		}

		// struct FNavigationEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__NavigationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationEvent, UnknownData_439F, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationEvent, 0x0028);
		}

		// struct FScrollBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBackgroundImage, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalTopSlotImage, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalTopSlotImage, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBottomSlotImage, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBottomSlotImage, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, NormalThumbImage, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HoveredThumbImage, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, DraggedThumbImage, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBarStyle, 0x0440);
		}

		// struct FEditableTextBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageHovered, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageFocused, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageReadOnly, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Padding, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Font, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ForegroundColor, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundColor, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ReadOnlyForegroundColor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, HScrollBarPadding, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, VScrollBarPadding, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ScrollBarStyle, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextBoxStyle, 0x0728);
		}

		// struct FSearchBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SearchBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, TextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ActiveFontInfo, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UpArrowImage, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, DownArrowImage, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, GlassImage, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ClearImage, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ImagePadding, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, bLeftAlignButtons, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UnknownData_S7B4, 0x0979);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSearchBoxStyle, 0x0980);
		}

		// struct FExpandableAreaStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ExpandableAreaStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, CollapsedImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, ExpandedImage, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, RolloutAnimationSeconds, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, UnknownData_S339, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpandableAreaStyle, 0x0100);
		}

		// struct FProgressBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ProgressBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, BackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, FillImage, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, MarqueeImage, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProgressBarStyle, 0x0170);
		}

		// struct FInlineEditableTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineEditableTextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, EditableTextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, TextStyle, 0x0730);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineEditableTextBlockStyle, 0x08F8);
		}

		// struct FHyperlinkStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HyperlinkStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, UnderlineStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, TextStyle, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, Padding, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHyperlinkStyle, 0x0418);
		}

		// struct FDockTabStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__DockTabStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, CloseButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, NormalBrush, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ActiveBrush, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayTabBrush, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayIconBrush, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ForegroundBrush, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, HoveredBrush, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ContentAreaBrush, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabWellBrush, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabPadding, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, OverlapWidth, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, UnknownData_R6PA, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, FlashColor, 0x0618);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDockTabStyle, 0x0640);
		}

		// struct FTableColumnHeaderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableColumnHeaderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryAscendingImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryDescendingImage, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryAscendingImage, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryDescendingImage, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, NormalBrush, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, HoveredBrush, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownImage, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownNormalBorderBrush, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownHoveredBorderBrush, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableColumnHeaderStyle, 0x0440);
		}

		// struct FSplitterStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SplitterStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleNormalBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleHighlightBrush, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplitterStyle, 0x00F8);
		}

		// struct FHeaderRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HeaderRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, LastColumnStyle, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnSplitterStyle, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, BackgroundBrush, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ForegroundColor, 0x09F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeaderRowStyle, 0x0A20);
		}

		// struct FInlineTextImageStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineTextImageStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Image, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Baseline, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, UnknownData_LDFF, 0x0082);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineTextImageStyle, 0x0088);
		}

		// struct FSliderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SliderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalBarImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledBarImage, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalThumbImage, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledThumbImage, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, BarThickness, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, UnknownData_805E, 0x01EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSliderStyle, 0x01F0);
		}

		// struct FVolumeControlStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__VolumeControlStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, SliderStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, HighVolumeImage, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MidVolumeImage, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, LowVolumeImage, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, NoVolumeImage, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MutedImage, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVolumeControlStyle, 0x0450);
		}

		// struct FGeometry
		TEST_METHOD(ScriptStruct__SlateCore__Geometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometry, UnknownData_IE4N, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometry, 0x0038);
		}

		// struct FReferenceBoneFrame
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__ReferenceBoneFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Axis, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferenceBoneFrame, 0x0028);
		}

		// struct FAnimNode_SkeletalControlBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SkeletalControlBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ComponentPose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, Alpha, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBias, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, LODThreshold, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ActualAlpha, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_0GX6, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SkeletalControlBase, 0x0070);
		}

		// struct FAnimNode_TwistCorrectiveNode : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwistCorrectiveNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, BaseFrame, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistFrame, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistPlaneNormalAxis, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RangeMax, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMin, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMax, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, UnknownData_3BJX, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, Curve, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, UnknownData_1PT8, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwistCorrectiveNode, 0x00F8);
		}

		// struct FSocketReference
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SocketReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, SocketName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_CRAA, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSocketReference, 0x0040);
		}

		// struct FBoneSocketTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BoneSocketTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, bUseSocket, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_08AJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, BoneReference, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, SocketReference, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneSocketTarget, 0x0060);
		}

		// struct FAnimNode_TwoBoneIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoBoneIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, IKBone, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_5XHL, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, StartStretchRatio, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, MaxStretchScale, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, StretchLimits, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_T87K, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocationSpace, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_7NBS, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorSpaceBoneName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocation, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_R7MZ, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorTarget, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocationSpace, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_YFJQ, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocation, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetSpaceBoneName, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_Q27F, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTarget, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, bAllowTwist, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_G2MN, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, TwistAxis, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, bNoTwist, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_1H12, 0x01B5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoBoneIK, 0x01C0);
		}

		// struct FAnimNode_TwoWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, A, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, B, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, Alpha, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBias, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, InternalBlendAlpha, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, bAIsRelevant, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, bBIsRelevant, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, bResetChildOnActivation, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_CP71, 0x0073);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoWayBlend, 0x0078);
		}

		// struct FAnimSequencerInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimSequencerInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequencerInstanceProxy, UnknownData_100K, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequencerInstanceProxy, 0x0660);
		}

		// struct FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFEntry, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFEntry, 0x0010);
		}

		// struct FRBFTarget : public FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, ScaleFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, bApplyCustomCurve, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_SO2I, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, CustomCurve, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFTarget, 0x0088);
		}

		// struct FAnimNode_PoseHandler : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, PoseAsset, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, UnknownData_OA0A, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseHandler, 0x00A0);
		}

		// struct FAnimNode_PoseByName : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseByName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseWeight, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, UnknownData_M5UY, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseByName, 0x00B0);
		}

		// struct FRBFParams
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TargetDimensions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Radius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Function, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, DistanceMethod, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TwistAxis, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_POPY, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, WeightThreshold, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFParams, 0x0010);
		}

		// struct FPoseDriverTransform
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetRotation, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTransform, 0x0018);
		}

		// struct FPoseDriverTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, BoneTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bApplyCustomCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_4GMT, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DrivenName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_ISE1, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTarget, 0x00A8);
		}

		// struct FAnimNode_PoseDriver : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourcePose, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourceBones, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, bOnlyDriveSelectedBones, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_CZ9C, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, OnlyDriveBones, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, EvalSpaceBone, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, RBFParams, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveSource, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveOutput, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_2G3D, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, PoseTargets, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourceBone, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, TwistAxis, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, Type, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_W2O4, 0x013A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, RadialScaling, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_H2XH, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseDriver, 0x0178);
		}

		// struct FAnimNode_PoseSnapshot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Mode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, UnknownData_Y87K, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, SnapshotName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Snapshot, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, UnknownData_EWB3, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseSnapshot, 0x00B0);
		}

		// struct FRandomPlayerSequenceEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RandomPlayerSequenceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, ChanceToPlay, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinLoopCount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxLoopCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, UnknownData_0973, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, BlendIn, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomPlayerSequenceEntry, 0x0058);
		}

		// struct FAnimNode_RandomPlayer : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RandomPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, bShuffleMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_I1FL, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, Entries, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_VP2U, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RandomPlayer, 0x0090);
		}

		// struct FAnimNode_MeshSpaceRefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MeshSpaceRefPose)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MeshSpaceRefPose, 0x0030);
		}

		// struct FAnimNode_RefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RefPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, RefPoseType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, UnknownData_MMRV, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RefPose, 0x0038);
		}

		// struct FAnimNode_Root : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Root)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Result, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Root, 0x0048);
		}

		// struct FAnimNode_RotateRootBone : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotateRootBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, BasePose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Pitch, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Yaw, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, MeshToComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, UnknownData_H35I, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotateRootBone, 0x0060);
		}

		// struct FAnimNode_RotationMultiplier : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationMultiplier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, TargetBone, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, SourceBone, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, Multiplier, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, RotationAxisToRefer, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, bIsAdditive, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, UnknownData_DKPV, 0x00A6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationMultiplier, 0x00A8);
		}

		// struct FAnimNode_BlendSpacePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpacePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, X, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Y, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Z, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PlayRate, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bLoop, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_I7D1, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, StartPosition, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendSpace, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bResetPlayTimeWhenBlendSpaceChanges, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_UGO0, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendFilter, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendSampleDataCache, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PreviousBlendSpace, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpacePlayer, 0x0128);
		}

		// struct FAnimNode_RotationOffsetBlendSpace : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationOffsetBlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, BasePose, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, LODThreshold, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, bIsLODEnabled, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_N15G, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, Alpha, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBias, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, ActualAlpha, 0x0154);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationOffsetBlendSpace, 0x0158);
		}

		// struct FAnimNode_ScaleChainLength : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ScaleChainLength)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, InputPose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, DefaultChainLength, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_PW4S, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainStartBone, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainEndBone, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainInitialLength, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_HY84, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, TargetLocation, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, Alpha, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ActualAlpha, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, AlphaScaleBias, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, bBoneIndicesCached, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_D7X9, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ScaleChainLength, 0x00B8);
		}

		// struct FAnimNode_SequenceEvaluator : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SequenceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, Sequence, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ExplicitTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bShouldLoop, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bTeleportToExplicitTime, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_20QA, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, StartPosition, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ReinitializationBehavior, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bReinitialized, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_0GL7, 0x006E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequenceEvaluator, 0x0070);
		}

		// struct FAnimNode_Slot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Slot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, Source, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, SlotName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, bAlwaysUpdateSourcePose, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, UnknownData_EEGT, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Slot, 0x0068);
		}

		// struct FSplineIKCachedBoneData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SplineIKCachedBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, RefSkeletonIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, UnknownData_7GZR, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineIKCachedBoneData, 0x0020);
		}

		// struct FAnimNode_SplineIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SplineIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, StartBone, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, EndBone, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, BoneAxis, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, bAutoCalculateSpline, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_7HAR, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, PointCount, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, ControlPoints, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Roll, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistStart, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistEnd, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_67WM, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistBlend, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Stretch, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Offset, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_AZOC, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, BoneSpline, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, OriginalSplineLength, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_C1TA, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, CachedBoneReferences, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, CachedBoneLengths, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, CachedOffsetRotations, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SplineIK, 0x0210);
		}

		// struct FAnimNode_SpringBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SpringBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringBone, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bLimitDisplacement, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_Z75D, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, MaxDisplacement, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringStiffness, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringDamping, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, ErrorResetThresh, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bNoZSpring, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bTranslateX, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bTranslateY, 0x009E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bTranslateZ, 0x009F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bRotateX, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bRotateY, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, bRotateZ, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_89UE, 0x00A3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SpringBone, 0x00D8);
		}

		// struct FAnimNode_Trail : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailBone, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainLength, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainBoneAxis, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, bInvertChainBoneAxis, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_VY3N, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailRelaxation, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_NMMN, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailRelaxationSpeed, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, bLimitStretch, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_3TXB, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, StretchLimit, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, FakeVelocity, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, bActorSpaceFakeVel, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_LOVU, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, BaseJoint, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_25QG, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Trail, 0x01B0);
		}

		// struct FAnimNode_MakeDynamicAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MakeDynamicAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, base, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Additive, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, bMeshSpaceAdditive, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, UnknownData_X60Z, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MakeDynamicAdditive, 0x0068);
		}

		// struct FAnimNode_ModifyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, BoneToModify, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Translation, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Rotation, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Scale, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationMode, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationMode, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleMode, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationSpace, 0x00AF);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationSpace, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleSpace, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, UnknownData_MUTD, 0x00B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyBone, 0x00B8);
		}

		// struct FAnimNode_ModifyCurve : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, SourcePose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, ApplyMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_9LAI, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveValues, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveNames, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, Alpha, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_2WK0, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyCurve, 0x0078);
		}

		// struct FAnimNode_MultiWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MultiWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, Poses, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, DesiredAlphas, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bAdditiveNode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bNormalizeAlpha, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_16Z4, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, AlphaScaleBias, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_YA3Z, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MultiWayBlend, 0x0070);
		}

		// struct FAnimNode_ObserveBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ObserveBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, BoneToObserve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, DisplaySpace, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, bRelativeToRefPose, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, UnknownData_3BOQ, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Translation, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Rotation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Scale, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ObserveBone, 0x00B0);
		}

		// struct FAnimNode_PoseBlendNode : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseBlendNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, SourcePose, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, BlendOption, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, UnknownData_44GY, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, CustomCurve, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseBlendNode, 0x00C8);
		}

		// struct FAnimNode_HandIKRetargeting : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_HandIKRetargeting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandFK, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandFK, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandIK, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandIK, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, IKBonesToMove, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, HandFKWeight, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, UnknownData_7S57, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_HandIKRetargeting, 0x00E8);
		}

		// struct FAnimNode_LayeredBoneBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LayeredBoneBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BasePose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendPoses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LayerSetup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendWeights, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceRotationBlend, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, CurveBlendOption, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bBlendRootMotionBasedOnRootBone, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bHasRelevantPoses, 0x007B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_PWOB, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, PerBoneBlendWeights, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, SkeletonGuid, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, VirtualBoneGuid, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_LXKX, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LayeredBoneBlend, 0x00E0);
		}

		// struct FAnimLegIKDefinition
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, IKFootBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FKFootBone, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, NumBonesInLimb, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FootBoneForwardAxis, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableRotationLimit, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, UnknownData_SXCB, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, MinRotationAngle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableKneeTwistCorrection, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, UnknownData_176V, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKDefinition, 0x0040);
		}

		// struct FAnimLegIKData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKData, UnknownData_RN1V, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKData, 0x0070);
		}

		// struct FAnimNode_LegIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LegIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, ReachPrecision, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, MaxIterations, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, LegsDefinition, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, LegsData, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LegIK, 0x0098);
		}

		// struct FIKChain
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChain, UnknownData_DB58, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChain, 0x0030);
		}

		// struct FIKChainLink
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChainLink, UnknownData_1OML, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChainLink, 0x001C);
		}

		// struct FAnimNode_LookAt : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, BoneToModify, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtBone, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtSocket, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_HYQ9, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtTarget, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtLocation, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtAxis, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_CVCK, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, CustomLookAtAxis, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAt_Axis, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, bUseLookUpAxis, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookUpAxis, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_6PE1, 0x013E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, CustomLookUpAxis, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookUp_Axis, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtClamp, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationType, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_307I, 0x0161);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTime, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTriggerThreashold, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_MY2J, 0x016C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LookAt, 0x01A0);
		}

		// struct FConstraint
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TargetBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, OffsetOption, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TransformType, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, PerAxis, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, UnknownData_XBXY, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraint, 0x0020);
		}

		// struct FAnimNode_Constraint : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, BoneToModify, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintSetup, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintWeights, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, UnknownData_4RK8, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Constraint, 0x00B8);
		}

		// struct FAnimNode_CopyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, SourceBone, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, TargetBone, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyTranslation, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyRotation, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyScale, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, ControlSpace, 0x00A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, UnknownData_EH76, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBone, 0x00A8);
		}

		// struct FAnimNode_CopyBoneDelta : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBoneDelta)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, SourceBone, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TargetBone, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyTranslation, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyRotation, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyScale, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, CopyMode, 0x00A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TranslationMultiplier, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, RotationMultiplier, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, ScaleMultiplier, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBoneDelta, 0x00B0);
		}

		// struct FAnimNode_CopyPoseFromMesh : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyPoseFromMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, SourceMeshComponent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, bUseAttachedParent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, UnknownData_HDZ9, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyPoseFromMesh, 0x0098);
		}

		// struct FAnimNode_CurveSource : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CurveSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourcePose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourceBinding, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, UnknownData_8H6J, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, CurveSource, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CurveSource, 0x0068);
		}

		// struct FAnimNode_Fabrik : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Fabrik)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransformSpace, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_BUMI, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransformBone, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTarget, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorRotationSource, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_1QR3, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, TipBone, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, RootBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, Precision, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, MaxIterations, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, bEnableDebugDraw, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_LB2L, 0x0161);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Fabrik, 0x0170);
		}

		// struct FAnimPhysConstraintSetup
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysConstraintSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearXLimitType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearYLimitType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearZLimitType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_WUSZ, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMin, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularConstraintType, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, TwistAxis, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_WJKO, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, ConeAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularXAngle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularYAngle, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularZAngle, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMax, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTargetAxis, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_HM82, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTarget, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, bLinearFullyLocked, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_QP2P, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysConstraintSetup, 0x005C);
		}

		// struct FAnimPhysPlanarLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysPlanarLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, UnknownData_T52V, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, PlaneTransform, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysPlanarLimit, 0x0050);
		}

		// struct FAnimPhysSphericalLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysSphericalLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, SphereLocalOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitRadius, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, UnknownData_9D9G, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysSphericalLimit, 0x0030);
		}

		// struct FAnimNode_AnimDynamics : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AnimDynamics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SimulationSpace, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_BPDW, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RelativeSpaceBone, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bChain, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_H63E, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoundBone, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ChainEnd, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoxExtents, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LocalJointOffset, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityScale, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bLinearSpring, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bAngularSpring, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_PB5B, 0x00E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearSpringConstant, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularSpringConstant, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bEnableWind, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bWindWasEnabled, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_RKYN, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, WindScale, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bOverrideLinearDamping, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_8I8B, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearDampingOverride, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bOverrideAngularDamping, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_GJFD, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularDampingOverride, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bOverrideAngularBias, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_NHEP, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularBiasOverride, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bDoUpdate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bDoEval, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_2EM6, 0x0112);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPreUpdate, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPostUpdate, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ConstraintSetup, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bUsePlanarLimit, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_DGFC, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, PlanarLimits, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bUseSphericalLimits, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_LFAG, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphericalLimits, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, CollisionType, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_55X0, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphereCollisionRadius, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ExternalForce, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_L2WM, 0x01BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AnimDynamics, 0x0280);
		}

		// struct FAnimNode_ApplyAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, base, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Additive, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Alpha, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBias, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, LODThreshold, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, ActualAlpha, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_TFFT, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyAdditive, 0x0078);
		}

		// struct FBlendBoneByChannelEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BlendBoneByChannelEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, SourceBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, TargetBone, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendTranslation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendRotation, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendScale, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, UnknownData_589R, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendBoneByChannelEntry, 0x0038);
		}

		// struct FAnimNode_BlendBoneByChannel : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendBoneByChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, A, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, B, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, Alpha, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, AlphaScaleBias, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_8E2L, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, BoneDefinitions, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, TransformsSpace, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_SLJ6, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, InternalBlendAlpha, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, bBIsRelevant, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_2K0K, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, ValidBoneEntries, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendBoneByChannel, 0x00A0);
		}

		// struct FAnimNode_BlendListBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendPose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_ZJCP, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, CustomBlendCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendProfile, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, Blends, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendWeights, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, RemainingBlendTimes, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, LastActiveChildIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_87DW, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, PerBoneSampleData, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_IJ6V, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, bResetChildOnActivation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_IB9F, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListBase, 0x00C8);
		}

		// struct FAnimNode_BlendListByBool : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, bActiveValue, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, UnknownData_HY4N, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByBool, 0x00D0);
		}

		// struct FAnimNode_BlendListByEnum : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, EnumToPoseIndex, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, ActiveEnumValue, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, UnknownData_XWO2, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByEnum, 0x00E0);
		}

		// struct FAnimNode_BlendListByInt : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, ActiveChildIndex, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, UnknownData_GAL1, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByInt, 0x00D0);
		}

		// struct FAnimNode_BlendSpaceEvaluator : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpaceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, NormalizedTime, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, UnknownData_YV2U, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpaceEvaluator, 0x0130);
		}

		// struct FAnimNode_BoneDrivenController : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BoneDrivenController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceBone, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceComponent, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_IT7L, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DrivingCurve, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, Multiplier, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, bUseRange, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_87HE, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMin, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMax, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMin, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMax, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DestinationMode, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_RED9, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ParameterName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, TargetBone, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, TargetComponent, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_WZTI, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_IVJ8, 0x00DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ModificationMode, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_8PI5, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BoneDrivenController, 0x00E8);
		}

		// struct FAnimNode_AimOffsetLookAt : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AimOffsetLookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, BasePose, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LODThreshold, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, bIsLODEnabled, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_KGL1, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LookAtLocation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_HG8U, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SourceSocketName, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, PivotSocketName, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SocketAxis, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, Alpha, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SocketBoneReference, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SocketLocalTransform, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, PivotSocketBoneReference, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_Z1OG, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, PivotSocketLocalTransform, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AimOffsetLookAt, 0x0210);
		}

		// struct FS_InventorySlot
		TEST_METHOD(UserDefinedStruct__S_InventorySlot__S_InventorySlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_InventorySlot, ID_4_340772D04D70545DE09183A029DA12F0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_InventorySlot, Contains anything_10_963692F9422C71082FE89B8E06372C05, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_InventorySlot, UnknownData_KRDA, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_InventorySlot, ContainsLootType_15_D7C8A8C24F32235BC69C40B03F5A79FF, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_InventorySlot, Isempty_1_400333D44E463F605AE76CBA113F23EC, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_InventorySlot, UnknownData_U485, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_InventorySlot, LootCargo_19_CA09E10947657EF5719956A82B11BB8C, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_InventorySlot, 0x0024);
		}

		// struct FZ_SlotStr
		TEST_METHOD(UserDefinedStruct__Z_SlotStr__Z_SlotStr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_SlotStr, Category_14_F3B8113E4228C4B0110C26AF74047ACA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_SlotStr, SubCategory_15_5A2A803D4424E6E86EF7D59FA524E98D, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_SlotStr, LootTypeOnly_5_EBC8983F42D37783ADD4969CBC1A2C92, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_SlotStr, EquipTypeOnly_20_F8F30D7049E100DC91F0AFB44CB8FC0A, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_SlotStr, EquipSocketOnly_23_6429077546ED40E7039AC2A3AA287CB3, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_SlotStr, UnknownData_4RKD, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_SlotStr, Name_10_61061630458D5E3E7438C28C844178D3, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_SlotStr, Description_11_AD72B5E94FC036FE421569A340B3030C, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_SlotStr, IsEqip_17_965AA58F414A353F89C186A144780614, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_SlotStr, IsAttach_25_EFA5C15D4FD3685C6F7D60A8C36E1FDF, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_SlotStr, UnknownData_WTAV, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_SlotStr, AttachParentIndex_28_3D2989D64FDEE6FC9BCB649B2A451006, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_SlotStr, IsBlock_30_18C7856F4611E623D53237B065736C5B, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FZ_SlotStr, 0x0049);
		}

		// struct FPresetChangeInfo
		TEST_METHOD(UserDefinedStruct__PresetChangeInfo__PresetChangeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPresetChangeInfo, ReloadSelected_25_165DD8E44AE6D7882C2F5ABE35BF41BA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPresetChangeInfo, UnknownData_ZE2X, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPresetChangeInfo, Selected_16_785F8D8944070D067940B8B6B53E25FC, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPresetChangeInfo, Mode_17_A4BD793844A78E1A22E2778BB14BE206, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPresetChangeInfo, UnknownData_L64D, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPresetChangeInfo, TransitionDuration_19_73F6782E4DE8FB03600ECFBBB894BC0B, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPresetChangeInfo, TransitionFunc_18_88BE11474DF134CA5C3E6190B2940A25, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPresetChangeInfo, UnknownData_T2Y3, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPresetChangeInfo, ChangeAfterTime_21_BF5A190D458432A5BC9B168EA48AE7ED, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPresetChangeInfo, 0x0018);
		}

		// struct FVaRestCallResponse
		TEST_METHOD(ScriptStruct__VaRestPlugin__VaRestCallResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVaRestCallResponse, Request, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVaRestCallResponse, WorldContextObject, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVaRestCallResponse, Callback, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVaRestCallResponse, UnknownData_I2AK, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVaRestCallResponse, 0x0030);
		}

		// struct FInAppPurchaseProductRequest
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, UnknownData_7OCO, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest, 0x0018);
		}

		// struct FInAppPurchaseRestoreInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseRestoreInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, ReceiptData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, TransactionIdentifier, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo, 0x0030);
		}

		// struct FInAppPurchaseProductInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, UnknownData_NZRL, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, ReceiptData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo, 0x00A8);
		}

		// struct FNamedInterfaceDef
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterfaceDef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceClassName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterfaceDef, 0x0018);
		}

		// struct FNamedInterface
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceObject, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterface, 0x0010);
		}

		// struct FCv2_HouseStructure
		TEST_METHOD(UserDefinedStruct__Cv2_HouseStructure__Cv2_HouseStructure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_HouseStructure, StaticMesh_6_CDDAE55A471F9E8F11DEFD9579D68956, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_HouseStructure, DestructibleMesh_5_668B91DC454F21DA068D978E333B85A0, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_HouseStructure, Coords_11_DC42ADB0435A0CB4BE2D42B1B43732B1, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCv2_HouseStructure, 0x001C);
		}

		// struct FMediaCaptureDevice
		TEST_METHOD(ScriptStruct__MediaAssets__MediaCaptureDevice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, URL, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaCaptureDevice, 0x0028);
		}

		// struct FCV2_CharacterTypeStructure
		TEST_METHOD(UserDefinedStruct__CV2_CharacterTypeStructure__CV2_CharacterTypeStructure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCV2_CharacterTypeStructure, Enum_28_5FC41C134A02F066FEE3B595D00396FC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCV2_CharacterTypeStructure, Nation_2_0D36D5F249E61E9FABF71FB3CE76CACE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCV2_CharacterTypeStructure, Specialization_19_C2BADFB44F2953A4B37CB29F39C09652, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCV2_CharacterTypeStructure, PrymaryWeapon_10_D55CF59B40969128F59DF992F3538DEF, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCV2_CharacterTypeStructure, SecondaryWeapon_12_2FB0746A4CB9122278F457A9BAF1D229, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCV2_CharacterTypeStructure, Male_14_1F43E9D04E6F78B8982E4E9AE2584940, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCV2_CharacterTypeStructure, UnknownData_VMKN, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCV2_CharacterTypeStructure, EquipmentLoot_18_926A86A746F38DCCF20FA2BF493CBD2F, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCV2_CharacterTypeStructure, CharacterMesh_22_91A362E74F9B4341AAA34A96D78F44F7, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCV2_CharacterTypeStructure, CharacterMaterial_38_C929886349398BC46A536BB5E8C1D556, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCV2_CharacterTypeStructure, MaterialIndex_56_040EA5C04A36E0167F17C395FBE78A8C, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCV2_CharacterTypeStructure, UnknownData_3KPO, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCV2_CharacterTypeStructure, TypeName_25_20E1B8634D3A9834457E32BE487C8789, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCV2_CharacterTypeStructure, CharacterLevel_31_0994E4414355B61583B42287ECF18A51, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCV2_CharacterTypeStructure, Scope_59_72E734A346B972A37602E9A78A762572, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCV2_CharacterTypeStructure, HelmetItem_34_24D5E6B04913E7627D268DBDFE0910DD, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCV2_CharacterTypeStructure, GrenadeItem_41_4F6B8F7743CEB235B99E99B615872835, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCV2_CharacterTypeStructure, UnknownData_WXS9, 0x004F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCV2_CharacterTypeStructure, HandsMesh_47_E3A66FA84C339EC1AC5F42B520102612, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCV2_CharacterTypeStructure, HandsMaterial_48_2EBB88184393144D6DBE11BEDEA41A35, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCV2_CharacterTypeStructure, DLCID_51_96C3C7F6447EF4779204BABFC0343C27, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCV2_CharacterTypeStructure, MinimumLevel_53_0012E3164F6F87D0F71B848F31570F7B, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCV2_CharacterTypeStructure, RespawnTime_62_6932B35844431292C7FA489003128A78, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCV2_CharacterTypeStructure, 0x006C);
		}

		// struct FGUI_ChatMessageStructure
		TEST_METHOD(UserDefinedStruct__GUI_ChatMessageStructure__GUI_ChatMessageStructure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_ChatMessageStructure, Autor_2_C30169C74FF466C7A7DC31B5F870745B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_ChatMessageStructure, MessageText_4_AA11829D4BB72A8EF9921D9ADE1FEDF1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_ChatMessageStructure, Side_7_A28D2C3B473B6E528440A5A3653ADF0B, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_ChatMessageStructure, MessageType_10_DE32099E47777C911884C1B0C79C9ADF, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_ChatMessageStructure, UnknownData_YYAT, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_ChatMessageStructure, Color_13_7F0B10044E9E4FC88AA8278A51CCFDC2, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGUI_ChatMessageStructure, 0x0044);
		}

		// struct FInputModeStructure
		TEST_METHOD(UserDefinedStruct__InputModeStructure__InputModeStructure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputModeStructure, InputMode_2_996B8E284C87EEB927AA308D474BCFDA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputModeStructure, ShowMouseCursor_5_8279DBE546D3AB9253BAF5803805E053, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputModeStructure, UnknownData_5R5B, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputModeStructure, FocuseToWidget_8_5BE8DE63485269D895F0DC9B45B06EB4, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputModeStructure, Parent_10_0C8F0BDD42CB909AFB8F0893282D68A5, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputModeStructure, 0x0018);
		}

		// struct FCv3_ScopesStructure
		TEST_METHOD(UserDefinedStruct__Cv3_ScopesStructure__Cv3_ScopesStructure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_ScopesStructure, ScopeEnum_8_0B73B97644681018442E6C8B016AF3D5, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_ScopesStructure, UnknownData_R6K6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_ScopesStructure, FPSMesh_6_9ACDE2E040D1E4299638E385062069F7, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_ScopesStructure, TPSMesh_7_65B8F5BC499189DF693749B1FCB6737A, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCv3_ScopesStructure, 0x0018);
		}

		// struct FClothVertBoneData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothVertBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, NumInfluences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneIndices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneWeights, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothVertBoneData, 0x0034);
		}

		// struct FClothParameterMask_PhysMesh
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothParameterMask_PhysMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, MaskName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, CurrentTarget, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, UnknownData_TPET, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, MaxValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, MinValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, UnknownData_XKP8, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, bEnabled, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_PhysMesh, UnknownData_HFEU, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothParameterMask_PhysMesh, 0x0030);
		}

		// struct FClothPhysicalMeshData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothPhysicalMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Vertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Normals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Indices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxDistances, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopDistances, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopRadiuses, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, InverseMasses, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BoneData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxBoneWeights, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, NumFixedVerts, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, SelfCollisionIndices, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicalMeshData, 0x0098);
		}

		// struct FClothConstraintSetup
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothConstraintSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetup, 0x0010);
		}

		// struct FClothConfig
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, WindMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, UnknownData_9JR5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, VerticalConstraintConfig, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, HorizontalConstraintConfig, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, BendConstraintConfig, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, ShearConstraintConfig, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, SelfCollisionRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, SelfCollisionStiffness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, SelfCollisionCullScale, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, Damping, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, Friction, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, WindDragCoefficient, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, WindLiftCoefficient, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, LinearDrag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, AngularDrag, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, LinearInertiaScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, AngularInertiaScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, CentrifugalInertiaScale, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, SolverFrequency, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, StiffnessFrequency, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, GravityScale, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, TetherStiffness, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, TetherLimit, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig, CollisionThickness, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConfig, 0x00BC);
		}

		// struct FClothLODData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntime__ClothLODData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODData, PhysicalMeshData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODData, CollisionData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODData, UnknownData_DPWD, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothLODData, 0x00E8);
		}

		// struct FLocationServicesData
		TEST_METHOD(ScriptStruct__LocationServicesBPLibrary__LocationServicesData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Longitude, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Latitude, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, HorizontalAccuracy, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, VerticalAccuracy, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Altitude, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationServicesData, 0x0018);
		}

		// struct FCv4_SevenDaysStructure
		TEST_METHOD(UserDefinedStruct__Cv4_SevenDaysStructure__Cv4_SevenDaysStructure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv4_SevenDaysStructure, Day_2_19830CC84A67D571A351F084788422BB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv4_SevenDaysStructure, UnknownData_WF8E, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv4_SevenDaysStructure, RandomLoot_6_4BF5231E4243455F6B3FF8A6A8A38CB8, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv4_SevenDaysStructure, MoneyBonus_10_BDA385304B663A158E85988842FE1C54, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCv4_SevenDaysStructure, 0x001C);
		}

		// struct FGUI_SettingsPressets
		TEST_METHOD(UserDefinedStruct__GUI_SettingsPressets__GUI_SettingsPressets)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_SettingsPressets, Index_3_4F8AA3554748BDCA689AD29E1A987421, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_SettingsPressets, sgAntiAliasingQuality1_4_6_E68B10A34C63864C9F1A9DABED6FC1C9, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_SettingsPressets, sgEffectsQuality1_4_13_30FCCAF1461AD2C5013E1CA00B5571CE, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_SettingsPressets, sgPostProcessQuality1_4_14_18BE9D474F1ABD2DCB823990FF761728, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_SettingsPressets, sgShadowQuality1_4_15_7C3D87F648B9415581D301A88623EAF1, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_SettingsPressets, sgTextureQuality1_4_16_8CA91A9C445B5AE5194B3EA1B13DA5E0, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_SettingsPressets, sgViewDistanceQuality1_4_17_EEBDF2204E159803670DA49B5A36D0F2, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_SettingsPressets, rScreenPercentage1_100_18_194405CE4456AD76F006A492CBFD3CEA, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_SettingsPressets, rMaterialQualityLevel0_1_20_788F6F5C4C3EBE54F1ACFE804829BD66, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_SettingsPressets, sgFoliageQuality3_23_6ABFE8974DCE3AC0E7B533A357A0F27E, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGUI_SettingsPressets, 0x0028);
		}

		// struct FWeaponAmmoInfoStr
		TEST_METHOD(UserDefinedStruct__WeaponAmmoInfoStr__WeaponAmmoInfoStr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponAmmoInfoStr, InWeaponAmmoCount_2_F17307AC4DE886EADC7B4BA969DF720C, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponAmmoInfoStr, InBackPakAmmoCount_4_E4FCCAB44AAE789DD05CED991D535C95, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponAmmoInfoStr, AmmoIcon_7_1947B3E442F375B8850B38BB6E84A812, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeaponAmmoInfoStr, AmmoName_10_C0641F294006E4B709168E8A72407E00, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeaponAmmoInfoStr, 0x0028);
		}

		// struct FSurvStatMoneyAward
		TEST_METHOD(UserDefinedStruct__SurvStatMoneyAward__SurvStatMoneyAward)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvStatMoneyAward, SurvStatistics_2_1F716752474CFD272A48C0B9D4402803, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvStatMoneyAward, UnknownData_ZSW6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvStatMoneyAward, MoneyCount_5_686A10C842303253C66B8B9CB5602B22, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSurvStatMoneyAward, 0x0008);
		}

		// struct FNewDB_Classical
		TEST_METHOD(UserDefinedStruct__NewDB_Classical__NewDB_Classical)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Classical, viewer_id_12_F4C40EAD4F3ECFBE41F5B0A529FCF650, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Classical, item_name_22_21224C3549A5D7C827B60DA7DA1D6AD4, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Classical, item_count_14_EA6403B341DD4DEEAF702F9032EA0240, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Classical, item_mod1_15_D3C76EEA4D7918795E919BA213B51DFE, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Classical, item_mod2_16_2AD8F7D5472A747AFCEBA6B466E262EA, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Classical, location_63_441896C542FF6448D443FEB00B9444BB, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Classical, surv_coins_64_DA2CEA13415ADA838D13AB9954DD46ED, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Classical, ice_coins_65_0DB82FAA4149C651F0F53DAB9388CC6C, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Classical, max_surv_coins_66_00880A904CEDA0C2982AFCA0C16D894A, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Classical, max_surv_coins_date_69_92E4EDF142541FD2B9E120B1D9261E58, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Classical, bunker_id_72_D4014C09475B193BCB617F929BB786B6, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Classical, PlayerState_75_3028EF204E72F67400BECEA4B7F9F838, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Classical, Magazine_79_4280D09D44C5B4934F9192A8B5B1B884, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNewDB_Classical, 0x00D0);
		}

		// struct FBOT_CreaturesStructure
		TEST_METHOD(UserDefinedStruct__BOT_CreaturesStructure__BOT_CreaturesStructure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBOT_CreaturesStructure, HitPoints_7_123D3A16440B1B4AFCA5EA87C19A4E63, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBOT_CreaturesStructure, SpeedWalk_11_3F6C1BAB450DA72E720960B41FFB4BE3, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBOT_CreaturesStructure, SpeedRun_12_866D8C0F41436241AAAF5391B90E37C9, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBOT_CreaturesStructure, Damage_40_07160FB84B9ECD68BBE19A86AC271E44, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBOT_CreaturesStructure, AttackDelay_42_B63690D24E298CA9C0329B9CB483B116, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBOT_CreaturesStructure, Range_50_0A0A6D6A42A610B5CC2CA4A7363EAD34, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBOT_CreaturesStructure, SkeletalMesh_20_AE8937AC4CF939A31A552D9AA372922F, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBOT_CreaturesStructure, AnimBP_22_550761374317FA04E75FD79B570002DB, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBOT_CreaturesStructure, DeathAnimBP_58_2DC4E1CF411DA630691788AE62F3DC9B, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBOT_CreaturesStructure, AttackMontages_54_CA51C2294FC8467B455E78BC6E1CFCB9, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBOT_CreaturesStructure, HitMontages_55_D435F1CD4227144DD6DD5C82E9B84873, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBOT_CreaturesStructure, AlarmMontages_68_5C922DC94C2696434DC89CB408B74CBB, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBOT_CreaturesStructure, SoundAttack_33_DA6B1EC04FED0AF5947235A0B86650AA, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBOT_CreaturesStructure, SoundAlarm_31_D8CC59DA4C72E281AFBA99941EC1A37C, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBOT_CreaturesStructure, SoundHit_32_AA52A2C24A6B178A6C4628A83967BE6E, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBOT_CreaturesStructure, SoundDeath_75_2B39C06C482364CA3A881FA7DB0D683F, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBOT_CreaturesStructure, ScaleCreature_64_94F8167C4C7CEBCD78814DBA417FDCC4, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBOT_CreaturesStructure, UnknownData_XFDF, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBOT_CreaturesStructure, HeadBoneName_72_452747AD4EA0EF6DA34A3EBD6CB67B6B, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBOT_CreaturesStructure, LootArray_80_D9F6A6164088F493BD78CFBD767AE03E, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBOT_CreaturesStructure, isNPC_82_AA46AFF74D42E4E462E25D8BA53CAB0C, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBOT_CreaturesStructure, 0x00A1);
		}

		// struct FCv3_PlayerTakeLootStructure
		TEST_METHOD(UserDefinedStruct__Cv3_PlayerTakeLootStructure__Cv3_PlayerTakeLootStructure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_PlayerTakeLootStructure, UniqID_5_D6E785F94ACFE40FE1D065A2D772142C, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_PlayerTakeLootStructure, GameTime_4_88A7BBE24137C5EC0F4947941337EE9F, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCv3_PlayerTakeLootStructure, 0x0024);
		}

		// struct FCameraFilmbackSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFilmbackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorAspectRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFilmbackSettings, 0x000C);
		}

		// struct FNamedFilmbackPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedFilmbackPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, FilmbackSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, UnknownData_GKCT, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFilmbackPreset, 0x0020);
		}

		// struct FCameraTrackingFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraTrackingFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, ActorToTrack, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, RelativeOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, UnknownData_PTR0, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraTrackingFocusSettings, 0x0018);
		}

		// struct FCameraLensSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFocalLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFocalLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFStop, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFStop, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinimumFocusDistance, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLensSettings, 0x0014);
		}

		// struct FNamedLensPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedLensPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, LensSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, UnknownData_91UN, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedLensPreset, 0x0028);
		}

		// struct FCameraLookatTrackingSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLookatTrackingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_YLX4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, LookAtTrackingInterpSpeed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_WZSL, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, ActorToTrack, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, RelativeOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_6FIX, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLookatTrackingSettings, 0x0030);
		}

		// struct FCameraFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_ZZRR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, ManualFocusDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, TrackingFocusSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_8QEJ, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, DebugFocusPlaneColor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_QJ5O, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusSmoothingInterpSpeed, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_LF47, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFocusSettings, 0x0038);
		}

		// struct FGUI_MapSettings
		TEST_METHOD(UserDefinedStruct__GUI_MapSettings__GUI_MapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_MapSettings, MapName_2_ADF1577042CD6EC6A015578D8CB3BCDF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_MapSettings, MapTexture_8_192A6A8E47236F0C5F63439C75777BE4, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_MapSettings, MoveDirection_5_234BCD2040E0102B33C0B2B3BC4524A8, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_MapSettings, Season_11_FAA8006940D26A04A2818BADE2984654, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_MapSettings, UnknownData_WKJN, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_MapSettings, MiniMapBaseScale_16_C46D38574FDECFF8F2DCAFAB0CFDEEB2, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGUI_MapSettings, 0x0024);
		}

		// struct FNewDB_Inventory
		TEST_METHOD(UserDefinedStruct__NewDB_Inventory__NewDB_Inventory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Inventory, viewer_id_12_F4C40EAD4F3ECFBE41F5B0A529FCF650, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Inventory, item_name_22_21224C3549A5D7C827B60DA7DA1D6AD4, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Inventory, item_count_14_EA6403B341DD4DEEAF702F9032EA0240, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Inventory, item_mod1_15_D3C76EEA4D7918795E919BA213B51DFE, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Inventory, item_mod2_16_2AD8F7D5472A747AFCEBA6B466E262EA, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Inventory, base_item_name_17_441896C542FF6448D443FEB00B9444BB, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Inventory, base_item_count_18_DA2CEA13415ADA838D13AB9954DD46ED, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Inventory, base_item_mod1_19_0DB82FAA4149C651F0F53DAB9388CC6C, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Inventory, base_item_mod2_20_00880A904CEDA0C2982AFCA0C16D894A, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNewDB_Inventory, 0x0090);
		}

		// struct FGameplayResourceSet
		TEST_METHOD(ScriptStruct__GameplayTasks__GameplayResourceSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayResourceSet, UnknownData_1ULH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayResourceSet, 0x0002);
		}

		// struct FHelmetsCorrectPosStructure
		TEST_METHOD(UserDefinedStruct__HelmetsCorrectPosStructure__HelmetsCorrectPosStructure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelmetsCorrectPosStructure, LocationHelmet_4_3EC8F2B248298357690616BB53222A22, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelmetsCorrectPosStructure, ScaleHelmet_9_F255D6A14DBD7E30746325B3B48D4B9C, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHelmetsCorrectPosStructure, 0x0018);
		}

		// struct FWidgetTransform
		TEST_METHOD(ScriptStruct__UMG__WidgetTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Shear, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Angle, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetTransform, 0x001C);
		}

		// struct FShapedTextOptions
		TEST_METHOD(ScriptStruct__UMG__ShapedTextOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, UnknownData_VJ6I, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextShapingMethod, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextFlowDirection, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, UnknownData_R9WM, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShapedTextOptions, 0x0008);
		}

		// struct FEventReply
		TEST_METHOD(ScriptStruct__UMG__EventReply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventReply, UnknownData_ATI4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventReply, 0x00B8);
		}

		// struct FPropertyPathSegment
		TEST_METHOD(ScriptStruct__UMG__PropertyPathSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, UnknownData_LEZT, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Struct, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Field, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyPathSegment, 0x0020);
		}

		// struct FDynamicPropertyPath
		TEST_METHOD(ScriptStruct__UMG__DynamicPropertyPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicPropertyPath, Segments, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicPropertyPath, 0x0010);
		}

		// struct FAnchorData
		TEST_METHOD(ScriptStruct__UMG__AnchorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Offsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Anchors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Alignment, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchorData, 0x0028);
		}

		// struct FSlateChildSize
		TEST_METHOD(ScriptStruct__UMG__SlateChildSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, SizeRule, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, UnknownData_53XP, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateChildSize, 0x0008);
		}

		// struct FMovieScene2DTransformSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieScene2DTransformSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Translation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Rotation, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Scale, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Shear, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, BlendType, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, UnknownData_1WAF, 0x0359);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene2DTransformSectionTemplate, 0x0360);
		}

		// struct FMovieSceneMarginSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneMarginSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, TopCurve, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, LeftCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, RightCurve, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BottomCurve, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BlendType, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, UnknownData_9CWS, 0x0209);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarginSectionTemplate, 0x0210);
		}

		// struct FMovieSceneWidgetMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneWidgetMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWidgetMaterialSectionTemplate, BrushPropertyNamePath, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWidgetMaterialSectionTemplate, 0x0060);
		}

		// struct FSlateMeshVertex
		TEST_METHOD(ScriptStruct__UMG__SlateMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV2, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV3, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV4, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV5, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateMeshVertex, 0x003C);
		}

		// struct FNamedSlotBinding
		TEST_METHOD(ScriptStruct__UMG__NamedSlotBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Content, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedSlotBinding, 0x0010);
		}

		// struct FPaintContext
		TEST_METHOD(ScriptStruct__UMG__PaintContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintContext, UnknownData_S3IU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintContext, 0x0030);
		}

		// struct FWidgetAnimationBinding
		TEST_METHOD(ScriptStruct__UMG__WidgetAnimationBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, WidgetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, SlotWidgetName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, AnimationGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, bIsRootWidget, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, UnknownData_E7RG, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetAnimationBinding, 0x0028);
		}

		// struct FDelegateRuntimeBinding
		TEST_METHOD(ScriptStruct__UMG__DelegateRuntimeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, PropertyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, SourcePath, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, Kind, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, UnknownData_5X04, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateRuntimeBinding, 0x0038);
		}

		// struct FWidgetNavigationData
		TEST_METHOD(ScriptStruct__UMG__WidgetNavigationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Rule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, UnknownData_7UB1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, WidgetToFocus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Widget, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetNavigationData, 0x0018);
		}

		// struct FDestructibleSpecialHierarchyDepths
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleSpecialHierarchyDepths)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, SupportDepth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, MinimumFractureDepth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, bEnableDebris, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, UnknownData_XQWZ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, DebrisDepth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, EssentialDepth, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleSpecialHierarchyDepths, 0x0014);
		}

		// struct FDestructibleAdvancedParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleAdvancedParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, DamageCap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, ImpactVelocityThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, MaxChunkSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, FractureImpulseScale, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleAdvancedParameters, 0x0010);
		}

		// struct FDestructibleDebrisParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleDebrisParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisLifetimeMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisLifetimeMax, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisMaxSeparationMin, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisMaxSeparationMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, ValidBounds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDebrisParameters, 0x002C);
		}

		// struct FDestructibleDamageParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleDamageParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DamageThreshold, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DamageSpread, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, bEnableImpactDamage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, UnknownData_FQRH, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, ImpactDamage, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DefaultImpactDamageDepth, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, bCustomImpactResistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, UnknownData_QXES, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, ImpactResistance, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDamageParameters, 0x001C);
		}

		// struct FDestructibleChunkParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleChunkParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bIsSupportChunk, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotFracture, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotDamage, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotCrumble, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleChunkParameters, 0x0004);
		}

		// struct FFractureMaterial
		TEST_METHOD(ScriptStruct__ApexDestruction__FractureMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UVScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UVOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, Tangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UAngle, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, InteriorElementIndex, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureMaterial, 0x0024);
		}

		// struct FDestructibleDepthParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleDepthParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDepthParameters, ImpactDamageOverride, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDepthParameters, 0x0001);
		}

		// struct FDestructibleParametersFlag
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleParametersFlag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParametersFlag, UnknownData_N7QH, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleParametersFlag, 0x0004);
		}

		// struct FDestructibleParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DamageParameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DebrisParameters, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, AdvancedParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, SpecialHierarchyDepths, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, UnknownData_V9VF, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DepthParameters, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, Flags, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, UnknownData_N17F, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleParameters, 0x0088);
		}

		// struct FVehicleEngineData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleEngineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, TorqueCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MaxRPM, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MOI, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateFullThrottle, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchEngaged, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchDisengaged, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, UnknownData_EYXR, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleEngineData, 0x0090);
		}

		// struct FVehicleDifferential4WData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleDifferential4WData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, DifferentialType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, UnknownData_B1D2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontRearSplit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontLeftRightSplit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearLeftRightSplit, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, CentreBias, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearBias, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleDifferential4WData, 0x001C);
		}

		// struct FWheelSetup
		TEST_METHOD(ScriptStruct__PhysXVehicles__WheelSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, WheelClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, AdditionalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, UnknownData_EYGO, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWheelSetup, 0x0020);
		}

		// struct FVehicleGearData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleGearData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, Ratio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, DownRatio, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, UpRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleGearData, 0x000C);
		}

		// struct FVehicleTransmissionData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleTransmissionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, bUseGearAutoBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_PU62, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearSwitchTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearAutoBoxLatency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, FinalRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ForwardGears, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ReverseGearRatio, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, NeutralGearUpRatio, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ClutchStrength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_QM1Y, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleTransmissionData, 0x0030);
		}

		// struct FReplicatedVehicleState
		TEST_METHOD(ScriptStruct__PhysXVehicles__ReplicatedVehicleState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, SteeringInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, ThrottleInput, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, BrakeInput, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, HandbrakeInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, CurrentGear, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedVehicleState, 0x0014);
		}

		// struct FVehicleInputRate
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleInputRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, RiseRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, FallRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleInputRate, 0x0008);
		}

		// struct FTireConfigMaterialFriction
		TEST_METHOD(ScriptStruct__PhysXVehicles__TireConfigMaterialFriction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, PhysicalMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, FrictionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, UnknownData_6WMF, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTireConfigMaterialFriction, 0x0010);
		}

		// struct FAnimNode_WheelHandler : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__PhysXVehicles__AnimNode_WheelHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_WheelHandler, UnknownData_H22V, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_WheelHandler, 0x0088);
		}

		// struct FVehicleAnimInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleAnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleAnimInstanceProxy, UnknownData_TZ48, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleAnimInstanceProxy, 0x04D0);
		}

		// struct FTankGearData
		TEST_METHOD(ScriptStruct__VehiclesPlugin__TankGearData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTankGearData, Ratio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTankGearData, DownRatio, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTankGearData, UpRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTankGearData, 0x000C);
		}

		// struct FTankEngineData
		TEST_METHOD(ScriptStruct__VehiclesPlugin__TankEngineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTankEngineData, TorqueCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTankEngineData, MaxRPM, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTankEngineData, MOI, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTankEngineData, DampingRateFullThrottle, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTankEngineData, DampingRateZeroThrottleClutchEngaged, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTankEngineData, DampingRateZeroThrottleClutchDisengaged, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTankEngineData, UnknownData_7ZDK, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTankEngineData, 0x0090);
		}

		// struct FTankTransmissionData
		TEST_METHOD(ScriptStruct__VehiclesPlugin__TankTransmissionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTankTransmissionData, bUseGearAutoBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTankTransmissionData, UnknownData_8YT0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTankTransmissionData, GearSwitchTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTankTransmissionData, GearAutoBoxLatency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTankTransmissionData, FinalRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTankTransmissionData, ForwardGears, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTankTransmissionData, ReverseGearRatio, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTankTransmissionData, NeutralGearUpRatio, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTankTransmissionData, ClutchStrength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTankTransmissionData, UnknownData_2IXV, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTankTransmissionData, 0x0030);
		}

		// struct FReplicatedTankState
		TEST_METHOD(ScriptStruct__VehiclesPlugin__ReplicatedTankState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedTankState, SteeringInputLeft, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedTankState, SteeringInputRight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedTankState, BrakeInputLeft, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedTankState, BrakeInputRight, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedTankState, 0x0010);
		}

		// struct FNewDB_PlayerState
		TEST_METHOD(UserDefinedStruct__NewDB_PlayerState__NewDB_PlayerState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_PlayerState, viewer_id_46_F44A29AB4B3AE8B884BFD191182F0654, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_PlayerState, player_money_34_81A1FA1B469BC8962CED419B7312E49A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_PlayerState, device_id_35_4E80B5404309D3EEA3FF67B170E38ACA, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_PlayerState, current_xp_36_CE4B30DF49E1D420025ED6A6321CE65A, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_PlayerState, current_lvl_37_6A1324794D909B5E1E18AEB9FB40CC7F, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_PlayerState, exit_counts_38_00B3ED564ADD71F9AEBA449AB68C8FE7, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_PlayerState, last_date_39_509CD224438AA44E6E09499C831F496E, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_PlayerState, bonus_date_40_B0B18D73486555F502DFFDAF6A15B97E, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_PlayerState, face_id_41_6827866540E67DF5EC49D0B4F52A801F, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_PlayerState, support_dlc_42_28B58A3C4CBF993A9DFB309C5FED1C65, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_PlayerState, special_forces_dlc_43_2E14E021442EC04A43FE3CA9B4080D2F, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_PlayerState, IsBan_44_C8D39D4C40145A4C2EBD5BB7026D8BE6, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_PlayerState, IsAdmin_45_6BBE34114D170121607E0690C38C5F51, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNewDB_PlayerState, 0x00D0);
		}

		// struct FLightPropagationVolumeSettings
		TEST_METHOD(ScriptStruct__Renderer__LightPropagationVolumeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, UnknownData_Y5HU, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVIntensity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVVplInjectionBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryOcclusionIntensity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryBounceIntensity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVGeometryVolumeBias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVEmissiveInjectionIntensity, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionIntensity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionRadius, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionExponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionExponent, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionIntensity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionIntensity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVFadeRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionFadeRange, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightPropagationVolumeSettings, 0x0040);
		}

		// struct FSpriteInstanceData
		TEST_METHOD(ScriptStruct__Paper2D__SpriteInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, SourceSprite, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, VertexColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, MaterialIndex, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteInstanceData, 0x0050);
		}

		// struct FPaperSpriteSocket
		TEST_METHOD(ScriptStruct__Paper2D__PaperSpriteSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, LocalTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, UnknownData_E8OE, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperSpriteSocket, 0x0040);
		}

		// struct FPaperSpriteAtlasSlot
		TEST_METHOD(ScriptStruct__Paper2D__PaperSpriteAtlasSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, SpriteRef, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, AtlasIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, X, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Y, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Width, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Height, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, UnknownData_BBO8, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperSpriteAtlasSlot, 0x0040);
		}

		// struct FPaperTerrainMaterialRule
		TEST_METHOD(ScriptStruct__Paper2D__PaperTerrainMaterialRule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, StartCap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, EndCap, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, MinimumAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, MaximumAngle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, bEnableCollision, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, UnknownData_1JN5, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, CollisionOffset, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, DrawOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, UnknownData_4OT2, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTerrainMaterialRule, 0x0038);
		}

		// struct FPaperTileInfo
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, TileSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, PackedTileIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, UnknownData_WMGH, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileInfo, 0x0010);
		}

		// struct FPaperTileSetTerrain
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileSetTerrain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, TerrainName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, CenterTileIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, UnknownData_JGPN, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileSetTerrain, 0x0018);
		}

		// struct FSpriteGeometryShape
		TEST_METHOD(ScriptStruct__Paper2D__SpriteGeometryShape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, ShapeType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, UnknownData_02ON, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, Vertices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, BoxSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, BoxPosition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, bNegativeWinding, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, UnknownData_LPDQ, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteGeometryShape, 0x0030);
		}

		// struct FSpriteGeometryCollection
		TEST_METHOD(ScriptStruct__Paper2D__SpriteGeometryCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, Shapes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, GeometryType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_3D7P, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, PixelsPerSubdivisionX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, PixelsPerSubdivisionY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, bAvoidVertexMerging, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_B33V, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, AlphaThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, DetailAmount, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, SimplifyEpsilon, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_SSC7, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteGeometryCollection, 0x0030);
		}

		// struct FPaperTileMetadata
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, UserDataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, CollisionData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, TerrainMembership, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, UnknownData_1HMD, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileMetadata, 0x0040);
		}

		// struct FPaperFlipbookKeyFrame
		TEST_METHOD(ScriptStruct__Paper2D__PaperFlipbookKeyFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, Sprite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, FrameRun, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, UnknownData_DYRY, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperFlipbookKeyFrame, 0x0010);
		}

		// struct FIntMargin
		TEST_METHOD(ScriptStruct__Paper2D__IntMargin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntMargin, 0x0010);
		}

		// struct FSpriteDrawCallRecord
		TEST_METHOD(ScriptStruct__Paper2D__SpriteDrawCallRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, Destination, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_A635, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, BaseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_0ABZ, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, Color, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_X2WD, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteDrawCallRecord, 0x00D0);
		}

		// struct FSpriteAssetInitParameters
		TEST_METHOD(ScriptStruct__Paper2D__SpriteAssetInitParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteAssetInitParameters, UnknownData_9LUY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteAssetInitParameters, 0x0040);
		}

		// struct FIntegerVector
		TEST_METHOD(UserDefinedStruct__IntegerVector__IntegerVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegerVector, viewer_id_5_31FE12AF495B69C4833961BCCED15905, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegerVector, Surv_Record_4_C27049CF473007EC48239D9FEE0D1C14, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegerVector, 0x0024);
		}

		// struct FFoliageVertexColorChannelMask
		TEST_METHOD(ScriptStruct__Foliage__FoliageVertexColorChannelMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_4ADN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, MaskThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_6ZQR, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageVertexColorChannelMask, 0x000C);
		}

		// struct FFoliageTypeObject
		TEST_METHOD(ScriptStruct__Foliage__FoliageTypeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, FoliageTypeObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, TypeInstance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, bIsAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, UnknownData_34VQ, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, Type, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageTypeObject, 0x0020);
		}

		// struct FProceduralFoliageInstance
		TEST_METHOD(ScriptStruct__Foliage__ProceduralFoliageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_5DF0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Age, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Scale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_LWD3, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Type, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_45V7, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProceduralFoliageInstance, 0x0060);
		}

		// struct FLatentActionInfo
		TEST_METHOD(ScriptStruct__Engine__LatentActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, Linkage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, UUID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, ExecutionFunction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, CallbackTarget, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionInfo, 0x0018);
		}

		// struct FTimerHandle
		TEST_METHOD(ScriptStruct__Engine__TimerHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimerHandle, Handle, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimerHandle, 0x0008);
		}

		// struct FCollisionProfileName
		TEST_METHOD(ScriptStruct__Engine__CollisionProfileName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionProfileName, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionProfileName, 0x0008);
		}

		// struct FGenericStruct
		TEST_METHOD(ScriptStruct__Engine__GenericStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericStruct, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericStruct, 0x0004);
		}

		// struct FUserActivity
		TEST_METHOD(ScriptStruct__Engine__UserActivity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, UnknownData_4NES, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserActivity, 0x0018);
		}

		// struct FBlendSampleData
		TEST_METHOD(ScriptStruct__Engine__BlendSampleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SampleDataIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_YJRK, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Animation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, TotalWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, PreviousTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SamplePlayRate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_BO3A, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSampleData, 0x0040);
		}

		// struct FBlendFilter
		TEST_METHOD(ScriptStruct__Engine__BlendFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendFilter, UnknownData_GNBG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendFilter, 0x0090);
		}

		// struct FSplineCurves
		TEST_METHOD(ScriptStruct__Engine__SplineCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Rotation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Scale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, ReparamTable, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineCurves, 0x0060);
		}

		// struct FAnimCurveParam
		TEST_METHOD(ScriptStruct__Engine__AnimCurveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, UnknownData_VA90, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveParam, 0x0010);
		}

		// struct FIntegralKey
		TEST_METHOD(ScriptStruct__Engine__IntegralKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralKey, 0x0008);
		}

		// struct FKeyHandleMap
		TEST_METHOD(ScriptStruct__Engine__KeyHandleMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleMap, UnknownData_UCI2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleMap, 0x0050);
		}

		// struct FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IndexedCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, UnknownData_CLDS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, KeyHandlesToIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIndexedCurve, 0x0058);
		}

		// struct FIntegralCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IntegralCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, Keys, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, bUseDefaultValueBeforeFirstKey, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, UnknownData_J5WJ, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralCurve, 0x0070);
		}

		// struct FStringCurveKey
		TEST_METHOD(ScriptStruct__Engine__StringCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, UnknownData_2ZPI, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurveKey, 0x0018);
		}

		// struct FStringCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__StringCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, Keys, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurve, 0x0078);
		}

		// struct FAnimationGroupReference
		TEST_METHOD(ScriptStruct__Engine__AnimationGroupReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupRole, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, UnknownData_QWRN, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationGroupReference, 0x0010);
		}

		// struct FAnimGroupInstance
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInstance, UnknownData_BUVV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInstance, 0x0080);
		}

		// struct FAnimTickRecord
		TEST_METHOD(ScriptStruct__Engine__AnimTickRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, UnknownData_CC0S, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTickRecord, 0x0048);
		}

		// struct FAnimationRecordingSettings
		TEST_METHOD(ScriptStruct__Engine__AnimationRecordingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordInWorldSpace, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRemoveRootAnimation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bAutoSaveAsset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_6YOF, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, SampleRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, Length, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, InterpMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, TangentMode, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_XK15, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationRecordingSettings, 0x0010);
		}

		// struct FComponentSpacePose
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePose, 0x0020);
		}

		// struct FLocalSpacePose
		TEST_METHOD(ScriptStruct__Engine__LocalSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalSpacePose, 0x0020);
		}

		// struct FNamedTransform
		TEST_METHOD(ScriptStruct__Engine__NamedTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, UnknownData_JILE, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedTransform, 0x0040);
		}

		// struct FNamedColor
		TEST_METHOD(ScriptStruct__Engine__NamedColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, UnknownData_PIMD, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Name, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedColor, 0x0010);
		}

		// struct FNamedVector
		TEST_METHOD(ScriptStruct__Engine__NamedVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, UnknownData_R3X0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Name, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedVector, 0x0018);
		}

		// struct FNamedFloat
		TEST_METHOD(ScriptStruct__Engine__NamedFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, UnknownData_5I66, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Name, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFloat, 0x0010);
		}

		// struct FAnimParentNodeAssetOverride
		TEST_METHOD(ScriptStruct__Engine__AnimParentNodeAssetOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, NewAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, ParentNodeGuid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimParentNodeAssetOverride, 0x0018);
		}

		// struct FAnimBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintDebugData, UnknownData_BWK1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintDebugData, 0x0001);
		}

		// struct FAnimationFrameSnapshot
		TEST_METHOD(ScriptStruct__Engine__AnimationFrameSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationFrameSnapshot, UnknownData_YLU1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationFrameSnapshot, 0x0001);
		}

		// struct FStateMachineDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineDebugData, UnknownData_30FY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineDebugData, 0x00B0);
		}

		// struct FRootMotionExtractionStep
		TEST_METHOD(ScriptStruct__Engine__RootMotionExtractionStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, StartPosition, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, EndPosition, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionExtractionStep, 0x0010);
		}

		// struct FSmartName
		TEST_METHOD(ScriptStruct__Engine__SmartName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, UnknownData_SGPR, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartName, 0x0010);
		}

		// struct FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__AnimCurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, LastObservedName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, CurveTypeFlags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, UnknownData_E6MX, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveBase, 0x0020);
		}

		// struct FRichCurveKey
		TEST_METHOD(ScriptStruct__Engine__RichCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, InterpMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentWeightMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, UnknownData_4F8J, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Time, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangentWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangentWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurveKey, 0x001C);
		}

		// struct FRichCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__RichCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, PreInfinityExtrap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, PostInfinityExtrap, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, UnknownData_RO8D, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, DefaultValue, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, Keys, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurve, 0x0070);
		}

		// struct FVectorCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__VectorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorCurve, FloatCurves, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorCurve, 0x0170);
		}

		// struct FTransformCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__TransformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, TranslationCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, RotationCurve, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, ScaleCurve, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformCurve, 0x0470);
		}

		// struct FSlotEvaluationPose
		TEST_METHOD(ScriptStruct__Engine__SlotEvaluationPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, AdditiveType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_WB9H, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, Weight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_H0DE, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotEvaluationPose, 0x0040);
		}

		// struct FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2Pose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2Pose, Bones, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2Pose, 0x0010);
		}

		// struct FA2CSPose : public FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2CSPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, UnknownData_YTLY, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, ComponentSpaceFlags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2CSPose, 0x0028);
		}

		// struct FQueuedDrawDebugItem
		TEST_METHOD(ScriptStruct__Engine__QueuedDrawDebugItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, ItemType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_9IT1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, StartLoc, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, EndLoc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Center, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Radius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Segments, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Color, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, bPersistentLines, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_5XF8, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, LifeTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Thickness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Message, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, TextScale, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQueuedDrawDebugItem, 0x0068);
		}

		// struct FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimLinkableElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_C4DV, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SlotIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, CachedLinkMethod, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_D0B3, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentBeginTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedSequence, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLinkableElement, 0x0030);
		}

		// struct FAnimNotifyEvent : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, DisplayTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerTimeOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndTriggerTimeOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerWeightThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Notify, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyStateClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Duration, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_SW3I, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndLink, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bConvertedFromBranchingPoint, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, MontageTickType, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_HKP5, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyTriggerChance, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_CM0Z, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterLOD, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnDedicatedServer, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_HPPO, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TrackIndex, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEvent, 0x00A8);
		}

		// struct FAlphaBlend
		TEST_METHOD(ScriptStruct__Engine__AlphaBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendOption, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_90WB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, CustomCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_GDL8, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAlphaBlend, 0x0038);
		}

		// struct FAnimMontageInstance
		TEST_METHOD(ScriptStruct__Engine__AnimMontageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Montage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_7BU8, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, bPlaying, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_IV8G, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DefaultBlendTimeMultiplier, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_35H9, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, NextSections, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PrevSections, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_HLI7, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, ActiveStateBranchingPoints, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Position, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PlayRate, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Blend, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_XKE8, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DisableRootMotionCount, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_OT8E, 0x01F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimMontageInstance, 0x0220);
		}

		// struct FVectorSpringState
		TEST_METHOD(ScriptStruct__Engine__VectorSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorSpringState, UnknownData_AO3U, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorSpringState, 0x0018);
		}

		// struct FFloatSpringState
		TEST_METHOD(ScriptStruct__Engine__FloatSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatSpringState, UnknownData_IAUN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatSpringState, 0x0008);
		}

		// struct FDrawToRenderTargetContext
		TEST_METHOD(ScriptStruct__Engine__DrawToRenderTargetContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, RenderTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, UnknownData_WR5C, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDrawToRenderTargetContext, 0x0010);
		}

		// struct FLatentActionManager
		TEST_METHOD(ScriptStruct__Engine__LatentActionManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionManager, UnknownData_465F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionManager, 0x00F0);
		}

		// struct FLayerActorStats
		TEST_METHOD(ScriptStruct__Engine__LayerActorStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Total, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, UnknownData_L5SO, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerActorStats, 0x0010);
		}

		// struct FMaterialProxySettings
		TEST_METHOD(ScriptStruct__Engine__MaterialProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSizingType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_4M7O, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, GutterSpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bNormalMap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bMetallicMap, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_PVW2, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicConstant, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bRoughnessMap, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_261T, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessConstant, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bSpecularMap, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_C7XI, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularConstant, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bEmissiveMap, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bOpacityMap, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_7BZS, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityConstant, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bOpacityMaskMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_PRHG, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskConstant, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, bAmbientOcclusionMap, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_I822, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionConstant, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, DiffuseTextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, NormalTextureSize, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicTextureSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessTextureSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularTextureSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, EmissiveTextureSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityTextureSize, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskTextureSize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionTextureSize, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MaterialMergeType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, BlendMode, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_F80O, 0x008A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialProxySettings, 0x008C);
		}

		// struct FLevelSimplificationDetails
		TEST_METHOD(ScriptStruct__Engine__LevelSimplificationDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bCreatePackagePerAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_D8TT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, DetailsPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, StaticMeshMaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bOverrideLandscapeExportLOD, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_YFNM, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeExportLOD, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeMaterialSettings, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeFoliageToLandscape, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeGrassToLandscape, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshNormalMap, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshMetallicMap, 0x012B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshRoughnessMap, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshSpecularMap, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeNormalMap, 0x012E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeMetallicMap, 0x012F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeRoughnessMap, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeSpecularMap, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_SFU3, 0x0132);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSimplificationDetails, 0x0134);
		}

		// struct FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__StreamableTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamableTextureInstance, UnknownData_XONK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamableTextureInstance, 0x0028);
		}

		// struct FDynamicTextureInstance : public FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__DynamicTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, Texture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, bAttached, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, UnknownData_PIEA, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, OriginalRadius, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicTextureInstance, 0x0038);
		}

		// struct FBatchedPoint
		TEST_METHOD(ScriptStruct__Engine__BatchedPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, PointSize, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, RemainingLifeTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, DepthPriority, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, UnknownData_OIJU, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedPoint, 0x0028);
		}

		// struct FBatchedLine
		TEST_METHOD(ScriptStruct__Engine__BatchedLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, End, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Color, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Thickness, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, RemainingLifeTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, DepthPriority, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, UnknownData_82K5, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedLine, 0x0034);
		}

		// struct FClientReceiveData
		TEST_METHOD(ScriptStruct__Engine__ClientReceiveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, LocalPC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, UnknownData_FB7Z, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, OptionalObject, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientReceiveData, 0x0040);
		}

		// struct FParameterGroupData
		TEST_METHOD(ScriptStruct__Engine__ParameterGroupData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupSortPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, UnknownData_86KY, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterGroupData, 0x0018);
		}

		// struct FMaterialParameterCollectionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterCollectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, ParameterCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterCollectionInfo, 0x0018);
		}

		// struct FMaterialFunctionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialFunctionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, Function, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialFunctionInfo, 0x0018);
		}

		// struct FMaterialSpriteElement
		TEST_METHOD(ScriptStruct__Engine__MaterialSpriteElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToOpacityCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_V7NO, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_PZKV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToSizeCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialSpriteElement, 0x0028);
		}

		// struct FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__ExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, UnknownData_4DU8, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, InputName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, Mask, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, MaskR, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, MaskG, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, MaskB, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, MaskA, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, UnknownData_R95W, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, ExpressionName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionInput, 0x0038);
		}

		// struct FCustomInput
		TEST_METHOD(ScriptStruct__Engine__CustomInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, Input, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomInput, 0x0048);
		}

		// struct FExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__ExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, OutputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, Mask, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, MaskR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, MaskG, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, MaskB, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, MaskA, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, UnknownData_WUCY, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionOutput, 0x0028);
		}

		// struct FFunctionExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, Output, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionOutput, 0x0040);
		}

		// struct FFunctionExpressionInput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, Input, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionInput, 0x0050);
		}

		// struct FVectorParameterValue
		TEST_METHOD(ScriptStruct__Engine__VectorParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterValue, 0x0028);
		}

		// struct FTextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__TextureParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ExpressionGUID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureParameterValue, 0x0020);
		}

		// struct FScalarParameterValue
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ExpressionGUID, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, UnknownData_RZ0T, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterValue, 0x0020);
		}

		// struct FFontParameterValue
		TEST_METHOD(ScriptStruct__Engine__FontParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontPage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ExpressionGUID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, UnknownData_5X6S, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontParameterValue, 0x0028);
		}

		// struct FMaterialInstanceBasePropertyOverrides
		TEST_METHOD(ScriptStruct__Engine__MaterialInstanceBasePropertyOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_OpacityMaskClipValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_BlendMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_ShadingModel, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_DitheredLODTransition, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_CastDynamicShadowAsMasked, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, bOverride_TwoSided, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, UnknownData_DA4L, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, OpacityMaskClipValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, BlendMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, ShadingModel, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, UnknownData_RMRR, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, UnknownData_9HFP, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInstanceBasePropertyOverrides, 0x0014);
		}

		// struct FMaterialTextureInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialTextureInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, SamplingScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, UVChannelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, TextureName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialTextureInfo, 0x0010);
		}

		// struct FLightmassMaterialInterfaceSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassMaterialInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, UnknownData_PFUK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, EmissiveBoost, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, DiffuseBoost, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, ExportResolutionScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, UnknownData_B55Y, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassMaterialInterfaceSettings, 0x0014);
		}

		// struct FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionParameterBase, 0x0018);
		}

		// struct FCollectionVectorParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionVectorParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionVectorParameter, 0x0028);
		}

		// struct FCollectionScalarParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionScalarParameter, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionScalarParameter, UnknownData_R3NN, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionScalarParameter, 0x0020);
		}

		// struct FInterpGroupActorInfo
		TEST_METHOD(ScriptStruct__Engine__InterpGroupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, Actors, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpGroupActorInfo, 0x0018);
		}

		// struct FCameraCutInfo
		TEST_METHOD(ScriptStruct__Engine__CameraCutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Timestamp, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCutInfo, 0x0010);
		}

		// struct FMemberReference
		TEST_METHOD(ScriptStruct__Engine__MemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberScope, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberGuid, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bSelfContext, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bWasDeprecated, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, UnknownData_WCCU, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMemberReference, 0x0038);
		}

		// struct FMeshMergingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshMergingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bGenerateLightMapUV, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_CHG4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, TargetLightMapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bComputedLightMapResolution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bImportVertexColors, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bPivotPointAtZero, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bMergePhysicsData, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bMergeMaterials, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_A78E, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, MaterialSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bBakeVertexDataToMesh, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bUseVertexDataForBakingMaterial, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bUseTextureBinning, 0x009E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bCalculateCorrectLODModel, 0x009F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, LODSelectionType, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_TAZ5, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, ExportSpecificLOD, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, SpecificLOD, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bUseLandscapeCulling, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bExportNormalMap, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bExportMetallicMap, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bExportRoughnessMap, 0x00AF);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, bExportSpecularMap, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_CYB0, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, MergedMaterialAtlasResolution, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_49O6, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshMergingSettings, 0x00BC);
		}

		// struct FMeshProxySettings
		TEST_METHOD(ScriptStruct__Engine__MeshProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaterialSettings, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, TextureWidth, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, TextureHeight, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bExportNormalMap, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bExportMetallicMap, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bExportRoughnessMap, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bExportSpecularMap, 0x009B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bCalculateCorrectLODModel, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnknownData_40T0, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MergeDistance, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, HardAngleThreshold, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LightMapResolution, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bComputeLightMapResolution, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bRecalculateNormals, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bBakeVertexData, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, bUseLandscapeCulling, 0x00AF);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LandscapeCullingPrecision, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnknownData_FKPL, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshProxySettings, 0x00B4);
		}

		// struct FMeshReductionSettings
		TEST_METHOD(ScriptStruct__Engine__MeshReductionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentTriangles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, MaxDeviation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PixelError, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, WeldingThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, HardAngleThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, SilhouetteImportance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TextureImportance, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, ShadingImportance, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bRecalculateNormals, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, BaseLODModel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bGenerateUniqueLightmapUVs, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bKeepSymmetry, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bVisibilityAided, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, bCullOccluded, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VisibilityAggressiveness, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VertexColorImportance, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, UnknownData_R3DQ, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshReductionSettings, 0x0024);
		}

		// struct FPurchaseInfo
		TEST_METHOD(ScriptStruct__Engine__PurchaseInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayPrice, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseInfo, 0x0040);
		}

		// struct FNameCurveKey
		TEST_METHOD(ScriptStruct__Engine__NameCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, UnknownData_4F89, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurveKey, 0x0010);
		}

		// struct FNameCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__NameCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurve, Keys, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurve, 0x0068);
		}

		// struct FNavCollisionBox
		TEST_METHOD(ScriptStruct__Engine__NavCollisionBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Extent, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionBox, 0x0018);
		}

		// struct FNavCollisionCylinder
		TEST_METHOD(ScriptStruct__Engine__NavCollisionCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Radius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Height, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionCylinder, 0x0014);
		}

		// struct FNavAvoidanceMask
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceMask, 0x0004);
		}

		// struct FSupportedAreaData
		TEST_METHOD(ScriptStruct__Engine__SupportedAreaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClassName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, UnknownData_BH2S, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedAreaData, 0x0020);
		}

		// struct FNavGraphNode
		TEST_METHOD(ScriptStruct__Engine__NavGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, Owner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, UnknownData_GIJ3, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphNode, 0x0018);
		}

		// struct FNavGraphEdge
		TEST_METHOD(ScriptStruct__Engine__NavGraphEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphEdge, UnknownData_P5O2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphEdge, 0x0018);
		}

		// struct FNavigationFilterFlags
		TEST_METHOD(ScriptStruct__Engine__NavigationFilterFlags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterFlags, UnknownData_1PSA, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterFlags, 0x0004);
		}

		// struct FNavigationFilterArea
		TEST_METHOD(ScriptStruct__Engine__NavigationFilterArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, AreaClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, TravelCostOverride, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, EnteringCostOverride, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, UnknownData_ZFSY, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterArea, 0x0018);
		}

		// struct FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__MovementProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovementProperties, UnknownData_IGEM, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovementProperties, 0x0004);
		}

		// struct FNavAgentProperties : public FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__NavAgentProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentHeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentStepHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, NavWalkingSearchHeightScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_GCAC, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, PreferredNavData, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentProperties, 0x0020);
		}

		// struct FNavDataConfig : public FNavAgentProperties
		TEST_METHOD(ScriptStruct__Engine__NavDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Color, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, DefaultQueryExtent, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavigationDataClass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavigationDataClassName, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavDataConfig, 0x0058);
		}

		// struct FNavAgentSelector
		TEST_METHOD(ScriptStruct__Engine__NavAgentSelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentSelector, UnknownData_U95I, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentSelector, 0x0004);
		}

		// struct FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, LeftProjectHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, MaxFallDownLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, Direction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_8J9P, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapRadius, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapHeight, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SupportedAgents, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_4RS0, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_PFPH, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, AreaClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_9Y84, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLinkBase, 0x0038);
		}

		// struct FNavigationSegmentLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationSegmentLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftStart, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftEnd, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightStart, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightEnd, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationSegmentLink, 0x0068);
		}

		// struct FNavigationLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Left, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Right, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLink, 0x0050);
		}

		// struct FPacketSimulationSettings
		TEST_METHOD(ScriptStruct__Engine__PacketSimulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLoss, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktOrder, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktDup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLag, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagVariance, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPacketSimulationSettings, 0x0014);
		}

		// struct FFastArraySerializer
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_AIWY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializer, 0x00B0);
		}

		// struct FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializerItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationKey, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, MostRecentArrayReplicationKey, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializerItem, 0x000C);
		}

		// struct FNodeMap
		TEST_METHOD(ScriptStruct__Engine__NodeMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeMap, TargetNodeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeMap, UnknownData_DWCX, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeMap, SourceToTargetTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeMap, 0x0040);
		}

		// struct FParticleBurst
		TEST_METHOD(ScriptStruct__Engine__ParticleBurst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, CountLow, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleBurst, 0x000C);
		}

		// struct FParticleRandomSeedInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleRandomSeedInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, UnknownData_FV78, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, RandomSeeds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleRandomSeedInfo, 0x0020);
		}

		// struct FParticleCurvePair
		TEST_METHOD(ScriptStruct__Engine__ParticleCurvePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveObject, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleCurvePair, 0x0018);
		}

		// struct FBeamModifierOptions
		TEST_METHOD(ScriptStruct__Engine__BeamModifierOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamModifierOptions, UnknownData_YX4P, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamModifierOptions, 0x0004);
		}

		// struct FParticleEvent_GenerateInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleEvent_GenerateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_6776, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_MOPJ, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, CustomName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleModuleEventsToSendToGame, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEvent_GenerateInfo, 0x0028);
		}

		// struct FLocationBoneSocketInfo
		TEST_METHOD(ScriptStruct__Engine__LocationBoneSocketInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, BoneSocketName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, Offset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, UnknownData_JG9K, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationBoneSocketInfo, 0x0018);
		}

		// struct FOrbitOptions
		TEST_METHOD(ScriptStruct__Engine__OrbitOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrbitOptions, UnknownData_YHDH, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrbitOptions, 0x0004);
		}

		// struct FDistributionLookupTable
		TEST_METHOD(ScriptStruct__Engine__DistributionLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Op, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryCount, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryStride, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, SubEntryStride, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, UnknownData_M9VQ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Values, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, LockFlag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, UnknownData_JFKM, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistributionLookupTable, 0x0028);
		}

		// struct FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistribution, 0x0028);
		}

		// struct FRawDistributionFloat : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MinValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MaxValue, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, Distribution, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionFloat, 0x0038);
		}

		// struct FEmitterDynamicParameter
		TEST_METHOD(ScriptStruct__Engine__EmitterDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_HMDO, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ValueMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_82ZF, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_ME7W, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterDynamicParameter, 0x0050);
		}

		// struct FBeamTargetData
		TEST_METHOD(ScriptStruct__Engine__BeamTargetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, UnknownData_FKC2, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamTargetData, 0x0010);
		}

		// struct FGPUSpriteResourceData
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteResourceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedColorSamples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedMiscSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedSimulationAttrSamples, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveScale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveBias, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SubImageSize, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SizeBySpeed, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ConstantAcceleration, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetBase, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyBase, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyRange, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseBase, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldTightness, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldBias, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientBias, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceBias, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusBias, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionTimeBias, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomSpread, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomDistribution, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OneMinusFriction, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, RotationRateScale, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CameraMotionBlurAmount, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ScreenAlignment, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, LockAxisFlag, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_841H, 0x0146);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PivotOffset, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_ZVQ7, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MinFacingCameraBlendDistance, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MaxFacingCameraBlendDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_8ZP0, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteResourceData, 0x0160);
		}

		// struct FGPUSpriteLocalVectorFieldInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteLocalVectorFieldInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Field, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_OJ9R, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MinInitialRotation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MaxInitialRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, RotationRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Intensity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Tightness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_V2PG, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteLocalVectorFieldInfo, 0x0070);
		}

		// struct FFloatDistribution
		TEST_METHOD(ScriptStruct__Engine__FloatDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatDistribution, 0x0028);
		}

		// struct FRawDistributionVector : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValue, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValueVec, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValueVec, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, Distribution, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionVector, 0x0050);
		}

		// struct FGPUSpriteEmitterInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteEmitterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, RequiredModule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnPerUnitModule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModules, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_WGXP, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LocalVectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, VectorFieldScale, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DragCoefficient, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorStrength, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, Resilience, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ConstantAcceleration, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorPosition, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorRadiusSq, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetBase, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetRange, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvMaxSize, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvRotationRateScale, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxLifetime, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxParticleCount, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ScreenAlignment, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LockAxisFlag, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_7PCO, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_3SNM, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, CollisionMode, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_GEGM, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_GFMD, 0x0195);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MinFacingCameraBlendDistance, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxFacingCameraBlendDistance, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColor, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlpha, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColorScale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlphaScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_55JK, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteEmitterInfo, 0x02C0);
		}

		// struct FNamedEmitterMaterial
		TEST_METHOD(ScriptStruct__Engine__NamedEmitterMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedEmitterMaterial, 0x0010);
		}

		// struct FLODSoloTrack
		TEST_METHOD(ScriptStruct__Engine__LODSoloTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODSoloTrack, SoloEnableSetting, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLODSoloTrack, 0x0010);
		}

		// struct FParticleSystemLOD
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemLOD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemLOD, UnknownData_FKQL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemLOD, 0x0001);
		}

		// struct FParticleSysParam
		TEST_METHOD(ScriptStruct__Engine__ParticleSysParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_726O, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar_Low, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector_Low, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Color, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Actor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Material, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_KMVI, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSysParam, 0x0080);
		}

		// struct FParticleSystemReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemReplayFrame, UnknownData_PK8C, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemReplayFrame, 0x0010);
		}

		// struct FParticleEmitterReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleEmitterReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEmitterReplayFrame, UnknownData_5UZR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEmitterReplayFrame, 0x0010);
		}

		// struct FPhysicalAnimationData
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, BodyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, UnknownData_GOEE, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, OrientationStrength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, AngularVelocityStrength, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, PositionStrength, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, VelocityStrength, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxLinearForce, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxAngularForce, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, UnknownData_XZ4I, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationData, 0x0028);
		}

		// struct FTireFrictionScalePair
		TEST_METHOD(ScriptStruct__Engine__TireFrictionScalePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, TireType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, FrictionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, UnknownData_SZV3, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTireFrictionScalePair, 0x0010);
		}

		// struct FPhysicalAnimationProfile
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, PhysicalAnimationData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationProfile, 0x0030);
		}

		// struct FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConstraintBaseParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Restitution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, ContactDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, UnknownData_PHW4, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintBaseParams, 0x0014);
		}

		// struct FLinearConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__LinearConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, Limit, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, XMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, YMotion, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, ZMotion, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, UnknownData_7QVY, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearConstraint, 0x001C);
		}

		// struct FConeConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConeConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1LimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2LimitDegrees, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1Motion, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2Motion, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, UnknownData_XGZB, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConeConstraint, 0x0020);
		}

		// struct FTwistConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__TwistConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistLimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, UnknownData_VN0T, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwistConstraint, 0x001C);
		}

		// struct FConstraintDrive
		TEST_METHOD(ScriptStruct__Engine__ConstraintDrive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, MaxForce, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, UnknownData_FBAT, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDrive, 0x0010);
		}

		// struct FLinearDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__LinearDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, PositionTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, VelocityTarget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, XDrive, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, YDrive, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, ZDrive, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, UnknownData_JREF, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearDriveConstraint, 0x004C);
		}

		// struct FAngularDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__AngularDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, TwistDrive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SwingDrive, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SlerpDrive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, OrientationTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularVelocityTarget, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularDriveMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, UnknownData_BC2D, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularDriveConstraint, 0x004C);
		}

		// struct FConstraintProfileProperties
		TEST_METHOD(ScriptStruct__Engine__ConstraintProfileProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionLinearTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionAngularTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearBreakThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularBreakThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearLimit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ConeLimit, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, TwistLimit, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearDrive, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularDrive, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, UnknownData_VIM6, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintProfileProperties, 0x0104);
		}

		// struct FPhysicsConstraintProfileHandle
		TEST_METHOD(ScriptStruct__Engine__PhysicsConstraintProfileHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileProperties, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, UnknownData_YF0C, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileName, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsConstraintProfileHandle, 0x0110);
		}

		// struct FPhysicalSurfaceName
		TEST_METHOD(ScriptStruct__Engine__PhysicalSurfaceName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, UnknownData_ISOK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Name, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalSurfaceName, 0x0010);
		}

		// struct FDelegateArray
		TEST_METHOD(ScriptStruct__Engine__DelegateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateArray, Delegates, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateArray, 0x0010);
		}

		// struct FWeightedBlendable
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Weight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, UnknownData_BVJI, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Object, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendable, 0x0010);
		}

		// struct FWeightedBlendables
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendables)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendables, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendables, 0x0010);
		}

		// struct FPostProcessSettings
		TEST_METHOD(ScriptStruct__Engine__PostProcessSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_NW47, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTemp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_HBSR, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrast, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGamma, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffset, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationShadows, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastShadows, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaShadows, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainShadows, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetShadows, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionShadowsMax, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_ZPBD, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationMidtones, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastMidtones, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaMidtones, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainMidtones, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetMidtones, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationHighlights, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastHighlights, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaHighlights, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainHighlights, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetHighlights, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionHighlightsMin, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSlope, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToe, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShoulder, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmBlackClip, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhiteClip, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhitePoint, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTint, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintBlend, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintAmount, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSaturation, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerRed, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerGreen, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerBlue, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmContrast, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToeAmount, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmHealAmount, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmDynamicRange, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneColorTint, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneFringeIntensity, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomMethod, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_I78Q, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomIntensity, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomThreshold, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomSizeScale, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Size, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Size, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Size, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Size, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Size, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Size, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Tint, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Tint, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Tint, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Tint, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Tint, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Tint, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionTexture, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionSize, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionCenterUV, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilter, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMin, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMax, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMult, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionBufferScale, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMask, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskIntensity, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskTint, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapTint, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapIntensity, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemap, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMethod, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_Z9FY, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureLowPercent, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureHighPercent, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMinBrightness, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMaxBrightness, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedUp, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedDown, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBias, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMin, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMax, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareIntensity, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTint, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehSize, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareThreshold, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_H5QS, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehShape, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTints, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, VignetteIntensity, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainJitter, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainIntensity, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionIntensity, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionStaticFraction, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionRadius, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_TD3A, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeDistance, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeRadius, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionDistance, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionPower, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionBias, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionQuality, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipBlend, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipScale, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipThreshold, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingColor, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingIntensity, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingIntensity, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingLUT, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMethod, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_DOL7, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_AKZ8, 0x042D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFstop, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSensorWidth, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalDistance, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurAmount, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurRadius, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalRegion, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearTransitionRegion, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarTransitionRegion, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldScale, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMaxBokehSize, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearBlurSize, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarBlurSize, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldBokehShape, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldOcclusion, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldColorThreshold, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSizeThreshold, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSkyFocusDistance, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldVignetteSize, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurAmount, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurMax, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurPerObjectSize, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVIntensity, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVVplInjectionBias, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSize, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryOcclusionIntensity, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryBounceIntensity, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVGeometryVolumeBias, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVEmissiveInjectionIntensity, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionIntensity, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionRadius, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionExponent, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionExponent, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionIntensity, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionIntensity, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionIntensity, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionQuality, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionMaxRoughness, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVFadeRange, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionFadeRange, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenPercentage, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_NOZ9, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WeightedBlendables, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Blendables, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_C1TJ, 0x04F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPostProcessSettings, 0x0500);
		}

		// struct FMinimalViewInfo
		TEST_METHOD(ScriptStruct__Engine__MinimalViewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, FOV, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoWidth, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoNearClipPlane, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoFarClipPlane, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, AspectRatio, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_KGVQ, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, ProjectionMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_LGP5, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessBlendWeight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_J0DV, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OffCenterProjectionOffset, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_NV9V, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinimalViewInfo, 0x0550);
		}

		// struct FTViewTarget
		TEST_METHOD(ScriptStruct__Engine__TViewTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_P37S, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, POV, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, PlayerState, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_DQ8A, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTViewTarget, 0x0570);
		}

		// struct FCameraCacheEntry
		TEST_METHOD(ScriptStruct__Engine__CameraCacheEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, UnknownData_Z47B, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, POV, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCacheEntry, 0x0560);
		}

		// struct FInputAxisKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputAxisKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, AxisName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Key, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, UnknownData_MAQF, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisKeyMapping, 0x0028);
		}

		// struct FInputActionKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, Key, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, UnknownData_5NS1, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionKeyMapping, 0x0028);
		}

		// struct FInputAxisProperties
		TEST_METHOD(ScriptStruct__Engine__InputAxisProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, DeadZone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Sensitivity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Exponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, UnknownData_JO0U, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisProperties, 0x0010);
		}

		// struct FInputAxisConfigEntry
		TEST_METHOD(ScriptStruct__Engine__InputAxisConfigEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisKeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisProperties, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisConfigEntry, 0x0018);
		}

		// struct FKeyBind
		TEST_METHOD(ScriptStruct__Engine__KeyBind)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Command, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, UnknownData_2TT5, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyBind, 0x0030);
		}

		// struct FPlayerMuteList
		TEST_METHOD(ScriptStruct__Engine__PlayerMuteList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_B1ZT, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, bHasVoiceHandshakeCompleted, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_T84I, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, VoiceChannelIdx, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerMuteList, 0x0038);
		}

		// struct FPoseData
		TEST_METHOD(ScriptStruct__Engine__PoseData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, LocalSpacePose, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, LocalSpacePoseMask, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, CurveData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseData, 0x0030);
		}

		// struct FPoseDataContainer
		TEST_METHOD(ScriptStruct__Engine__PoseDataContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, PoseNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Poses, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Tracks, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, TrackMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Curves, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDataContainer, 0x0090);
		}

		// struct FPreviewAttachedObjectPair
		TEST_METHOD(ScriptStruct__Engine__PreviewAttachedObjectPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedTo, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAttachedObjectPair, 0x0038);
		}

		// struct FPreviewAssetAttachContainer
		TEST_METHOD(ScriptStruct__Engine__PreviewAssetAttachContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAssetAttachContainer, AttachedObjects, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAssetAttachContainer, 0x0010);
		}

		// struct FPreviewMeshCollectionEntry
		TEST_METHOD(ScriptStruct__Engine__PreviewMeshCollectionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewMeshCollectionEntry, SkeletalMesh, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewMeshCollectionEntry, 0x0028);
		}

		// struct FSpriteCategoryInfo
		TEST_METHOD(ScriptStruct__Engine__SpriteCategoryInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Description, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteCategoryInfo, 0x0038);
		}

		// struct FRigTransformConstraint
		TEST_METHOD(ScriptStruct__Engine__RigTransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, TranformType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, UnknownData_GE84, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, ParentSpace, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, Weight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, UnknownData_FFXD, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigTransformConstraint, 0x0018);
		}

		// struct FTransformBaseConstraint
		TEST_METHOD(ScriptStruct__Engine__TransformBaseConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBaseConstraint, TransformConstraints, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBaseConstraint, 0x0010);
		}

		// struct FTransformBase
		TEST_METHOD(ScriptStruct__Engine__TransformBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Node, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Constraints, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBase, 0x0028);
		}

		// struct FNode
		TEST_METHOD(ScriptStruct__Engine__Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, ParentName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, DisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, bAdvanced, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, UnknownData_QBQ0, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNode, 0x0060);
		}

		// struct FRootMotionSourceStatus
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceStatus, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceStatus, 0x0001);
		}

		// struct FRootMotionFinishVelocitySettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionFinishVelocitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, Mode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, UnknownData_1DMT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, SetVelocity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, ClampVelocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionFinishVelocitySettings, 0x0014);
		}

		// struct FRootMotionSourceSettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceSettings, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceSettings, 0x0001);
		}

		// struct FRootMotionMovementParams
		TEST_METHOD(ScriptStruct__Engine__RootMotionMovementParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, bHasRootMotion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_EEY4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, BlendWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_YG3O, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, RootMotionTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionMovementParams, 0x0040);
		}

		// struct FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_52L1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Priority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, LocalID, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, AccumulateMode, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_UMDJ, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, InstanceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, StartTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, CurrentTime, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, PreviousTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Duration, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Status, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Settings, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, bInLocalSpace, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_HWAX, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, RootMotionParams, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, FinishVelocityParams, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_XRX9, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource, 0x0098);
		}

		// struct FRootMotionSource_JumpForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_JumpForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Rotation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Distance, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Height, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, bDisableTimeout, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_PDBW, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, PathOffsetCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, TimeMappingCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_7DHT, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_JumpForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToDynamicForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToDynamicForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, InitialTargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TargetLocation, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, bRestrictSpeedToExpected, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, UnknownData_4A8Z, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, PathOffsetCurve, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TimeMappingCurve, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToDynamicForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, TargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, bRestrictSpeedToExpected, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, UnknownData_LR7A, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, PathOffsetCurve, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToForce, 0x00C0);
		}

		// struct FRootMotionSource_RadialForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_RadialForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Location, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_TZQ4, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, LocationActor, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Radius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Strength, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bIsPush, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bNoZForce, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_YLEQ, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthDistanceFalloff, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthOverTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bUseFixedWorldDirection, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_QTJK, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, FixedWorldDirection, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_RadialForce, 0x00E0);
		}

		// struct FRootMotionSource_ConstantForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_ConstantForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, Force, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, UnknownData_CJ7Z, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, StrengthOverTime, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_ConstantForce, 0x00B0);
		}

		// struct FCameraExposureSettings
		TEST_METHOD(ScriptStruct__Engine__CameraExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Method, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_ZBRL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, LowPercent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HighPercent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MinBrightness, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MaxBrightness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedDown, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Bias, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMin, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMax, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraExposureSettings, 0x0028);
		}

		// struct FGaussianSumBloomSettings
		TEST_METHOD(ScriptStruct__Engine__GaussianSumBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Intensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Threshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, SizeScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Size, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Size, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Size, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Size, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Size, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Tint, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Tint, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Tint, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Tint, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Tint, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Tint, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGaussianSumBloomSettings, 0x0084);
		}

		// struct FConvolutionBloomSettings
		TEST_METHOD(ScriptStruct__Engine__ConvolutionBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Size, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, CenterUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMult, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, BufferScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, UnknownData_YNDD, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConvolutionBloomSettings, 0x0028);
		}

		// struct FLensBloomSettings
		TEST_METHOD(ScriptStruct__Engine__LensBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, GaussianSum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_S8YA, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Convolution, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Method, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_DK6Y, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensBloomSettings, 0x00B8);
		}

		// struct FLensImperfectionSettings
		TEST_METHOD(ScriptStruct__Engine__LensImperfectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskIntensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskTint, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, UnknownData_1MQV, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensImperfectionSettings, 0x0020);
		}

		// struct FLensSettings
		TEST_METHOD(ScriptStruct__Engine__LensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Bloom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Imperfections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, ChromaticAberration, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, UnknownData_T4IX, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensSettings, 0x00E0);
		}

		// struct FFilmStockSettings
		TEST_METHOD(ScriptStruct__Engine__FilmStockSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Slope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Toe, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Shoulder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, BlackClip, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, WhiteClip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilmStockSettings, 0x0014);
		}

		// struct FColorGradePerRangeSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradePerRangeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Saturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Contrast, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gamma, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Offset, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradePerRangeSettings, 0x0050);
		}

		// struct FColorGradingSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Global, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Shadows, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Midtones, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Highlights, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, ShadowsMax, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, HighlightsMin, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, UnknownData_WLDU, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradingSettings, 0x0150);
		}

		// struct FEngineShowFlagsSetting
		TEST_METHOD(ScriptStruct__Engine__EngineShowFlagsSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, ShowFlagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, Enabled, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, UnknownData_HPZC, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineShowFlagsSetting, 0x0018);
		}

		// struct FMeshUVChannelInfo
		TEST_METHOD(ScriptStruct__Engine__MeshUVChannelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bInitialized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bOverrideDensities, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, UnknownData_R9T1, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, LocalUVDensities, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshUVChannelInfo, 0x0014);
		}

		// struct FSkeletalMaterial
		TEST_METHOD(ScriptStruct__Engine__SkeletalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, bEnableShadowCasting, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, bRecomputeTangent, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UnknownData_1WDW, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialSlotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UVChannelData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UnknownData_GAHJ, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMaterial, 0x0030);
		}

		// struct FClothPhysicsProperties_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothPhysicsProperties_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, VerticalResistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, HorizontalResistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, BendResistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, ShearResistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Friction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Damping, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherStiffness, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherLimit, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Drag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, StiffnessFrequency, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, GravityScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, MassScale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, InertiaBlend, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionThickness, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionSquashScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionStiffness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SolverFrequency, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberCompression, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberExpansion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberResistance, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicsProperties_Legacy, 0x0050);
		}

		// struct FClothingAssetData_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothingAssetData_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, AssetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, ApexFileName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, bClothPropertiesChanged, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_J7TU, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, PhysicsProperties, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_C78P, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothingAssetData_Legacy, 0x0078);
		}

		// struct FTriangleSortSettings
		TEST_METHOD(ScriptStruct__Engine__TriangleSortSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTriangleSortSettings, TriangleSorting, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTriangleSortSettings, CustomLeftRightAxis, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTriangleSortSettings, UnknownData_RZ97, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTriangleSortSettings, CustomLeftRightBoneName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTriangleSortSettings, 0x0010);
		}

		// struct FBoneReference
		TEST_METHOD(ScriptStruct__Engine__BoneReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, UnknownData_Q0J7, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReference, 0x0018);
		}

		// struct FSkeletalMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ReductionMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_CBSA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxDeviationPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, WeldingThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, bRecalcNormals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_I6PI, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NormalsThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SilhouetteImportance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TextureImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ShadingImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SkinningImportance, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, BoneReductionRatio, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxBonesPerVertex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_WRAE, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, BonesToRemove, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, BaseLOD, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_KEYO, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, BakePose, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshOptimizationSettings, 0x0048);
		}

		// struct FSkeletalMeshLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODMaterialMap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, bEnableShadowCasting, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, TriangleSortSettings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_OS3C, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ReductionSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, RemovedBones, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToRemove, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePose, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SourceImportFilename, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_579I, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODInfo, 0x00C8);
		}

		// struct FSkeletalMeshClothBuildParams
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshClothBuildParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetLod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemapParameters, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_1R6X, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, AssetName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, LODIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, SourceSection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemoveFromMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_H3JO, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, PhysicsAsset, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshClothBuildParams, 0x0058);
		}

		// struct FBoneMirrorExport
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorExport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, SourceBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneFlipAxis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, UnknownData_X8IN, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorExport, 0x0018);
		}

		// struct FBoneMirrorInfo
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, BoneFlipAxis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, UnknownData_IPRD, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorInfo, 0x0008);
		}

		// struct FTickFunction
		TEST_METHOD(ScriptStruct__Engine__TickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_B0MY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, EndTickGroup, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_7LMI, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_2FJO, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickInterval, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_9Q9Z, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickFunction, 0x0050);
		}

		// struct FSkeletalMeshComponentClothTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentClothTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentClothTickFunction, UnknownData_DE82, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentClothTickFunction, 0x0058);
		}

		// struct FSkeletalMeshComponentEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentEndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentEndPhysicsTickFunction, UnknownData_LKFC, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentEndPhysicsTickFunction, 0x0058);
		}

		// struct FSkeletalMeshLODGroupSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODGroupSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_MRV9, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, OptimizationSettings, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODGroupSettings, 0x0050);
		}

		// struct FNameMapping
		TEST_METHOD(ScriptStruct__Engine__NameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, NodeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, BoneName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameMapping, 0x0010);
		}

		// struct FRigConfiguration
		TEST_METHOD(ScriptStruct__Engine__RigConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, Rig, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, BoneMappingTable, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigConfiguration, 0x0018);
		}

		// struct FBoneReductionSetting
		TEST_METHOD(ScriptStruct__Engine__BoneReductionSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReductionSetting, BonesToRemove, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReductionSetting, 0x0010);
		}

		// struct FReferencePose
		TEST_METHOD(ScriptStruct__Engine__ReferencePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, PoseName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, ReferencePose, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferencePose, 0x0018);
		}

		// struct FSkeletonToMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__SkeletonToMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, SkeletonToMeshTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, MeshToSkeletonTable, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletonToMeshLinkup, 0x0020);
		}

		// struct FSmartNameMapping
		TEST_METHOD(ScriptStruct__Engine__SmartNameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameMapping, UnknownData_PSQX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameMapping, 0x0060);
		}

		// struct FCurveMetaData
		TEST_METHOD(ScriptStruct__Engine__CurveMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveMetaData, UnknownData_JUCL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveMetaData, 0x0020);
		}

		// struct FAnimCurveType
		TEST_METHOD(ScriptStruct__Engine__AnimCurveType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveType, UnknownData_ZR84, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveType, 0x0002);
		}

		// struct FPassiveSoundMixModifier
		TEST_METHOD(ScriptStruct__Engine__PassiveSoundMixModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, SoundMix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MinVolumeThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MaxVolumeThreshold, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPassiveSoundMixModifier, 0x0010);
		}

		// struct FSoundClassProperties
		TEST_METHOD(ScriptStruct__Engine__SoundClassProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Volume, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Pitch, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, StereoBleed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LFEBleed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, VoiceCenterChannelVolume, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolumeThreshold, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_TQJK, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Default2DReverbSendAmount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_DB8E, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, OutputTarget, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_VCDO, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassProperties, 0x002C);
		}

		// struct FSoundClassEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundClassEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassEditorData, UnknownData_IJDX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassEditorData, 0x0008);
		}

		// struct FSoundConcurrencySettings
		TEST_METHOD(ScriptStruct__Engine__SoundConcurrencySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, MaxCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_D3TF, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, ResolutionRule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_8DTG, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScale, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundConcurrencySettings, 0x0010);
		}

		// struct FSoundNodeEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundNodeEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundNodeEditorData, UnknownData_NHAA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundNodeEditorData, 0x0008);
		}

		// struct FSourceEffectChainEntry
		TEST_METHOD(ScriptStruct__Engine__SourceEffectChainEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, Preset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, UnknownData_300I, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChainEntry, 0x0010);
		}

		// struct FSoundGroup
		TEST_METHOD(ScriptStruct__Engine__SoundGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, SoundGroup, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_GC38, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_J2I3, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DecompressedDuration, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundGroup, 0x0020);
		}

		// struct FSoundClassAdjuster
		TEST_METHOD(ScriptStruct__Engine__SoundClassAdjuster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, SoundClassObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VolumeAdjuster, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, PitchAdjuster, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_ZLRG, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VoiceCenterChannelVolumeAdjuster, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassAdjuster, 0x0018);
		}

		// struct FAudioEQEffect
		TEST_METHOD(ScriptStruct__Engine__AudioEQEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, UnknownData_VIZL, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter0, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth0, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth1, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain2, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter3, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth3, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEQEffect, 0x0038);
		}

		// struct FDistanceDatum
		TEST_METHOD(ScriptStruct__Engine__DistanceDatum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceEnd, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceStart, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceEnd, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, Volume, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistanceDatum, 0x0014);
		}

		// struct FModulatorContinuousParams
		TEST_METHOD(ScriptStruct__Engine__ModulatorContinuousParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, Default, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxInput, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinOutput, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxOutput, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParamMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, UnknownData_8WPE, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModulatorContinuousParams, 0x0020);
		}

		// struct FSoundSourceBusSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSourceBusSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SendLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_KEMV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SoundSourceBus, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSourceBusSendInfo, 0x0010);
		}

		// struct FSoundSubmixSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSubmixSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_5441, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SoundSubmix, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSubmixSendInfo, 0x0010);
		}

		// struct FStreamedAudioPlatformData
		TEST_METHOD(ScriptStruct__Engine__StreamedAudioPlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamedAudioPlatformData, UnknownData_QHDC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamedAudioPlatformData, 0x0020);
		}

		// struct FSplinePoint
		TEST_METHOD(ScriptStruct__Engine__SplinePoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, InputKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Position, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Scale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Type, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, UnknownData_B3ZK, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplinePoint, 0x0044);
		}

		// struct FSplineMeshParams
		TEST_METHOD(ScriptStruct__Engine__SplineMeshParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartRoll, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndPos, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndTangent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndRoll, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndOffset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshParams, 0x0058);
		}

		// struct FMaterialRemapIndex
		TEST_METHOD(ScriptStruct__Engine__MaterialRemapIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, ImportVersionKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, UnknownData_1XM6, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, MaterialRemap, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialRemapIndex, 0x0018);
		}

		// struct FStaticMaterial
		TEST_METHOD(ScriptStruct__Engine__StaticMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UVChannelData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UnknownData_ZKBI, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterial, 0x0028);
		}

		// struct FAssetEditorOrbitCameraPosition
		TEST_METHOD(ScriptStruct__Engine__AssetEditorOrbitCameraPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, bIsSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, UnknownData_2IVE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitPoint, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitZoom, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitRotation, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetEditorOrbitCameraPosition, 0x0028);
		}

		// struct FMeshSectionInfo
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, MaterialIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bEnableCollision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bCastShadow, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, UnknownData_O2EB, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfo, 0x0008);
		}

		// struct FMeshSectionInfoMap
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfoMap, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfoMap, 0x0050);
		}

		// struct FMeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__MeshBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, bUseMikkTSpace, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, bRecomputeNormals, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, bRecomputeTangents, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, bRemoveDegenerates, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, bBuildAdjacencyBuffer, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, bBuildReversedIndexBuffer, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, bUseHighPrecisionTangentBasis, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, bUseFullPrecisionUVs, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, bGenerateLightmapUVs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_X34F, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, MinLightmapResolution, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, SrcLightmapIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DstLightmapIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale3D, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldResolutionScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, bGenerateDistanceFieldAsIfTwoSided, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_NS9T, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldBias, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_10EB, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldReplacementMesh, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshBuildSettings, 0x0040);
		}

		// struct FStaticMeshSourceModel
		TEST_METHOD(ScriptStruct__Engine__StaticMeshSourceModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, BuildSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ReductionSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, LODDistance, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ScreenSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, UnknownData_8C4V, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshSourceModel, 0x0070);
		}

		// struct FStaticMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__StaticMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ReductionMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_I1TE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, MaxDeviationPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, WeldingThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, bRecalcNormals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_EFRE, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NormalsThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, SilhouetteImportance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, TextureImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ShadingImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_QLN0, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshOptimizationSettings, 0x001C);
		}

		// struct FSubsurfaceProfileStruct
		TEST_METHOD(ScriptStruct__Engine__SubsurfaceProfileStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatterRadius, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SubsurfaceColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, FalloffColor, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubsurfaceProfileStruct, 0x0024);
		}

		// struct FTexturePlatformData
		TEST_METHOD(ScriptStruct__Engine__TexturePlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturePlatformData, UnknownData_4HFB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTexturePlatformData, 0x0020);
		}

		// struct FTextureSource
		TEST_METHOD(ScriptStruct__Engine__TextureSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSource, UnknownData_GDD6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSource, 0x0080);
		}

		// struct FStreamingTexturePrimitiveInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingTexturePrimitiveInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, Bounds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, TexelFactor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, PackedRelativeBox, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTexturePrimitiveInfo, UnknownData_XO1C, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingTexturePrimitiveInfo, 0x0030);
		}

		// struct FTimelineEventEntry
		TEST_METHOD(ScriptStruct__Engine__TimelineEventEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, UnknownData_UD68, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, EventFunc, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineEventEntry, 0x0018);
		}

		// struct FTimelineVectorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, UnknownData_EYBJ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineVectorTrack, 0x0070);
		}

		// struct FTimelineFloatTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, UnknownData_I6YM, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineFloatTrack, 0x0070);
		}

		// struct FTimelineLinearColorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, UnknownData_713U, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineLinearColorTrack, 0x0070);
		}

		// struct FTimeline
		TEST_METHOD(ScriptStruct__Engine__Timeline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, LengthMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_8386, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Length, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_MR2Y, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PlayRate, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Position, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_LJLJ, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Events, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpVectors, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpFloats, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpLinearColors, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelinePostUpdateFunc, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelineFinishedFunc, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_ENRG, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PropertySetObject, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, DirectionPropertyName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, DirectionProperty, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_MFAI, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeline, 0x00E0);
		}

		// struct FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTTrackBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, TrackName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, bIsExternalCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_3ZTH, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTTrackBase, 0x0010);
		}

		// struct FTTLinearColorTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTLinearColorTrack, CurveLinearColor, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTLinearColorTrack, 0x0018);
		}

		// struct FTTVectorTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTVectorTrack, CurveVector, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTVectorTrack, 0x0018);
		}

		// struct FTTFloatTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTFloatTrack, CurveFloat, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTFloatTrack, 0x0018);
		}

		// struct FLandscapeInfoLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeInfoLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerInfoObj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeInfoLayerSettings, 0x0010);
		}

		// struct FTTEventTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, CurveKeys, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTEventTrack, 0x0018);
		}

		// struct FTimeStretchCurveInstance
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, bHasValidData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, UnknownData_7UJH, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveInstance, 0x0030);
		}

		// struct FLandscapeImportLayerInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeImportLayerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeImportLayerInfo, UnknownData_9XAX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeImportLayerInfo, 0x0001);
		}

		// struct FTouchInputControl
		TEST_METHOD(ScriptStruct__Engine__TouchInputControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image2, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Center, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, VisualSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, ThumbSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InteractionSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InputScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, MainInputKey, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, AltInputKey, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTouchInputControl, 0x0068);
		}

		// struct FLandscapeLayerStruct
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerStruct, LayerInfoObj, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerStruct, 0x0008);
		}

		// struct FLandscapeEditorLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditorLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditorLayerSettings, UnknownData_3FQN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditorLayerSettings, 0x0001);
		}

		// struct FLandscapeWeightmapUsage
		TEST_METHOD(ScriptStruct__Landscape__LandscapeWeightmapUsage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeWeightmapUsage, ChannelUsage, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeWeightmapUsage, 0x0020);
		}

		// struct FLandscapeSplineConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, Segment, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, UnknownData_38PA, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineConnection, 0x0010);
		}

		// struct FHardwareCursorReference
		TEST_METHOD(ScriptStruct__Engine__HardwareCursorReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, CursorPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, HotSpot, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHardwareCursorReference, 0x0010);
		}

		// struct FForeignWorldSplineData
		TEST_METHOD(ScriptStruct__Landscape__ForeignWorldSplineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignWorldSplineData, UnknownData_8Z4K, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignWorldSplineData, 0x0001);
		}

		// struct FLevelCollection
		TEST_METHOD(ScriptStruct__Engine__LevelCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, UnknownData_GZDG, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, GameState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, NetDriver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, DemoNetDriver, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, PersistentLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, Levels, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, UnknownData_PMAT, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelCollection, 0x0080);
		}

		// struct FForeignSplineSegmentData
		TEST_METHOD(ScriptStruct__Landscape__ForeignSplineSegmentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignSplineSegmentData, UnknownData_DXFM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignSplineSegmentData, 0x0001);
		}

		// struct FForeignControlPointData
		TEST_METHOD(ScriptStruct__Landscape__ForeignControlPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignControlPointData, UnknownData_174F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignControlPointData, 0x0001);
		}

		// struct FLandscapeSplineMeshEntry
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineMeshEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Mesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, MaterialOverrides, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_37J8, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, CenterAdjust, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_79VU, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Scale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Orientation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, ForwardAxis, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UpAxis, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_ZVHC, 0x0037);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineMeshEntry, 0x0038);
		}

		// struct FStartAsyncSimulationFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__StartAsyncSimulationFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartAsyncSimulationFunction, UnknownData_TRGU, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartAsyncSimulationFunction, 0x0058);
		}

		// struct FEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__EndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndPhysicsTickFunction, UnknownData_CRAT, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEndPhysicsTickFunction, 0x0058);
		}

		// struct FStartPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__StartPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartPhysicsTickFunction, UnknownData_Z7IY, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartPhysicsTickFunction, 0x0058);
		}

		// struct FLandscapeSplineSegmentConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineSegmentConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, ControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, TangentLen, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, UnknownData_KY0I, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, SocketName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineSegmentConnection, 0x0018);
		}

		// struct FLandscapeSplineInterpPoint
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineInterpPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Left, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Right, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffLeft, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffRight, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, StartEndFalloff, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineInterpPoint, 0x0040);
		}

		// struct FLevelViewportInfo
		TEST_METHOD(ScriptStruct__Engine__LevelViewportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamRotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamOrthoZoom, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamUpdated, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, UnknownData_EO1R, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelViewportInfo, 0x0020);
		}

		// struct FGrassInput
		TEST_METHOD(ScriptStruct__Landscape__GrassInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, GrassType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Input, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassInput, 0x0048);
		}

		// struct FHierarchicalSimplification
		TEST_METHOD(ScriptStruct__Engine__HierarchicalSimplification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, UnknownData_NCFC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, TransitionScreenSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, bSimplifyMesh, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, UnknownData_IFNG, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, ProxySetting, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MergeSetting, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredBoundRadius, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredFillingPercentage, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MinNumberOfActorsToBuild, 0x0184);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHierarchicalSimplification, 0x0188);
		}

		// struct FLayerBlendInput
		TEST_METHOD(ScriptStruct__Landscape__LayerBlendInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, BlendType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_FN2R, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerInput, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, HeightInput, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, PreviewWeight, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstLayerInput, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstHeightInput, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_UPS3, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerBlendInput, 0x0098);
		}

		// struct FNetViewer
		TEST_METHOD(ScriptStruct__Engine__NetViewer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, Connection, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, InViewer, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewTarget, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewDir, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetViewer, 0x0030);
		}

		// struct FWeightmapLayerAllocationInfo
		TEST_METHOD(ScriptStruct__Landscape__WeightmapLayerAllocationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, LayerInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureChannel, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, UnknownData_7VVQ, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapLayerAllocationInfo, 0x0010);
		}

		// struct FGrassVariety
		TEST_METHOD(ScriptStruct__Landscape__GrassVariety)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassDensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseGrid, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_BBRF, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, PlacementJitter, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, StartCullDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, EndCullDistance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, MinLOD, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, Scaling, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_JPKP, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleX, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleZ, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, RandomRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, AlignToSurface, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseLandscapeLightmap, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, LightingChannels, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bReceivesDecals, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_ZUH9, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassVariety, 0x0048);
		}

		// struct FLightmassWorldInfoSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassWorldInfoSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, StaticLightingLevelScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumIndirectLightingBounces, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumSkyLightingBounces, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingQuality, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingSmoothness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentIntensity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EmissiveBoost, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DiffuseBoost, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightingMethod, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_583A, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapDetailCellSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapMaximumBrickMemoryMb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightSamplePlacementScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_PDWE, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DirectIlluminationOcclusionFraction, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectIlluminationOcclusionFraction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, OcclusionExponent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, FullyOccludedSamplesFraction, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, MaxOcclusionDistance, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_15U7, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassWorldInfoSettings, 0x0050);
		}

		// struct FLandscapeEditToolRenderData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditToolRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, ToolMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, GizmoMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, SelectedType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelG, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelB, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DataTexture, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditToolRenderData, 0x0028);
		}

		// struct FGizmoSelectData
		TEST_METHOD(ScriptStruct__Landscape__GizmoSelectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoSelectData, UnknownData_0DTF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoSelectData, 0x0050);
		}

		// struct FBranchingPointMarker
		TEST_METHOD(ScriptStruct__Engine__BranchingPointMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, TriggerTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyEventType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, UnknownData_0JZ1, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointMarker, 0x000C);
		}

		// struct FBranchingPoint : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__BranchingPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, EventName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, DisplayTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, TriggerTimeOffset, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPoint, 0x0040);
		}

		// struct FAnimSegment
		TEST_METHOD(ScriptStruct__Engine__AnimSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, StartPos, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimStartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimEndTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, LoopingCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, UnknownData_E0JK, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSegment, 0x0020);
		}

		// struct FAnimTrack
		TEST_METHOD(ScriptStruct__Engine__AnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTrack, AnimSegments, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTrack, 0x0010);
		}

		// struct FSlotAnimationTrack
		TEST_METHOD(ScriptStruct__Engine__SlotAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, AnimTrack, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotAnimationTrack, 0x0018);
		}

		// struct FCompositeSection : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__CompositeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, SectionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, StartTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, UnknownData_VOJV, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, NextSectionName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, MetaData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSection, 0x0058);
		}

		// struct FExposedValueCopyRecord
		TEST_METHOD(ScriptStruct__Engine__ExposedValueCopyRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourceProperty, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourcePropertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourceSubPropertyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourceArrayIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, UnknownData_JWA9, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, DestProperty, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, DestArrayIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, Size, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, bInstanceIsTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, PostCopyOperation, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CopyType, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, UnknownData_XKQI, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CachedSourceProperty, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, UnknownData_YUGK, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueCopyRecord, 0x0060);
		}

		// struct FExposedValueHandler
		TEST_METHOD(ScriptStruct__Engine__ExposedValueHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, BoundFunction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, CopyRecords, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, UnknownData_19PL, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueHandler, 0x0028);
		}

		// struct FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Base)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Base, UnknownData_WIWC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Base, EvaluateGraphExposedInputs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Base, 0x0030);
		}

		// struct FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, LinkID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, UnknownData_HKGG, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLinkBase, 0x0018);
		}

		// struct FPoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLink, 0x0018);
		}

		// struct FInputScaleBias
		TEST_METHOD(ScriptStruct__Engine__InputScaleBias)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Scale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Bias, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBias, 0x0008);
		}

		// struct FAnimNode_ApplyMeshSpaceAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ApplyMeshSpaceAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, base, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Additive, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Alpha, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBias, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, LODThreshold, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, ActualAlpha, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_1QGW, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyMeshSpaceAdditive, 0x0078);
		}

		// struct FAnimNode_SaveCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SaveCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, Pose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, CachePoseName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, GlobalWeight, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, UnknownData_T4HE, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SaveCachedPose, 0x00A8);
		}

		// struct FAnimNode_AssetPlayerBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_AssetPlayerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, bIgnoreForRelevancyTest, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_I4UV, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupIndex, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupRole, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_8SV2, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, BlendWeight, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, InternalTimeAccumulator, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_B4DE, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AssetPlayerBase, 0x0058);
		}

		// struct FAnimNode_SequencePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, Sequence, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, bLoopAnimation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, UnknownData_046H, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRate, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, StartPosition, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, UnknownData_WZAU, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequencePlayer, 0x0070);
		}

		// struct FAnimNode_StateMachine : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_StateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, StateMachineIndexInClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, MaxTransitionsPerFrame, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bSkipFirstUpdateTransition, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bReinitializeOnBecomingRelevant, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, UnknownData_FYSS, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, CurrentState, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, ElapsedTime, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, UnknownData_T64D, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateMachine, 0x00D8);
		}

		// struct FAnimationPotentialTransition
		TEST_METHOD(ScriptStruct__Engine__AnimationPotentialTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationPotentialTransition, UnknownData_INII, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationPotentialTransition, 0x0030);
		}

		// struct FAnimationActiveTransitionEntry
		TEST_METHOD(ScriptStruct__Engine__AnimationActiveTransitionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_7ZME, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, BlendProfile, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_TLI6, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationActiveTransitionEntry, 0x00D0);
		}

		// struct FAnimNode_SubInput : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SubInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInput, UnknownData_Z3ZI, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SubInput, 0x0068);
		}

		// struct FAnimNode_SubInstance : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SubInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, InPose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, InstanceClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, InstanceToRun, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, InstanceProperties, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, SubInstanceProperties, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, SourcePropertyNames, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, DestPropertyNames, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SubInstance, UnknownData_36VJ, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SubInstance, 0x00C8);
		}

		// struct FAnimNode_TransitionPoseEvaluator : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionPoseEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, DataSource, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, EvaluatorMode, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_NPIL, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, FramesToCachePose, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_4O78, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, CacheFramesRemaining, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_GZ1B, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionPoseEvaluator, 0x0078);
		}

		// struct FAnimNode_TransitionResult : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, bCanEnterTransition, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, UnknownData_QS6V, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionResult, 0x0080);
		}

		// struct FAnimNode_UseCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_UseCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, LinkToCachingNode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, CachePoseName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_UseCachedPose, 0x0050);
		}

		// struct FAnimNode_ConvertLocalToComponentSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertLocalToComponentSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertLocalToComponentSpace, LocalPose, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertLocalToComponentSpace, 0x0048);
		}

		// struct FComponentSpacePoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePoseLink, 0x0018);
		}

		// struct FAnimNode_ConvertComponentToLocalSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertComponentToLocalSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertComponentToLocalSpace, ComponentPose, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertComponentToLocalSpace, 0x0048);
		}

		// struct FCompressedTrack
		TEST_METHOD(ScriptStruct__Engine__CompressedTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, ByteStream, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Mins, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Ranges, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedTrack, 0x0038);
		}

		// struct FCurveTrack
		TEST_METHOD(ScriptStruct__Engine__CurveTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTrack, 0x0018);
		}

		// struct FScaleTrack
		TEST_METHOD(ScriptStruct__Engine__ScaleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, ScaleKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScaleTrack, 0x0020);
		}

		// struct FRotationTrack
		TEST_METHOD(ScriptStruct__Engine__RotationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, RotKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationTrack, 0x0020);
		}

		// struct FTranslationTrack
		TEST_METHOD(ScriptStruct__Engine__TranslationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTranslationTrack, 0x0020);
		}

		// struct FTrackToSkeletonMap
		TEST_METHOD(ScriptStruct__Engine__TrackToSkeletonMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackToSkeletonMap, BoneTreeIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackToSkeletonMap, 0x0004);
		}

		// struct FRawAnimSequenceTrack
		TEST_METHOD(ScriptStruct__Engine__RawAnimSequenceTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, RotKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, ScaleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawAnimSequenceTrack, 0x0030);
		}

		// struct FAnimSequenceTrackContainer
		TEST_METHOD(ScriptStruct__Engine__AnimSequenceTrackContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, AnimationTracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, TrackNames, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequenceTrackContainer, 0x0020);
		}

		// struct FAnimSetMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__AnimSetMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSetMeshLinkup, BoneToTrackTable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSetMeshLinkup, 0x0010);
		}

		// struct FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimInstanceProxy, UnknownData_LWAK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimInstanceProxy, 0x04C0);
		}

		// struct FAnimSingleNodeInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimSingleNodeInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSingleNodeInstanceProxy, UnknownData_QJXT, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSingleNodeInstanceProxy, 0x0640);
		}

		// struct FAnimNode_SingleNode : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SingleNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, SourcePose, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, UnknownData_9MC5, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SingleNode, 0x0058);
		}

		// struct FBakedStateExitTransition
		TEST_METHOD(ScriptStruct__Engine__BakedStateExitTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CanTakeDelegateIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CustomResultNodeIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, TransitionIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bDesiredTransitionReturnValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bAutomaticRemainingTimeRule, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, UnknownData_409K, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, PoseEvaluatorLinks, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedStateExitTransition, 0x0020);
		}

		// struct FBakedAnimationState
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, FullyBlendedNotify, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bIsAConduit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_RGKL, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EntryRuleNodeIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, PlayerNodeIndices, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bAlwaysResetOnEntry, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_6GTY, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationState, 0x0048);
		}

		// struct FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateBase, StateName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateBase, 0x0008);
		}

		// struct FAnimationTransitionBetweenStates : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionBetweenStates)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, PreviousState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, NextState, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CrossfadeDuration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, StartNotify, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, EndNotify, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, InterruptNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_D329, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendProfile, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, LogicType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_GC1J, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionBetweenStates, 0x0040);
		}

		// struct FBakedAnimationStateMachine
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationStateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, MachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, InitialState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, UnknownData_66W6, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, States, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, Transitions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationStateMachine, 0x0030);
		}

		// struct FAnimationTransitionRule
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionRule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, RuleToExecute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionReturnVal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, UnknownData_RV18, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionRule, 0x0010);
		}

		// struct FAnimationState : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, FullyBlendedNotify, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationState, 0x0028);
		}

		// struct FAnimSyncMarker
		TEST_METHOD(ScriptStruct__Engine__AnimSyncMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, MarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, UnknownData_XO6Y, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSyncMarker, 0x0010);
		}

		// struct FMarkerSyncData
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, AuthoredSyncMarkers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, UnknownData_CS1M, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncData, 0x0020);
		}

		// struct FAnimNotifyTrack
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, UnknownData_IFXC, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyTrack, 0x0038);
		}

		// struct FPerBoneBlendWeight
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, BlendWeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeight, 0x0008);
		}

		// struct FPerBoneBlendWeights
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeights)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeights, BoneBlendWeights, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeights, 0x0010);
		}

		// struct FAssetImportInfo
		TEST_METHOD(ScriptStruct__Engine__AssetImportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetImportInfo, UnknownData_WAXS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetImportInfo, 0x0001);
		}

		// struct FPrimaryAssetRules
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRules)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, Priority, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, bApplyRecursively, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, UnknownData_LARP, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, ChunkId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, CookRule, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, UnknownData_86JH, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRules, 0x0010);
		}

		// struct FPrimaryAssetRulesOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, PrimaryAssetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, Rules, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesOverride, 0x0020);
		}

		// struct FAssetManagerRedirect
		TEST_METHOD(ScriptStruct__Engine__AssetManagerRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, Old, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, New, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetManagerRedirect, 0x0020);
		}

		// struct FDirectoryPath
		TEST_METHOD(ScriptStruct__Engine__DirectoryPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectoryPath, Path, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectoryPath, 0x0010);
		}

		// struct FPrimaryAssetTypeInfo
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetTypeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClassLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bHasBlueprintClasses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsEditorOnly, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_G43X, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Directories, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, SpecificAssets, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Rules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetScanPaths, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsDynamicAsset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_M2Y7, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, NumberOfAssets, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetTypeInfo, 0x0088);
		}

		// struct FAssetMapping
		TEST_METHOD(ScriptStruct__Engine__AssetMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, TargetAsset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetMapping, 0x0010);
		}

		// struct FAtmospherePrecomputeParameters
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DensityHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DecayHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, MaxScatteringOrder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexWidth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexWidth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexHeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterAltitudeSampleNum, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuNum, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuSNum, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterNuNum, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeParameters, 0x002C);
		}

		// struct FRuntimeFloatCurve
		TEST_METHOD(ScriptStruct__Engine__RuntimeFloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, EditorCurveData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, ExternalCurve, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeFloatCurve, 0x0078);
		}

		// struct FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__BaseAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_NZ4L, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, DistanceAlgorithm, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_YD9A, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, CustomAttenuationCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShape, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_G1U7, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, dBAttenuationAtMax, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShapeExtents, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, ConeOffset, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffDistance, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_5YAN, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseAttenuationSettings, 0x00A8);
		}

		// struct FAudioComponentParam
		TEST_METHOD(ScriptStruct__Engine__AudioComponentParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, FloatParam, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, BoolParam, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_1API, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, IntParam, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_YBGF, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, SoundWaveParam, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioComponentParam, 0x0020);
		}

		// struct FAudioQualitySettings
		TEST_METHOD(ScriptStruct__Engine__AudioQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, MaxChannels, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, UnknownData_FX2I, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioQualitySettings, 0x0020);
		}

		// struct FInteriorSettings
		TEST_METHOD(ScriptStruct__Engine__InteriorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, UnknownData_ZNZG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorVolume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPFTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPFTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteriorSettings, 0x0024);
		}

		// struct FReverbSettings
		TEST_METHOD(ScriptStruct__Engine__ReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, UnknownData_QX0E, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, UnknownData_XPX8, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbEffect, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, Volume, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, FadeTime, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReverbSettings, 0x0018);
		}

		// struct FFilePath
		TEST_METHOD(ScriptStruct__Engine__FilePath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilePath, FilePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilePath, 0x0010);
		}

		// struct FLaunchOnTestSettings
		TEST_METHOD(ScriptStruct__Engine__LaunchOnTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, LaunchOnTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, DeviceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLaunchOnTestSettings, 0x0020);
		}

		// struct FEditorMapPerformanceTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorMapPerformanceTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, PerformanceTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, TestTimer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, UnknownData_MCZV, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorMapPerformanceTestDefinition, 0x0020);
		}

		// struct FImportFactorySettingValues
		TEST_METHOD(ScriptStruct__Engine__ImportFactorySettingValues)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, SettingName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportFactorySettingValues, 0x0020);
		}

		// struct FEditorImportWorkflowDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportWorkflowDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, FactorySettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportWorkflowDefinition, 0x0020);
		}

		// struct FBuildPromotionImportWorkflowSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionImportWorkflowSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Diffuse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, StaticMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, ReimportStaticMesh, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, BlendShapeMesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, MorphMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SkeletalMesh, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Animation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Sound, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SurroundSound, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, OtherAssetsToImport, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionImportWorkflowSettings, 0x0150);
		}

		// struct FBuildPromotionOpenAssetSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionOpenAssetSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, BlueprintAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, MaterialAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, ParticleSystemAsset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, SkeletalMeshAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, StaticMeshAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, TextureAsset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionOpenAssetSettings, 0x0060);
		}

		// struct FBuildPromotionNewProjectSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionNewProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectFolderOverride, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectNameOverride, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionNewProjectSettings, 0x0020);
		}

		// struct FBuildPromotionTestSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, DefaultStaticMeshAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, ImportWorkflow, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, OpenAssets, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, NewProjectSettings, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, SourceControlMaterial, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionTestSettings, 0x01F0);
		}

		// struct FBlueprintEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__BlueprintEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, FirstMeshPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, SecondMeshPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, DefaultParticleAsset, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintEditorPromotionSettings, 0x0030);
		}

		// struct FParticleEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__ParticleEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEditorPromotionSettings, DefaultParticleAsset, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEditorPromotionSettings, 0x0010);
		}

		// struct FMaterialEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__MaterialEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultMaterialAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultDiffuseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultNormalTexture, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialEditorPromotionSettings, 0x0030);
		}

		// struct FEditorImportExportTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportExportTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ExportFileExtension, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, bSkipExport, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, UnknownData_7QCC, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, FactorySettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportExportTestDefinition, 0x0038);
		}

		// struct FExternalToolDefinition
		TEST_METHOD(ScriptStruct__Engine__ExternalToolDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ToolName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ExecutablePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, CommandLineOptions, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, WorkingDirectory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptExtension, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptDirectory, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExternalToolDefinition, 0x0060);
		}

		// struct FNavAvoidanceData
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAvoidanceData, UnknownData_V9HB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceData, 0x003C);
		}

		// struct FBlendProfileBoneEntry
		TEST_METHOD(ScriptStruct__Engine__BlendProfileBoneEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BlendScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, UnknownData_APAM, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendProfileBoneEntry, 0x0020);
		}

		// struct FPerBoneInterpolation
		TEST_METHOD(ScriptStruct__Engine__PerBoneInterpolation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, InterpolationSpeedPerSec, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, UnknownData_8R9D, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneInterpolation, 0x0020);
		}

		// struct FEditorElement
		TEST_METHOD(ScriptStruct__Engine__EditorElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Indices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Weights, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorElement, 0x0018);
		}

		// struct FGridBlendSample
		TEST_METHOD(ScriptStruct__Engine__GridBlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, GridElement, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, BlendWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGridBlendSample, 0x001C);
		}

		// struct FBlendSample
		TEST_METHOD(ScriptStruct__Engine__BlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, SampleValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, RateScale, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSample, 0x0018);
		}

		// struct FBlendParameter
		TEST_METHOD(ScriptStruct__Engine__BlendParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Min, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Max, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, GridNum, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, UnknownData_3E5L, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendParameter, 0x0020);
		}

		// struct FInterpolationParameter
		TEST_METHOD(ScriptStruct__Engine__InterpolationParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, UnknownData_48NJ, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpolationParameter, 0x0008);
		}

		// struct FEditedDocumentInfo
		TEST_METHOD(ScriptStruct__Engine__EditedDocumentInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedViewOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedZoomAmount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, UnknownData_W9TL, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditedDocumentInfo, 0x0018);
		}

		// struct FBPInterfaceDescription
		TEST_METHOD(ScriptStruct__Engine__BPInterfaceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Interface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Graphs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPInterfaceDescription, 0x0018);
		}

		// struct FEdGraphTerminalType
		TEST_METHOD(ScriptStruct__Engine__EdGraphTerminalType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategory, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategoryObject, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsConst, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsWeakPointer, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, UnknownData_0W2U, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphTerminalType, 0x0030);
		}

		// struct FSimpleMemberReference
		TEST_METHOD(ScriptStruct__Engine__SimpleMemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleMemberReference, 0x0020);
		}

		// struct FEdGraphPinType
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategory, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryObject, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryMemberReference, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinValueType, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, ContainerType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, UnknownData_W9GH, 0x007A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinType, 0x0080);
		}

		// struct FBPVariableMetaDataEntry
		TEST_METHOD(ScriptStruct__Engine__BPVariableMetaDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableMetaDataEntry, 0x0018);
		}

		// struct FBPVariableDescription
		TEST_METHOD(ScriptStruct__Engine__BPVariableDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarGuid, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, FriendlyName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, Category, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, PropertyFlags, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, RepNotifyFunc, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, ReplicationCondition, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, UnknownData_N2I1, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, MetaDataArray, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, DefaultValue, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableDescription, 0x00F8);
		}

		// struct FBlueprintMacroCosmeticInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintMacroCosmeticInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintMacroCosmeticInfo, UnknownData_64XW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintMacroCosmeticInfo, 0x0001);
		}

		// struct FCompilerNativizationOptions
		TEST_METHOD(ScriptStruct__Engine__CompilerNativizationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, PlatformName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ServerOnlyPlatform, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ClientOnlyPlatform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, UnknownData_EI56, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedModules, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedAssets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedFolderPaths, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompilerNativizationOptions, 0x0080);
		}

		// struct FBlueprintComponentChangedPropertyInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentChangedPropertyInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, UnknownData_BKOF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyScope, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentChangedPropertyInfo, 0x0018);
		}

		// struct FEventGraphFastCallPair
		TEST_METHOD(ScriptStruct__Engine__EventGraphFastCallPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, FunctionToPatch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, EventGraphCallOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, UnknownData_BL2N, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventGraphFastCallPair, 0x0010);
		}

		// struct FBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__BlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintDebugData, UnknownData_QV3W, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintDebugData, 0x0001);
		}

		// struct FPointerToUberGraphFrame
		TEST_METHOD(ScriptStruct__Engine__PointerToUberGraphFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerToUberGraphFrame, UnknownData_6PUG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerToUberGraphFrame, 0x0008);
		}

		// struct FDebuggingInfoForSingleFunction
		TEST_METHOD(ScriptStruct__Engine__DebuggingInfoForSingleFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebuggingInfoForSingleFunction, UnknownData_3JX5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebuggingInfoForSingleFunction, 0x01E0);
		}

		// struct FNodeToCodeAssociation
		TEST_METHOD(ScriptStruct__Engine__NodeToCodeAssociation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeToCodeAssociation, UnknownData_VMP2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeToCodeAssociation, 0x0014);
		}

		// struct FBuilderPoly
		TEST_METHOD(ScriptStruct__Engine__BuilderPoly)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, VertexIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, Direction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, UnknownData_DAOW, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, ItemName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, PolyFlags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, UnknownData_1VLM, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuilderPoly, 0x0028);
		}

		// struct FCachedAnimTransitionData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimTransitionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, FromStateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, ToStateName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, UnknownData_T3PD, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimTransitionData, 0x0028);
		}

		// struct FCachedAnimRelevancyData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimRelevancyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, UnknownData_XJF3, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimRelevancyData, 0x0020);
		}

		// struct FCachedAnimAssetPlayerData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimAssetPlayerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, UnknownData_5BEA, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimAssetPlayerData, 0x0018);
		}

		// struct FCachedAnimStateData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, UnknownData_ZDCS, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateData, 0x0020);
		}

		// struct FCachedAnimStateArray
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, States, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, UnknownData_EDC8, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateArray, 0x0018);
		}

		// struct FFOscillator
		TEST_METHOD(ScriptStruct__Engine__FOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, InitialOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, UnknownData_H9CK, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFOscillator, 0x000C);
		}

		// struct FVOscillator
		TEST_METHOD(ScriptStruct__Engine__VOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Y, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Z, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVOscillator, 0x0024);
		}

		// struct FROscillator
		TEST_METHOD(ScriptStruct__Engine__ROscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Yaw, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Roll, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FROscillator, 0x0024);
		}

		// struct FDummySpacerCameraTypes
		TEST_METHOD(ScriptStruct__Engine__DummySpacerCameraTypes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDummySpacerCameraTypes, UnknownData_QFTD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDummySpacerCameraTypes, 0x0001);
		}

		// struct FCanvasIcon
		TEST_METHOD(ScriptStruct__Engine__CanvasIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, U, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, V, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, UL, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, VL, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasIcon, 0x0018);
		}

		// struct FWrappedStringElement
		TEST_METHOD(ScriptStruct__Engine__WrappedStringElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, LineExtent, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWrappedStringElement, 0x0018);
		}

		// struct FTextSizingParameters
		TEST_METHOD(ScriptStruct__Engine__TextSizingParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawXL, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawYL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, Scaling, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawFont, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, SpacingAdjust, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextSizingParameters, 0x0028);
		}

		// struct FCharacterMovementComponentPostPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__CharacterMovementComponentPostPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterMovementComponentPostPhysicsTickFunction, UnknownData_BQZG, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterMovementComponentPostPhysicsTickFunction, 0x0058);
		}

		// struct FVector_NetQuantize : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize, 0x000C);
		}

		// struct FVector_NetQuantizeNormal : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantizeNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantizeNormal, 0x000C);
		}

		// struct FHitResult
		TEST_METHOD(ScriptStruct__Engine__HitResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_LZ15, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Time, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Distance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Location, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactPoint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Normal, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactNormal, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceStart, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceEnd, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PenetrationDepth, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Item, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PhysMaterial, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Actor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Component, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_JQL9, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, BoneName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, FaceIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_4NBS, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitResult, 0x0088);
		}

		// struct FFindFloorResult
		TEST_METHOD(ScriptStruct__Engine__FindFloorResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, UnknownData_6OGD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, FloorDist, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, LineDist, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, UnknownData_YVYL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, HitResult, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFindFloorResult, 0x0098);
		}

		// struct FResponseChannel
		TEST_METHOD(ScriptStruct__Engine__ResponseChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Response, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, UnknownData_BEV5, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResponseChannel, 0x0010);
		}

		// struct FCustomProfile
		TEST_METHOD(ScriptStruct__Engine__CustomProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, CustomResponses, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomProfile, 0x0018);
		}

		// struct FCustomChannelSetup
		TEST_METHOD(ScriptStruct__Engine__CustomChannelSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, UnknownData_8OH3, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, DefaultResponse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bTraceType, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bStaticObject, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, UnknownData_MF5P, 0x0013);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomChannelSetup, 0x0018);
		}

		// struct FCollisionResponseTemplate
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CollisionEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_DSUE, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, ObjectTypeName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CustomResponses, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, HelpMessage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, bCanModify, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_PHSV, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseTemplate, 0x0060);
		}

		// struct FBlueprintComponentDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, ComponentPropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, DelegatePropertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentDelegateBinding, 0x0018);
		}

		// struct FAutoCompleteNode
		TEST_METHOD(ScriptStruct__Engine__AutoCompleteNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, IndexChar, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_UU5H, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, AutoCompleteListIndices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_X0WA, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteNode, 0x0028);
		}

		// struct FConstraintInstance
		TEST_METHOD(ScriptStruct__Engine__ConstraintInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_EE9V, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, JointName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis1, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos2, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis2, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis2, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularRotationOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_P95R, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ProfileInstance, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_76UV, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintInstance, 0x01F0);
		}

		// struct FCullDistanceSizePair
		TEST_METHOD(ScriptStruct__Engine__CullDistanceSizePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, CullDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCullDistanceSizePair, 0x0008);
		}

		// struct FRuntimeCurveLinearColor
		TEST_METHOD(ScriptStruct__Engine__RuntimeCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ColorCurves, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ExternalCurve, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeCurveLinearColor, 0x01C8);
		}

		// struct FNamedCurveValue
		TEST_METHOD(ScriptStruct__Engine__NamedCurveValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, UnknownData_A2M5, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedCurveValue, 0x0010);
		}

		// struct FCurveTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__CurveTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, CurveTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTableRowHandle, 0x0010);
		}

		// struct FDataTableCategoryHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableCategoryHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, ColumnName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, RowContents, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableCategoryHandle, 0x0018);
		}

		// struct FDataTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableRowHandle, 0x0010);
		}

		// struct FDebugDisplayProperty
		TEST_METHOD(ScriptStruct__Engine__DebugDisplayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, Obj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, WithinClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, UnknownData_WZ4F, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugDisplayProperty, 0x0020);
		}

		// struct FDebugTextInfo
		TEST_METHOD(ScriptStruct__Engine__DebugTextInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorDesiredOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, DebugText, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TimeRemaining, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Duration, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TextColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_ASA6, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, OrigActorLocation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_AW4T, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Font, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, FontScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_Y5FA, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugTextInfo, 0x0060);
		}

		// struct FRollbackNetStartupActorInfo
		TEST_METHOD(ScriptStruct__Engine__RollbackNetStartupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_9V3R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Archetype, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_4BZN, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Level, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRollbackNetStartupActorInfo, 0x0030);
		}

		// struct FLevelNameAndTime
		TEST_METHOD(ScriptStruct__Engine__LevelNameAndTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelChangeTimeInMS, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, UnknownData_Q747, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelNameAndTime, 0x0018);
		}

		// struct FDialogueContext
		TEST_METHOD(ScriptStruct__Engine__DialogueContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Speaker, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Targets, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContext, 0x0018);
		}

		// struct FDialogueWaveParameter
		TEST_METHOD(ScriptStruct__Engine__DialogueWaveParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, DialogueWave, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, Context, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueWaveParameter, 0x0020);
		}

		// struct FDialogueContextMapping
		TEST_METHOD(ScriptStruct__Engine__DialogueContextMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Context, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, SoundWave, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, LocalizationKeyFormat, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Proxy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContextMapping, 0x0038);
		}

		// struct FGraphReference
		TEST_METHOD(ScriptStruct__Engine__GraphReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, MacroGraph, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphReference, 0x0020);
		}

		// struct FEdGraphPinReference
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, OwningNode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, PinId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinReference, 0x0018);
		}

		// struct FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, UnknownData_ZG3Q, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescription, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, TooltipDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Category, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Keywords, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Grouping, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SectionID, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescriptionArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchTitlesArray, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchKeywordsArray, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchCategoryArray, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedMenuDescriptionArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchTitlesArray, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchKeywordsArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchCategoryArray, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SearchText, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction, 0x0100);
		}

		// struct FEdGraphSchemaAction_NewNode : public FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction_NewNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction_NewNode, NodeTemplate, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction_NewNode, 0x0108);
		}

		// struct FPluginRedirect
		TEST_METHOD(ScriptStruct__Engine__PluginRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, OldPluginName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, NewPluginName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPluginRedirect, 0x0020);
		}

		// struct FStructRedirect
		TEST_METHOD(ScriptStruct__Engine__StructRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, OldStructName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, NewStructName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructRedirect, 0x0010);
		}

		// struct FClassRedirect
		TEST_METHOD(ScriptStruct__Engine__ClassRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldSubobjName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewSubobjName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassPackage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, InstanceOnly, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, UnknownData_QSJL, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassRedirect, 0x0040);
		}

		// struct FGameNameRedirect
		TEST_METHOD(ScriptStruct__Engine__GameNameRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, OldGameName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, NewGameName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameNameRedirect, 0x0010);
		}

		// struct FScreenMessageString
		TEST_METHOD(ScriptStruct__Engine__ScreenMessageString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, ScreenMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, DisplayColor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TimeToDisplay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, CurrentTimeDisplayed, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TextScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, UnknownData_ULZQ, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScreenMessageString, 0x0030);
		}

		// struct FDropNoteInfo
		TEST_METHOD(ScriptStruct__Engine__DropNoteInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Comment, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDropNoteInfo, 0x0028);
		}

		// struct FStatColorMapEntry
		TEST_METHOD(ScriptStruct__Engine__StatColorMapEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, In, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, Out, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapEntry, 0x0008);
		}

		// struct FStatColorMapping
		TEST_METHOD(ScriptStruct__Engine__StatColorMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, StatName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, ColorMap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, UnknownData_KB6D, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapping, 0x0028);
		}

		// struct FURL
		TEST_METHOD(ScriptStruct__Engine__URL)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Protocol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Host, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Port, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, UnknownData_8CGT, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Map, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, RedirectURL, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Op, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Portal, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Valid, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, UnknownData_FU3Z, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FURL, 0x0070);
		}

		// struct FFullyLoadedPackagesInfo
		TEST_METHOD(ScriptStruct__Engine__FullyLoadedPackagesInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, FullyLoadType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, UnknownData_JF8E, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, PackagesToLoad, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, LoadedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFullyLoadedPackagesInfo, 0x0038);
		}

		// struct FLevelStreamingStatus
		TEST_METHOD(ScriptStruct__Engine__LevelStreamingStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, UnknownData_LG7D, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, LODIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelStreamingStatus, 0x0010);
		}

		// struct FNamedNetDriver
		TEST_METHOD(ScriptStruct__Engine__NamedNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, NetDriver, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, UnknownData_9PVF, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedNetDriver, 0x0010);
		}

		// struct FWorldContext
		TEST_METHOD(ScriptStruct__Engine__WorldContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_3KIZ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastURL, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastRemoteURL, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingNetGame, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PackagesToFullyLoad, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_9V7K, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LoadedLevelsForPendingMapChange, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_LWTF, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ObjectReferencers, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingLevelStreamingStatusUpdates, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, GameViewport, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, OwningGameInstance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ActiveNetDrivers, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_I92C, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldContext, 0x0290);
		}

		// struct FNetDriverDefinition
		TEST_METHOD(ScriptStruct__Engine__NetDriverDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DefName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassNameFallback, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetDriverDefinition, 0x0018);
		}

		// struct FExposureSettings
		TEST_METHOD(ScriptStruct__Engine__ExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, LogOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, bFixed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, UnknownData_IRE4, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposureSettings, 0x0008);
		}

		// struct FTickPrerequisite
		TEST_METHOD(ScriptStruct__Engine__TickPrerequisite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickPrerequisite, UnknownData_06VM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickPrerequisite, 0x0010);
		}

		// struct FDepthFieldGlowInfo
		TEST_METHOD(ScriptStruct__Engine__DepthFieldGlowInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, UnknownData_90RO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowOuterRadius, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowInnerRadius, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDepthFieldGlowInfo, 0x0024);
		}

		// struct FFontRenderInfo
		TEST_METHOD(ScriptStruct__Engine__FontRenderInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, UnknownData_B6HV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, GlowInfo, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontRenderInfo, 0x0028);
		}

		// struct FRedirector
		TEST_METHOD(ScriptStruct__Engine__Redirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, OldName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, NewName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRedirector, 0x0010);
		}

		// struct FCollectionReference
		TEST_METHOD(ScriptStruct__Engine__CollectionReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionReference, CollectionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionReference, 0x0008);
		}

		// struct FComponentReference
		TEST_METHOD(ScriptStruct__Engine__ComponentReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, OtherActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, ComponentProperty, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, UnknownData_GK4K, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentReference, 0x0018);
		}

		// struct FConstrainComponentPropName
		TEST_METHOD(ScriptStruct__Engine__ConstrainComponentPropName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstrainComponentPropName, ComponentName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstrainComponentPropName, 0x0008);
		}

		// struct FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__DamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, UnknownData_Y07A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, DamageTypeClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageEvent, 0x0010);
		}

		// struct FRadialDamageParams
		TEST_METHOD(ScriptStruct__Engine__RadialDamageParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, BaseDamage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, MinimumDamage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, InnerRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, OuterRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, DamageFalloff, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageParams, 0x0014);
		}

		// struct FRadialDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__RadialDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Params, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Origin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, ComponentHits, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageEvent, 0x0040);
		}

		// struct FPointDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__PointDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, Damage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, ShotDirection, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, HitInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointDamageEvent, 0x00A8);
		}

		// struct FPOV
		TEST_METHOD(ScriptStruct__Engine__POV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, FOV, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPOV, 0x001C);
		}

		// struct FAnimUpdateRateParameters
		TEST_METHOD(ScriptStruct__Engine__AnimUpdateRateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_F4H9, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UpdateRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, EvaluationRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_OTT4, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, TickedPoseOffestTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, AdditionalTime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_9X8C, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseNonRenderedUpdateRate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseVisibleDistanceFactorThesholds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, LODToFrameSkipMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, MaxEvalRateForInterpolation, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, ShiftBucket, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_S1SB, 0x0085);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimUpdateRateParameters, 0x0088);
		}

		// struct FAnimSlotDesc
		TEST_METHOD(ScriptStruct__Engine__AnimSlotDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, NumChannels, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, UnknownData_8CNU, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotDesc, 0x0010);
		}

		// struct FAnimSlotInfo
		TEST_METHOD(ScriptStruct__Engine__AnimSlotInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, ChannelWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotInfo, 0x0018);
		}

		// struct FMTDResult
		TEST_METHOD(ScriptStruct__Engine__MTDResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Direction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Distance, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMTDResult, 0x0010);
		}

		// struct FOverlapResult
		TEST_METHOD(ScriptStruct__Engine__OverlapResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Component, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_XKQX, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_OTBJ, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlapResult, 0x0018);
		}

		// struct FPrimitiveMaterialRef
		TEST_METHOD(ScriptStruct__Engine__PrimitiveMaterialRef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Primitive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, decal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, ElementIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, UnknownData_6SZO, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveMaterialRef, 0x0018);
		}

		// struct FSwarmDebugOptions
		TEST_METHOD(ScriptStruct__Engine__SwarmDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwarmDebugOptions, UnknownData_T9T0, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSwarmDebugOptions, 0x0004);
		}

		// struct FLightmassDebugOptions
		TEST_METHOD(ScriptStruct__Engine__LightmassDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_AL4P, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, CoplanarTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_7TTQ, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, ExecutionTimeDivisor, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDebugOptions, 0x0010);
		}

		// struct FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, IndirectLightingSaturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, ShadowExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, bUseAreaShadowsForStationaryLight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, UnknownData_1SUA, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassLightSettings, 0x000C);
		}

		// struct FLightmassDirectionalLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassDirectionalLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDirectionalLightSettings, LightSourceAngle, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDirectionalLightSettings, 0x0010);
		}

		// struct FLightmassPointLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPointLightSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPointLightSettings, 0x000C);
		}

		// struct FSubtitleCue
		TEST_METHOD(ScriptStruct__Engine__SubtitleCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, UnknownData_BJP4, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubtitleCue, 0x0020);
		}

		// struct FLocalizedSubtitle
		TEST_METHOD(ScriptStruct__Engine__LocalizedSubtitle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedSubtitle, LanguageExt, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedSubtitle, Subtitles, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedSubtitle, UnknownData_30S6, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedSubtitle, 0x0028);
		}

		// struct FBasedPosition
		TEST_METHOD(ScriptStruct__Engine__BasedPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, base, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Position, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseLocation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseRotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedTransPosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedPosition, 0x0038);
		}

		// struct FFractureEffect
		TEST_METHOD(ScriptStruct__Engine__FractureEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, ParticleSystem, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, Sound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureEffect, 0x0010);
		}

		// struct FRigidBodyContactInfo
		TEST_METHOD(ScriptStruct__Engine__RigidBodyContactInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPenetration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, UnknownData_ZZHJ, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, PhysMaterial, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyContactInfo, 0x0030);
		}

		// struct FCollisionImpactData
		TEST_METHOD(ScriptStruct__Engine__CollisionImpactData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, ContactInfos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalNormalImpulse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalFrictionImpulse, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionImpactData, 0x0028);
		}

		// struct FVector_NetQuantize100 : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize100)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize100, 0x000C);
		}

		// struct FRigidBodyState
		TEST_METHOD(ScriptStruct__Engine__RigidBodyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_OOLN, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Quaternion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, LinVel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, AngVel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Flags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_5YLM, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyState, 0x0040);
		}

		// struct FFontCharacter
		TEST_METHOD(ScriptStruct__Engine__FontCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, USize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, TextureIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, UnknownData_48RM, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VerticalOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontCharacter, 0x0018);
		}

		// struct FFontImportOptionsData
		TEST_METHOD(ScriptStruct__Engine__FontImportOptionsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, FontName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Height, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_VD36, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharacterSet, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_83E0, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Chars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnicodeRange, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFilePath, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFileWildcard, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_UPV1, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ForegroundColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_GP2N, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageWidth, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageMaxHeight, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, XPadding, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, YPadding, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxTop, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxBottom, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxRight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxLeft, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_5GO7, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Kerning, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_NYB1, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScaleFactor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScanRadiusScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_9Y5R, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontImportOptionsData, 0x00B0);
		}

		// struct FForceFeedbackAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackAttenuationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackAttenuationSettings, 0x00A8);
		}

		// struct FForceFeedbackChannelDetails
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackChannelDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, UnknownData_WG7D, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, Curve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackChannelDetails, 0x0080);
		}

		// struct FPredictProjectilePathPointData
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Time, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathPointData, 0x001C);
		}

		// struct FPredictProjectilePathResult
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, PathData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, LastTraceDestination, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, UnknownData_TB45, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, HitResult, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathResult, 0x00B8);
		}

		// struct FPredictProjectilePathParams
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, StartLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, LaunchVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithCollision, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_DRU9, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ProjectileRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, MaxSimTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithChannel, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, TraceChannel, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_IKQO, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ObjectTypes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ActorsToIgnore, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, SimFrequency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, OverrideGravityZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_IMD2, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugTime, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceComplex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_23AY, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathParams, 0x0060);
		}

		// struct FActiveHapticFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveHapticFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, HapticEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, UnknownData_ODI3, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveHapticFeedbackEffect, 0x0018);
		}

		// struct FHapticFeedbackDetails_Curve
		TEST_METHOD(ScriptStruct__Engine__HapticFeedbackDetails_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Amplitude, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHapticFeedbackDetails_Curve, 0x00F0);
		}

		// struct FClusterNode
		TEST_METHOD(ScriptStruct__Engine__ClusterNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastInstance, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode, 0x0028);
		}

		// struct FImportanceTexture
		TEST_METHOD(ScriptStruct__Engine__ImportanceTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, NumMips, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_CBXT, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, MarginalCDF, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, ConditionalCDF, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, TextureData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Texture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Weighting, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_MVT3, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportanceTexture, 0x0050);
		}

		// struct FComponentKey
		TEST_METHOD(ScriptStruct__Engine__ComponentKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, OwnerClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, SCSVariableName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, AssociatedGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentKey, 0x0020);
		}

		// struct FBlueprintCookedComponentInstancingData
		TEST_METHOD(ScriptStruct__Engine__BlueprintCookedComponentInstancingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, bIsValid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_6LVR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, ChangedPropertyList, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_CW7I, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintCookedComponentInstancingData, 0x0050);
		}

		// struct FComponentOverrideRecord
		TEST_METHOD(ScriptStruct__Engine__ComponentOverrideRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentKey, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, CookedComponentInstancingData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentOverrideRecord, 0x0080);
		}

		// struct FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputDelegateBinding, UnknownData_CMX9, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputDelegateBinding, 0x0004);
		}

		// struct FBlueprintInputActionDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, UnknownData_11Q1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputActionName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputKeyEvent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, UnknownData_7GBC, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, FunctionNameToBind, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputActionDelegateBinding, 0x0020);
		}

		// struct FBlueprintInputAxisDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, UnknownData_6QPG, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, InputAxisName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisDelegateBinding, 0x0018);
		}

		// struct FBlueprintInputAxisKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, UnknownData_NFUQ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, AxisKey, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, FunctionNameToBind, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisKeyDelegateBinding, 0x0028);
		}

		// struct FBlueprintInputKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_9IYG, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputChord, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputKeyEvent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_7UU2, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, FunctionNameToBind, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputKeyDelegateBinding, 0x0038);
		}

		// struct FBlueprintInputTouchDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, InputKeyEvent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, UnknownData_K1M4, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, FunctionNameToBind, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputTouchDelegateBinding, 0x0010);
		}

		// struct FCurveEdEntry
		TEST_METHOD(ScriptStruct__Engine__CurveEdEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, UnknownData_GVZM, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bHideCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bColorCurve, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bFloatingPointColorCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bClamp, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampLow, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampHigh, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdEntry, 0x0038);
		}

		// struct FCurveEdTab
		TEST_METHOD(ScriptStruct__Engine__CurveEdTab)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, TabName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, Curves, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndInput, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartOutput, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndOutput, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdTab, 0x0030);
		}

		// struct FInterpEdSelKey
		TEST_METHOD(ScriptStruct__Engine__InterpEdSelKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Track, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, KeyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, UnsnappedPosition, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpEdSelKey, 0x0018);
		}

		// struct FCameraPreviewInfo
		TEST_METHOD(ScriptStruct__Engine__CameraPreviewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnInst, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraPreviewInfo, 0x0030);
		}

		// struct FSubTrackGroup
		TEST_METHOD(ScriptStruct__Engine__SubTrackGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, TrackIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, UnknownData_DABA, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubTrackGroup, 0x0028);
		}

		// struct FSupportedSubTrackInfo
		TEST_METHOD(ScriptStruct__Engine__SupportedSubTrackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SupportedClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SubTrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, GroupIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, UnknownData_J9P6, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedSubTrackInfo, 0x0020);
		}

		// struct FAnimControlTrackKey
		TEST_METHOD(ScriptStruct__Engine__AnimControlTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_5U9X, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimStartOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimEndOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_RC3S, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimControlTrackKey, 0x0020);
		}

		// struct FBoolTrackKey
		TEST_METHOD(ScriptStruct__Engine__BoolTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, UnknownData_QPUN, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolTrackKey, 0x0008);
		}

		// struct FDirectorTrackCut
		TEST_METHOD(ScriptStruct__Engine__DirectorTrackCut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TransitionTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TargetCamGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, ShotNumber, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, UnknownData_HNX8, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectorTrackCut, 0x0018);
		}

		// struct FEventTrackKey
		TEST_METHOD(ScriptStruct__Engine__EventTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, UnknownData_JCA8, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, EventName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventTrackKey, 0x0010);
		}

		// struct FInterpLookupPoint
		TEST_METHOD(ScriptStruct__Engine__InterpLookupPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, UnknownData_8MLQ, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupPoint, 0x0010);
		}

		// struct FInterpLookupTrack
		TEST_METHOD(ScriptStruct__Engine__InterpLookupTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupTrack, Points, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupTrack, 0x0010);
		}

		// struct FParticleReplayTrackKey
		TEST_METHOD(ScriptStruct__Engine__ParticleReplayTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Duration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, ClipIDNumber, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleReplayTrackKey, 0x000C);
		}

		// struct FSoundTrackKey
		TEST_METHOD(ScriptStruct__Engine__SoundTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Volume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Pitch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, UnknownData_DF9U, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Sound, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundTrackKey, 0x0018);
		}

		// struct FToggleTrackKey
		TEST_METHOD(ScriptStruct__Engine__ToggleTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, ToggleAction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, UnknownData_IISN, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FToggleTrackKey, 0x0008);
		}

		// struct FVisibilityTrackKey
		TEST_METHOD(ScriptStruct__Engine__VisibilityTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Action, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, ActiveCondition, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, UnknownData_P4DW, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVisibilityTrackKey, 0x0008);
		}

		// struct FActorTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorTickFunction, UnknownData_SD6P, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorTickFunction, 0x0058);
		}

		// struct FRepMovement
		TEST_METHOD(ScriptStruct__Engine__RepMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LinearVelocity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, AngularVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Location, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Rotation, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LocationQuantizationLevel, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, VelocityQuantizationLevel, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, RotationQuantizationLevel, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepMovement, 0x0034);
		}

		// struct FRepAttachment
		TEST_METHOD(ScriptStruct__Engine__RepAttachment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, LocationOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RelativeScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RotationOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, UnknownData_LKL7, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachSocket, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachComponent, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepAttachment, 0x0040);
		}

		// struct FBasedMovementInfo
		TEST_METHOD(ScriptStruct__Engine__BasedMovementInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, MovementBase, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasBaseComponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bRelativeRotation, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasVelocity, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, UnknownData_DDG5, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedMovementInfo, 0x0030);
		}

		// struct FVector_NetQuantize10 : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize10)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize10, 0x000C);
		}

		// struct FRootMotionSourceGroup
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_PV87, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, bHasAdditiveSources, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, bHasOverrideSources, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_80TG, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastPreAdditiveVelocity, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, bIsAdditiveVelocityApplied, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastAccumulatedSettings, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_XG90, 0x00FA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceGroup, 0x0100);
		}

		// struct FRepRootMotionMontage
		TEST_METHOD(ScriptStruct__Engine__RepRootMotionMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bIsActive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_HYP3, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AnimMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Position, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Location, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_QX5N, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBase, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBaseBoneName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativePosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativeRotation, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_TFQM, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AuthoritativeRootMotion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Acceleration, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, LinearVelocity, 0x0154);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepRootMotionMontage, 0x0160);
		}

		// struct FSimulatedRootMotionReplicatedMove
		TEST_METHOD(ScriptStruct__Engine__SimulatedRootMotionReplicatedMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, UnknownData_3ROP, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, RootMotion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulatedRootMotionReplicatedMove, 0x0168);
		}

		// struct FActiveForceFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, ForceFeedbackEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, UnknownData_4D0E, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveForceFeedbackEffect, 0x0018);
		}

		// struct FViewTargetTransitionParams
		TEST_METHOD(ScriptStruct__Engine__ViewTargetTransitionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendFunction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_D62X, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendExp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_MMPS, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FViewTargetTransitionParams, 0x0010);
		}

		// struct FUniqueNetIdRepl : public FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__Engine__UniqueNetIdRepl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, UnknownData_MUKK, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdRepl, 0x0018);
		}

		// struct FActorComponentTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorComponentTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentTickFunction, UnknownData_H1WE, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentTickFunction, 0x0058);
		}

		// struct FLightingChannels
		TEST_METHOD(ScriptStruct__Engine__LightingChannels)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightingChannels, 0x0001);
		}

		// struct FCollisionResponseContainer
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldStatic, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldDynamic, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Pawn, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Visibility, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Camera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, PhysicsBody, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Vehicle, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Destructible, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel3, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel4, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel6, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel1, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel2, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel3, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel4, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel5, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel6, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel7, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel8, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel9, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel10, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel11, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel12, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel13, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel14, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel15, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel16, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel17, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel18, 0x001F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseContainer, 0x0020);
		}

		// struct FCollisionResponse
		TEST_METHOD(ScriptStruct__Engine__CollisionResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseToChannels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponse, 0x0030);
		}

		// struct FWalkableSlopeOverride
		TEST_METHOD(ScriptStruct__Engine__WalkableSlopeOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeBehavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_R9DE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeAngle, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_70G7, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWalkableSlopeOverride, 0x0010);
		}

		// struct FBodyInstance
		TEST_METHOD(ScriptStruct__Engine__BodyInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_DVT3, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, ResponseToChannels, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_5AW5, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, SleepFamily, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, DOFMode, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionEnabled, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_EB92, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionProfileName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionResponses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_JY4C, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxDepenetrationVelocity, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_7S3S, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassInKgOverride, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, LinearDamping, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, AngularDamping, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomDOFPlaneNormal, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, COMNudge, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassScale, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, InertiaTensorScale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, ObjectType, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_0YF4, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, WalkableSlopeOverride, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysMaterialOverride, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxAngularVelocity, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomSleepThresholdMultiplier, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, StabilizationThresholdMultiplier, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysicsBlendWeight, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PositionSolverIterationCount, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_JE4J, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, RigidActorSyncId, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, RigidActorAsyncId, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, VelocitySolverIterationCount, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_8WZB, 0x013C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyInstance, 0x0230);
		}

		// struct FPrimitiveComponentPostPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__PrimitiveComponentPostPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentPostPhysicsTickFunction, UnknownData_SL1K, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveComponentPostPhysicsTickFunction, 0x0058);
		}

		// struct FSkelMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, HiddenMaterials, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, UnknownData_EHBY, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshComponentLODInfo, 0x0020);
		}

		// struct FSkelMeshSkinWeightInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshSkinWeightInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Bones, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Weights, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshSkinWeightInfo, 0x0028);
		}

		// struct FSingleAnimationPlayData
		TEST_METHOD(ScriptStruct__Engine__SingleAnimationPlayData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, AnimToPlay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_GRGZ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPosition, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPlayRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_HHFT, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSingleAnimationPlayData, 0x0018);
		}

		// struct FPoseSnapshot
		TEST_METHOD(ScriptStruct__Engine__PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, LocalTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, BoneNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SkeletalMeshName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SnapshotName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, bIsValid, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, UnknownData_8J5V, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseSnapshot, 0x0038);
		}

		// struct FMarkerSyncAnimPosition
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncAnimPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PreviousMarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, NextMarkerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PositionBetweenMarkers, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, UnknownData_UO0H, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncAnimPosition, 0x0018);
		}

		// struct FPaintedVertex
		TEST_METHOD(ScriptStruct__Engine__PaintedVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Color, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintedVertex, 0x0014);
		}

		// struct FStaticMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, UnknownData_7350, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, PaintedVertices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, UnknownData_KP29, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentLODInfo, 0x00B0);
		}

		// struct FStreamingTextureBuildInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingTextureBuildInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, PackedRelativeBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TextureLevelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TexelFactor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingTextureBuildInfo, 0x000C);
		}

		// struct FLightmassPrimitiveSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPrimitiveSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, UnknownData_TMH5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightFalloffExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightExplicitInfluenceRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveBoost, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, DiffuseBoost, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, FullyOccludedSamplesFraction, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPrimitiveSettings, 0x0018);
		}

		// struct FInstancedStaticMeshInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshInstanceData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshInstanceData, LightmapUVBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshInstanceData, ShadowmapUVBias, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshInstanceData, 0x0050);
		}

		// struct FInstancedStaticMeshMappingInfo
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshMappingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshMappingInfo, UnknownData_69Q4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshMappingInfo, 0x0008);
		}

		// struct FGeomSelection
		TEST_METHOD(ScriptStruct__Engine__GeomSelection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Index, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, SelectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomSelection, 0x000C);
		}

		// struct FAnimGroupInfo
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Color, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInfo, 0x0018);
		}

		// struct FFloatCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__FloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatCurve, FloatCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatCurve, 0x0090);
		}

		// struct FRawCurveTracks
		TEST_METHOD(ScriptStruct__Engine__RawCurveTracks)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawCurveTracks, FloatCurves, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawCurveTracks, 0x0010);
		}

		// struct FTimeStretchCurveMarker
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Alpha, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveMarker, 0x0010);
		}

		// struct FTimeStretchCurve
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, SamplingRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, CurveValueMinPrecision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Markers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Sum_dT_i_by_C_i, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, UnknownData_Q9NA, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurve, 0x0028);
		}

		// struct FSoundAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_BGXQ, 0x00AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, DistanceType, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_9LER, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OmniRadius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, StereoSpread, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SpatializationAlgorithm, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_5JST, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SpatializationPluginSettings, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, RadiusMin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, RadiusMax, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMin, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMax, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, AbsorptionMethod, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_POYF, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomLowpassAirAbsorptionCurve, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomHighpassAirAbsorptionCurve, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMin, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMax, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMin, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMax, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAzimuth, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusAzimuth, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusDistanceScale, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusDistanceScale, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusPriorityScale, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusPriorityScale, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusVolumeAttenuation, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusVolumeAttenuation, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAttackInterpSpeed, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusReleaseInterpSpeed, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionTraceChannel, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_XIHQ, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionLowPassFilterFrequency, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionVolumeAttenuation, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionInterpolationTime, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionPluginSettings, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbSendMethod, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_KSCB, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbPluginSettings, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMin, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMax, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMin, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMax, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomReverbSendCurve, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualReverbSendLevel, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_KFLS, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationSettings, 0x02C0);
		}

		// struct FBoneNode
		TEST_METHOD(ScriptStruct__Engine__BoneNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, ParentIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, TranslationRetargetingMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, UnknownData_W4OP, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneNode, 0x0010);
		}

		// struct FVirtualBone
		TEST_METHOD(ScriptStruct__Engine__VirtualBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, SourceBoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, TargetBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, VirtualBoneName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualBone, 0x0018);
		}

		// struct FSmartNameContainer
		TEST_METHOD(ScriptStruct__Engine__SmartNameContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameContainer, UnknownData_290F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameContainer, 0x0050);
		}

		// struct FAnimSlotGroup
		TEST_METHOD(ScriptStruct__Engine__AnimSlotGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, SlotNames, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotGroup, 0x0018);
		}

		// struct FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KShapeElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_EOJ5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKShapeElem, 0x0020);
		}

		// struct FKSphereElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphereElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, TM, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Center, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Radius, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphereElem, 0x0070);
		}

		// struct FKBoxElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KBoxElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, TM, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Orientation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Center, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Rotation, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, X, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Y, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Z, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, UnknownData_MX9H, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKBoxElem, 0x00A0);
		}

		// struct FKSphylElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphylElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, TM, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Orientation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Center, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Rotation, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Radius, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Length, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphylElem, 0x0090);
		}

		// struct FKConvexElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KConvexElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, VertexData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, ElemBox, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_JEKQ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, Transform, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_FPEF, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKConvexElem, 0x0090);
		}

		// struct FKAggregateGeom
		TEST_METHOD(ScriptStruct__Engine__KAggregateGeom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphereElems, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, BoxElems, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphylElems, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, ConvexElems, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, UnknownData_LUTQ, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKAggregateGeom, 0x0048);
		}

		// struct FBranchFilter
		TEST_METHOD(ScriptStruct__Engine__BranchFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BlendDepth, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, UnknownData_JK29, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchFilter, 0x0010);
		}

		// struct FInputBlendPose
		TEST_METHOD(ScriptStruct__Engine__InputBlendPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputBlendPose, BranchFilters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputBlendPose, 0x0010);
		}

		// struct FCanvasUVTri
		TEST_METHOD(ScriptStruct__Engine__CanvasUVTri)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Pos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_UV, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Color, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Pos, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_UV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Color, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Pos, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_UV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Color, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasUVTri, 0x0060);
		}

		// struct FRigidBodyErrorCorrection
		TEST_METHOD(ScriptStruct__Engine__RigidBodyErrorCorrection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, LinearDeltaThresholdSq, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, LinearInterpAlpha, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, LinearRecipFixTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngularDeltaThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngularInterpAlpha, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngularRecipFixTime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, BodySpeedThresholdSq, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyErrorCorrection, 0x001C);
		}

		// struct FTableRowBase
		TEST_METHOD(ScriptStruct__Engine__TableRowBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowBase, UnknownData_FU96, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowBase, 0x0008);
		}

		// struct FTextureLODGroup
		TEST_METHOD(ScriptStruct__Engine__TextureLODGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_STFY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_FDBN, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, NumStreamedMips, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipGenSettings, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_6HX6, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinLODSize, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_DRM5, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinMagFilter, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipFilter, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureLODGroup, 0x0038);
		}

		// struct FInterpControlPoint
		TEST_METHOD(ScriptStruct__Engine__InterpControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, PositionControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, bPositionIsRelative, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, UnknownData_STO6, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpControlPoint, 0x001C);
		}

		// struct FDebugFloatHistory
		TEST_METHOD(ScriptStruct__Engine__DebugFloatHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, Samples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MinValue, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, bAutoAdjustMinMax, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, UnknownData_V1AU, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugFloatHistory, 0x0020);
		}

		// struct FFormatArgumentData
		TEST_METHOD(ScriptStruct__Engine__FormatArgumentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_NJ4U, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueInt, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueFloat, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueGender, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_I7AX, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFormatArgumentData, 0x0040);
		}

		// struct FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__MaterialInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, UnknownData_9AC4, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, InputName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, Mask, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, MaskR, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, MaskG, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, MaskB, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, MaskA, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, UnknownData_LRQL, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, ExpressionName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInput, 0x0038);
		}

		// struct FColorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ColorMaterialInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorMaterialInput, UnknownData_4LSW, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorMaterialInput, Constant, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorMaterialInput, 0x0040);
		}

		// struct FScalarMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ScalarMaterialInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarMaterialInput, UnknownData_ZGY2, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarMaterialInput, Constant, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarMaterialInput, 0x0040);
		}

		// struct FVectorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__VectorMaterialInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorMaterialInput, UnknownData_FAJK, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorMaterialInput, Constant, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorMaterialInput, 0x0048);
		}

		// struct FVector2MaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__Vector2MaterialInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2MaterialInput, UnknownData_IC9X, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2MaterialInput, ConstantX, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2MaterialInput, ConstantY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2MaterialInput, UnknownData_9KE9, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2MaterialInput, 0x0048);
		}

		// struct FMaterialAttributesInput : public FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__MaterialAttributesInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialAttributesInput, PropertyConnectedBitmask, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialAttributesInput, UnknownData_KWRY, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialAttributesInput, 0x0040);
		}

		// struct FVectorDistribution
		TEST_METHOD(ScriptStruct__Engine__VectorDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorDistribution, 0x0028);
		}

		// struct FVector4Distribution
		TEST_METHOD(ScriptStruct__Engine__Vector4Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4Distribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4Distribution, 0x0028);
		}

		// struct FFloatRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__FloatRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRK4SpringInterpolator, 0x0008);
		}

		// struct FVectorRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__VectorRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorRK4SpringInterpolator, 0x0008);
		}

		// struct FBranchingPointNotifyPayload
		TEST_METHOD(ScriptStruct__Engine__BranchingPointNotifyPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointNotifyPayload, UnknownData_AXZD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointNotifyPayload, 0x0020);
		}

		// struct FPlatformInterfaceData
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_VIIV, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, IntValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, FloatValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_Y4AH, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, StringValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, ObjectValue, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceData, 0x0030);
		}

		// struct FPlatformInterfaceDelegateResult
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceDelegateResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, bSuccessful, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, UnknownData_U61T, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceDelegateResult, 0x0038);
		}

		// struct FSHAHashData
		TEST_METHOD(ScriptStruct__BuildPatchServices__SHAHashData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSHAHashData, Hash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSHAHashData, 0x0014);
		}

		// struct FCustomFieldData
		TEST_METHOD(ScriptStruct__BuildPatchServices__CustomFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomFieldData, 0x0020);
		}

		// struct FChunkPartData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkPartData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Offset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Size, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkPartData, 0x0018);
		}

		// struct FFileManifestData
		TEST_METHOD(ScriptStruct__BuildPatchServices__FileManifestData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, Filename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileHash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_GVAH, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileChunkParts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, InstallTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsUnixExecutable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_A455, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, SymlinkTarget, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsReadOnly, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsCompressed, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_2P4T, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFileManifestData, 0x0070);
		}

		// struct FChunkInfoData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkInfoData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Hash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, ShaHash, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_KNBU, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, FileSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, GroupNumber, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_Y2LM, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkInfoData, 0x0040);
		}

		// struct FNewDB_Ban
		TEST_METHOD(UserDefinedStruct__NewDB_Ban__NewDB_Ban)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Ban, viewer_id_12_F4C40EAD4F3ECFBE41F5B0A529FCF650, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Ban, when_time_76_21224C3549A5D7C827B60DA7DA1D6AD4, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Ban, ban_time_hours_77_EA6403B341DD4DEEAF702F9032EA0240, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Ban, ban_category_78_D3C76EEA4D7918795E919BA213B51DFE, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Ban, admin_id_79_2AD8F7D5472A747AFCEBA6B466E262EA, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_Ban, comment_81_3028EF204E72F67400BECEA4B7F9F838, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNewDB_Ban, 0x0060);
		}

		// struct FVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__Vector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2D, 0x0008);
		}

		// struct FBox2D
		TEST_METHOD(ScriptStruct__CoreUObject__Box2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Max, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, bIsValid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, UnknownData_SMBM, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox2D, 0x0014);
		}

		// struct FVector
		TEST_METHOD(ScriptStruct__CoreUObject__Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector, 0x000C);
		}

		// struct FBoxSphereBounds
		TEST_METHOD(ScriptStruct__CoreUObject__BoxSphereBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, Origin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, BoxExtent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, SphereRadius, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoxSphereBounds, 0x001C);
		}

		// struct FOrientedBox
		TEST_METHOD(ScriptStruct__CoreUObject__OrientedBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentZ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrientedBox, 0x003C);
		}

		// struct FPlane : public FVector
		TEST_METHOD(ScriptStruct__CoreUObject__Plane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlane, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlane, 0x0010);
		}

		// struct FMatrix
		TEST_METHOD(ScriptStruct__CoreUObject__Matrix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, XPlane, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, YPlane, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, ZPlane, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, WPlane, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatrix, 0x0040);
		}

		// struct FVector4
		TEST_METHOD(ScriptStruct__CoreUObject__Vector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4, 0x0010);
		}

		// struct FTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__TwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v2, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwoVectors, 0x0018);
		}

		// struct FRotator
		TEST_METHOD(ScriptStruct__CoreUObject__Rotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Yaw, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Roll, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotator, 0x000C);
		}

		// struct FQuat
		TEST_METHOD(ScriptStruct__CoreUObject__Quat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuat, 0x0010);
		}

		// struct FPackedNormal
		TEST_METHOD(ScriptStruct__CoreUObject__PackedNormal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Z, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, W, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedNormal, 0x0004);
		}

		// struct FLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__LinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, G, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, B, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, A, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearColor, 0x0010);
		}

		// struct FInterpCurvePointLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, ArriveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, LeaveTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InterpMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, UnknownData_9GPI, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointLinearColor, 0x0038);
		}

		// struct FInterpCurveLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, UnknownData_9JCD, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveLinearColor, 0x0018);
		}

		// struct FTransform
		TEST_METHOD(ScriptStruct__CoreUObject__Transform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Translation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_JJUK, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Scale3D, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_DTCS, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransform, 0x0030);
		}

		// struct FRandomStream
		TEST_METHOD(ScriptStruct__CoreUObject__RandomStream)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, InitialSeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, Seed, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomStream, 0x0008);
		}

		// struct FTimespan
		TEST_METHOD(ScriptStruct__CoreUObject__Timespan)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimespan, UnknownData_1VTQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimespan, 0x0008);
		}

		// struct FPackedRGB10A2N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGB10A2N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGB10A2N, Packed, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGB10A2N, 0x0004);
		}

		// struct FPackedRGBA16N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGBA16N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, XY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, ZW, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGBA16N, 0x0008);
		}

		// struct FIntPoint
		TEST_METHOD(ScriptStruct__CoreUObject__IntPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntPoint, 0x0008);
		}

		// struct FIntVector
		TEST_METHOD(ScriptStruct__CoreUObject__IntVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntVector, 0x000C);
		}

		// struct FColor
		TEST_METHOD(ScriptStruct__CoreUObject__Color)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, R, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, A, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColor, 0x0004);
		}

		// struct FBox
		TEST_METHOD(ScriptStruct__CoreUObject__Box)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Max, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, IsValid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, UnknownData_TRI0, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox, 0x001C);
		}

		// struct FJoinabilitySettings
		TEST_METHOD(ScriptStruct__CoreUObject__JoinabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, SessionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bPublicSearchable, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bAllowInvites, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresence, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresenceFriendsOnly, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPlayers, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPartySize, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, UnknownData_G7DH, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoinabilitySettings, 0x0018);
		}

		// struct FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__CoreUObject__UniqueNetIdWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdWrapper, UnknownData_J0QP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdWrapper, 0x0001);
		}

		// struct FGuid
		TEST_METHOD(ScriptStruct__CoreUObject__Guid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, B, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, C, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, D, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGuid, 0x0010);
		}

		// struct FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftObjectPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, AssetPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, SubPathString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftObjectPath, 0x0018);
		}

		// struct FSoftClassPath : public FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftClassPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftClassPath, 0x0018);
		}

		// struct FPrimaryAssetType
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetType, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetType, 0x0008);
		}

		// struct FPrimaryAssetId
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetId, 0x0010);
		}

		// struct FFallbackStruct
		TEST_METHOD(ScriptStruct__CoreUObject__FallbackStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallbackStruct, UnknownData_0SNY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFallbackStruct, 0x0001);
		}

		// struct FFloatRangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, UnknownData_SMXZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRangeBound, 0x0008);
		}

		// struct FFloatRange
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRange, 0x0010);
		}

		// struct FInt32RangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__Int32RangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, UnknownData_U4WW, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32RangeBound, 0x0008);
		}

		// struct FInt32Range
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Range)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Range, 0x0010);
		}

		// struct FFloatInterval
		TEST_METHOD(ScriptStruct__CoreUObject__FloatInterval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatInterval, 0x0008);
		}

		// struct FInt32Interval
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Interval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Interval, 0x0008);
		}

		// struct FInterpCurvePointVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InterpMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, UnknownData_TQP7, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector, 0x002C);
		}

		// struct FInterpCurveVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, UnknownData_35W6, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector, 0x0018);
		}

		// struct FInterpCurvePointQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_GTBG, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, OutVal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, ArriveTangent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, LeaveTangent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InterpMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_RLHM, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointQuat, 0x0050);
		}

		// struct FInterpCurveQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, UnknownData_732Z, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveQuat, 0x0018);
		}

		// struct FInterpCurvePointTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, ArriveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, LeaveTangent, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InterpMode, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, UnknownData_F4UY, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointTwoVectors, 0x0050);
		}

		// struct FInterpCurveTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, UnknownData_9YXS, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveTwoVectors, 0x0018);
		}

		// struct FInterpCurvePointFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, ArriveTangent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, LeaveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InterpMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, UnknownData_FR02, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointFloat, 0x0014);
		}

		// struct FInterpCurveFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, UnknownData_NXU5, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveFloat, 0x0018);
		}

		// struct FInterpCurvePointVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InterpMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, UnknownData_BHDO, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector2D, 0x0020);
		}

		// struct FInterpCurveVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, UnknownData_7WPO, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector2D, 0x0018);
		}

		// struct FDateTime
		TEST_METHOD(ScriptStruct__CoreUObject__DateTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDateTime, UnknownData_66Q1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDateTime, 0x0008);
		}

		// struct FAutomationEvent
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, UnknownData_X0Z5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Context, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Filename, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, LineNumber, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, UnknownData_I59X, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Timestamp, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationEvent, 0x0048);
		}

		// struct FAnchors
		TEST_METHOD(ScriptStruct__Slate__Anchors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Minimum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Maximum, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchors, 0x0010);
		}

		// struct FInputChord
		TEST_METHOD(ScriptStruct__Slate__InputChord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, UnknownData_JJ64, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputChord, 0x0020);
		}

		// struct FGenericTeamId
		TEST_METHOD(ScriptStruct__AIModule__GenericTeamId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericTeamId, TeamID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericTeamId, 0x0001);
		}

		// struct FPawnActionStack
		TEST_METHOD(ScriptStruct__AIModule__PawnActionStack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionStack, TopAction, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionStack, 0x0008);
		}

		// struct FPawnActionEvent
		TEST_METHOD(ScriptStruct__AIModule__PawnActionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, Action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, UnknownData_CP9F, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionEvent, 0x0018);
		}

		// struct FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, UnknownData_VEMH, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, CachedProperty, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataBinding, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataField, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderValue, 0x0020);
		}

		// struct FAIDataProviderTypedValue : public FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderTypedValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderTypedValue, PropertyType, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderTypedValue, 0x0028);
		}

		// struct FAIDataProviderBoolValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderBoolValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, UnknownData_7YNE, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderBoolValue, 0x0030);
		}

		// struct FAIDataProviderFloatValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderFloatValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, UnknownData_NYZD, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderFloatValue, 0x0030);
		}

		// struct FAIDataProviderIntValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderIntValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, UnknownData_DP42, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderIntValue, 0x0030);
		}

		// struct FAIDataProviderStructValue : public FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderStructValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderStructValue, UnknownData_99LL, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderStructValue, 0x0030);
		}

		// struct FAIStimulus
		TEST_METHOD(ScriptStruct__AIModule__AIStimulus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Age, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ExpirationAge, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Strength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, StimulusLocation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ReceiverLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_EWKS, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Tag, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_TA7J, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_LK2W, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIStimulus, 0x0048);
		}

		// struct FActorPerceptionBlueprintInfo
		TEST_METHOD(ScriptStruct__AIModule__ActorPerceptionBlueprintInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, LastSensedStimuli, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, UnknownData_VX1A, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorPerceptionBlueprintInfo, 0x0020);
		}

		// struct FAISenseAffiliationFilter
		TEST_METHOD(ScriptStruct__AIModule__AISenseAffiliationFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISenseAffiliationFilter, UnknownData_QDO9, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISenseAffiliationFilter, 0x0004);
		}

		// struct FAIDamageEvent
		TEST_METHOD(ScriptStruct__AIModule__AIDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Location, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, HitLocation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, UnknownData_ZV5U, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, DamagedActor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Instigator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDamageEvent, 0x0030);
		}

		// struct FAINoiseEvent
		TEST_METHOD(ScriptStruct__AIModule__AINoiseEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_R4HX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, NoiseLocation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Loudness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, MaxRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Instigator, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Tag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_3T2P, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAINoiseEvent, 0x0030);
		}

		// struct FAIPredictionEvent
		TEST_METHOD(ScriptStruct__AIModule__AIPredictionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, Requestor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, PredictedActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, UnknownData_B38K, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIPredictionEvent, 0x0018);
		}

		// struct FAISightEvent
		TEST_METHOD(ScriptStruct__AIModule__AISightEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, UnknownData_AL8H, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, SeenActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, Observer, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISightEvent, 0x0018);
		}

		// struct FAITeamStimulusEvent
		TEST_METHOD(ScriptStruct__AIModule__AITeamStimulusEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, UnknownData_BZC1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Broadcaster, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Enemy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITeamStimulusEvent, 0x0038);
		}

		// struct FAITouchEvent
		TEST_METHOD(ScriptStruct__AIModule__AITouchEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, UnknownData_C64Y, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, TouchReceiver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, OtherActor, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITouchEvent, 0x0020);
		}

		// struct FAIMoveRequest
		TEST_METHOD(ScriptStruct__AIModule__AIMoveRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, GoalActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, UnknownData_2SX7, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIMoveRequest, 0x0040);
		}

		// struct FBehaviorTreeTemplateInfo
		TEST_METHOD(ScriptStruct__AIModule__BehaviorTreeTemplateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Asset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Template, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, UnknownData_LG7D, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBehaviorTreeTemplateInfo, 0x0018);
		}

		// struct FBlackboardKeySelector
		TEST_METHOD(ScriptStruct__AIModule__BlackboardKeySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, AllowedTypes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_4IWI, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_XSQC, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardKeySelector, 0x0028);
		}

		// struct FBlackboardEntry
		TEST_METHOD(ScriptStruct__AIModule__BlackboardEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, EntryName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, KeyType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, UnknownData_AVD5, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardEntry, 0x0018);
		}

		// struct FBTDecoratorLogic
		TEST_METHOD(ScriptStruct__AIModule__BTDecoratorLogic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Operation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, UnknownData_TC85, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Number, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTDecoratorLogic, 0x0004);
		}

		// struct FBTCompositeChild
		TEST_METHOD(ScriptStruct__AIModule__BTCompositeChild)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildComposite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildTask, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, Decorators, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, DecoratorOps, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTCompositeChild, 0x0030);
		}

		// struct FCrowdAvoidanceSamplingPattern
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceSamplingPattern)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Angles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Radii, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceSamplingPattern, 0x0020);
		}

		// struct FCrowdAvoidanceConfig
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, VelocityBias, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, DesiredVelocityWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CurrentVelocityWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, SideBiasWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CustomPatternIdx, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDivisions, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveRings, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDepth, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceConfig, 0x001C);
		}

		// struct FEnvQueryInstanceCache
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryInstanceCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, Template, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, UnknownData_BF98, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryInstanceCache, 0x01C0);
		}

		// struct FEnvQueryRequest
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, Owner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, World, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, UnknownData_N110, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryRequest, 0x0068);
		}

		// struct FAIDynamicParam
		TEST_METHOD(ScriptStruct__AIModule__AIDynamicParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, UnknownData_SKFG, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, Value, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, BBKey, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDynamicParam, 0x0038);
		}

		// struct FEQSParametrizedQueryExecutionRequest
		TEST_METHOD(ScriptStruct__AIModule__EQSParametrizedQueryExecutionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryConfig, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, EQSQueryBlackboardKey, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, RunMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_AW8A, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_4HQF, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEQSParametrizedQueryExecutionRequest, 0x0048);
		}

		// struct FEnvQueryResult
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_FPFW, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, ItemType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_423H, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, OptionIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, QueryID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_N4IO, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryResult, 0x0040);
		}

		// struct FEnvOverlapData
		TEST_METHOD(ScriptStruct__AIModule__EnvOverlapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentZ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ShapeOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapChannel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapShape, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_CNC7, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_4V15, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvOverlapData, 0x0020);
		}

		// struct FEnvDirection
		TEST_METHOD(ScriptStruct__AIModule__EnvDirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineFrom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineTo, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, DirMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, UnknownData_4WV8, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvDirection, 0x0020);
		}

		// struct FAIRequestID
		TEST_METHOD(ScriptStruct__AIModule__AIRequestID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIRequestID, RequestID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIRequestID, 0x0004);
		}

		// struct FEnvTraceData
		TEST_METHOD(ScriptStruct__AIModule__EnvTraceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, VersionNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_UAVG, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, NavigationFilter, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectDown, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentX, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentY, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentZ, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, PostProjectionVerticalOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceChannel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, SerializedChannel, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceShape, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceMode, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_IPM6, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvTraceData, 0x0030);
		}

		// struct FEnvNamedValue
		TEST_METHOD(ScriptStruct__AIModule__EnvNamedValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, UnknownData_8BQ6, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, Value, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvNamedValue, 0x0010);
		}

		// struct FActorSequenceObjectReference
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_OVA5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, ActorId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_86UX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, PathToComponent, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReference, 0x0028);
		}

		// struct FActorSequenceObjectReferences
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferences, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferences, 0x0010);
		}

		// struct FActorSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, BindingIds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, References, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferenceMap, 0x0020);
		}

		// struct FBPUniqueNetId
		TEST_METHOD(ScriptStruct__AdvancedSessions__BPUniqueNetId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPUniqueNetId, UnknownData_COWB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPUniqueNetId, 0x0020);
		}

		// struct FBPOnlineUser
		TEST_METHOD(ScriptStruct__AdvancedSessions__BPOnlineUser)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPOnlineUser, UniqueNetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPOnlineUser, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPOnlineUser, RealName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPOnlineUser, 0x0040);
		}

		// struct FBPOnlineRecentPlayer : public FBPOnlineUser
		TEST_METHOD(ScriptStruct__AdvancedSessions__BPOnlineRecentPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPOnlineRecentPlayer, LastSeen, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPOnlineRecentPlayer, 0x0050);
		}

		// struct FSessionsSearchSetting
		TEST_METHOD(ScriptStruct__AdvancedSessions__SessionsSearchSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionsSearchSetting, UnknownData_S7J9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionsSearchSetting, 0x0028);
		}

		// struct FSessionPropertyKeyPair
		TEST_METHOD(ScriptStruct__AdvancedSessions__SessionPropertyKeyPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionPropertyKeyPair, UnknownData_JKNP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionPropertyKeyPair, 0x0020);
		}

		// struct FBPUserOnlineAccount
		TEST_METHOD(ScriptStruct__AdvancedSessions__BPUserOnlineAccount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPUserOnlineAccount, UnknownData_WNI5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPUserOnlineAccount, 0x0010);
		}

		// struct FBPFriendPresenceInfo
		TEST_METHOD(ScriptStruct__AdvancedSessions__BPFriendPresenceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendPresenceInfo, bIsOnline, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendPresenceInfo, bIsPlaying, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendPresenceInfo, bIsPlayingThisGame, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendPresenceInfo, bIsJoinable, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendPresenceInfo, bHasVoiceSupport, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendPresenceInfo, PresenceState, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendPresenceInfo, UnknownData_PL7L, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendPresenceInfo, StatusString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPFriendPresenceInfo, 0x0018);
		}

		// struct FBPFriendInfo
		TEST_METHOD(ScriptStruct__AdvancedSessions__BPFriendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendInfo, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendInfo, RealName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendInfo, OnlineState, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendInfo, UnknownData_7ZO2, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendInfo, UniqueNetId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendInfo, bIsPlayingSameGame, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendInfo, UnknownData_TLRZ, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPFriendInfo, PresenceInfo, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPFriendInfo, 0x0068);
		}

		// struct FGameplayTag
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTag, TagName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTag, 0x0008);
		}

		// struct FGameplayTagContainer
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, GameplayTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, ParentTags, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagContainer, 0x0020);
		}

		// struct FGameplayTagSource
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, UnknownData_XCZV, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceTagList, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagSource, 0x0018);
		}

		// struct FGameplayTagQuery
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TokenStreamVersion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UnknownData_YGT0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TagDictionary, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, QueryTokenStream, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, AutoDescription, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagQuery, 0x0048);
		}

		// struct FGameplayTagCreationWidgetHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCreationWidgetHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCreationWidgetHelper, UnknownData_T84D, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCreationWidgetHelper, 0x0001);
		}

		// struct FGameplayTagReferenceHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagReferenceHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReferenceHelper, UnknownData_IS9S, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagReferenceHelper, 0x0040);
		}

		// struct FGameplayTagNode
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagNode, UnknownData_7D9W, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagNode, 0x0050);
		}

		// struct FGameplayTagTableRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, DevComment, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagTableRow, 0x0020);
		}

		// struct FGameplayTagCategoryRemap
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCategoryRemap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, BaseCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, RemapCategories, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCategoryRemap, 0x0020);
		}

		// struct FGameplayTagRedirect
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, OldTagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, NewTagName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagRedirect, 0x0010);
		}

		// struct FMRMeshConfiguration
		TEST_METHOD(ScriptStruct__MRMesh__MRMeshConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMRMeshConfiguration, UnknownData_7MBV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMRMeshConfiguration, 0x0001);
		}

		// struct FTimeOfDayData
		TEST_METHOD(UserDefinedStruct__TimeOfDayData__TimeOfDayData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayData, PresetTimeOfDay_48_72731B344467C1038DE1E18CEB2DA386, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayData, SkyUpperColor_36_F574B1FF4C660D607018378D4D29D5D8, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayData, SkyLowerColor_37_9AE60C56438D767F5189779E892918F6, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayData, CloudsUpperColor_38_427730AB4B57918C2621AC9E42481B18, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayData, CloudsLowerColor_39_8C51A73643E77F6D68DF0C9FB66307B7, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayData, CloudsSecondaryColor_53_DC9F541A4A5DF218D25F3BAEFD108CC9, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayData, CloudsBackground_40_C26ACFC54FD13F33D88102AE41FC8C47, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayData, SunColor_41_4127FF7441301541CCC14C97D84E54F5, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayData, MoonColor_42_A8304BE24B8F8E787E683A8FEA4D486C, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayData, StarsColor_43_5B3DF4A1431B005F9583B498B90E49FC, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayData, FogColor_44_3CDDDC604F2BA0AD72A137903A4167F5, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeOfDayData, 0x00A4);
		}

		// struct FCv4_MagazinesStructure
		TEST_METHOD(UserDefinedStruct__Cv4_MagazinesStructure__Cv4_MagazinesStructure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv4_MagazinesStructure, MagazineEnum_5_673BA971495E1848EBF557A5A8F170D0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv4_MagazinesStructure, UnknownData_HN4O, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv4_MagazinesStructure, TPSMesh_4_B8AAD7124331D1670250C582D90296F1, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCv4_MagazinesStructure, 0x0010);
		}

		// struct FClothCollisionPrim_Sphere
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Sphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, BoneIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, Radius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, LocalPosition, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Sphere, 0x0014);
		}

		// struct FClothCollisionPrim_Convex
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Convex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, Planes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, BoneIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, UnknownData_B497, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Convex, 0x0018);
		}

		// struct FClothCollisionPrim_SphereConnection
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_SphereConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_SphereConnection, SphereIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_SphereConnection, 0x0008);
		}

		// struct FClothCollisionData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Spheres, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, SphereConnections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Convexes, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionData, 0x0030);
		}

		// struct FLevelSequenceSnapshotSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceSnapshotSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, ZeroPadAmount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, UnknownData_O6MR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, FrameRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceSnapshotSettings, 0x0008);
		}

		// struct FLevelSequencePlayerSnapshot
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequencePlayerSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_J6FQ, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotLocalTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_6JKV, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CameraComponent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, Settings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ShotID, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_7TFH, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequencePlayerSnapshot, 0x0058);
		}

		// struct FLevelSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObjectReferenceMap, UnknownData_209E, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObjectReferenceMap, 0x0050);
		}

		// struct FLevelSequenceLegacyObjectReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceLegacyObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceLegacyObjectReference, UnknownData_PPL7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceLegacyObjectReference, 0x0020);
		}

		// struct FLevelSequenceObject
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ObjectOrOwner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, UnknownData_60H5, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ComponentName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, CachedComponent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObject, 0x0038);
		}

		// struct FBoundActorProxy
		TEST_METHOD(ScriptStruct__LevelSequence__BoundActorProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoundActorProxy, UnknownData_D87C, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoundActorProxy, 0x0001);
		}

		// struct FLevelSequenceBindingReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ExternalObjectPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ObjectPath, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReference, 0x0038);
		}

		// struct FLevelSequenceBindingReferenceArray
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferenceArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferenceArray, References, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferenceArray, 0x0010);
		}

		// struct FLevelSequenceBindingReferences
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, BindingIdToReferences, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferences, 0x0050);
		}

		// struct FGrenadeStructure
		TEST_METHOD(UserDefinedStruct__GrenadeStructure__GrenadeStructure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrenadeStructure, GrenadeEnum_28_EB65E9D544453C1084DCFFACA7E5AD7A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrenadeStructure, GrenadeType_2_B0E451A5423242F35F5B6FB5BFA44E4C, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrenadeStructure, UnknownData_RDEI, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrenadeStructure, TimertoBoom_7_4E13F63242F9DAD6BD933490223B722B, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrenadeStructure, Damage_11_3EDE9AF84F8A76DEA7A557BF2BD571DB, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrenadeStructure, DamageRadius_18_96DEE8C547EC30F3F5A8C2991F44B93B, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrenadeStructure, Mesh_14_309CA8E64BE99F775EB1CD93E9EF08BD, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrenadeStructure, ExploseParticle_21_FA1D38E545310F4809BAC8BFE6A204B6, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrenadeStructure, ExploseSoundCue_24_0A9BA9BC4EF6328213D076A99CD1770B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrenadeStructure, SkeletalMesh_27_CE7DA274496E2EFB49BC1AB4F289399A, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrenadeStructure, Speed_31_151C2C9A44B5BC9A6957DBB37CC6858D, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrenadeStructure, 0x0034);
		}

		// struct FMovieSceneEmptyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEmptyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEmptyStruct, UnknownData_4X6O, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEmptyStruct, 0x0001);
		}

		// struct FMovieSceneEvaluationGroupLUTIndex
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroupLUTIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, LUTOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumInitPtrs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumEvalPtrs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroupLUTIndex, 0x000C);
		}

		// struct FMovieSceneSequenceID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceID, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceID, 0x0004);
		}

		// struct FMovieSceneTrackIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackIdentifier, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackIdentifier, 0x0004);
		}

		// struct FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldTrackPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, TrackIdentifier, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldTrackPtr, 0x0008);
		}

		// struct FMovieSceneEvaluationFieldSegmentPtr : public FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldSegmentPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldSegmentPtr, SegmentIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldSegmentPtr, 0x000C);
		}

		// struct FMovieSceneEvaluationGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, LUTIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, SegmentPtrLUT, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroup, 0x0020);
		}

		// struct FMovieSceneEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, TrackIdentifier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SectionIdentifier, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationKey, 0x000C);
		}

		// struct FMovieSceneOrderedEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneOrderedEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, EvaluationIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneOrderedEvaluationKey, 0x0010);
		}

		// struct FMovieSceneEvaluationMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveEntities, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationMetaData, 0x0020);
		}

		// struct FMovieSceneEvaluationField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Ranges, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Groups, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, MetaData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationField, 0x0030);
		}

		// struct FMovieSceneExpansionState
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneExpansionState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneExpansionState, bExpanded, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneExpansionState, 0x0001);
		}

		// struct FMovieSceneEditorData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ExpansionStates, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkingRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewRange, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEditorData, 0x0070);
		}

		// struct FMovieSceneBinding
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, ObjectGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, BindingName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, Tracks, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBinding, 0x0030);
		}

		// struct FMovieSceneObjectBindingID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Space, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, UnknownData_0IZL, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Guid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingID, 0x0018);
		}

		// struct FMovieSceneBindingOverrideData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBindingOverrideData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, Object, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, bOverridesDefault, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, UnknownData_0VDM, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBindingOverrideData, 0x0024);
		}

		// struct FOptionalMovieSceneBlendType
		TEST_METHOD(ScriptStruct__MovieScene__OptionalMovieSceneBlendType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, BlendType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, bIsValid, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOptionalMovieSceneBlendType, 0x0002);
		}

		// struct FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplateBase, UnknownData_IZGL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplateBase, 0x0010);
		}

		// struct FMovieSceneEvalTemplate : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, CompletionMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_V6KY, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, SourceSection, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplate, 0x0020);
		}

		// struct FMovieSceneSegment
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegment, UnknownData_55PH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegment, 0x0050);
		}

		// struct FMovieSceneEvalTemplatePtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplatePtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplatePtr, UnknownData_VND3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplatePtr, 0x0038);
		}

		// struct FMovieSceneTrackImplementationPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementationPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackImplementationPtr, UnknownData_UO6S, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementationPtr, 0x0038);
		}

		// struct FMovieSceneEvaluationTrack
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationMethod, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_4MYJ, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, Segments, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ChildTemplates, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, TrackTemplate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationGroup, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_S5L7, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTrack, 0x0080);
		}

		// struct FMovieSceneSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, Offset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceTransform, 0x0008);
		}

		// struct FMovieSceneSubSequenceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, SequenceKeyObject, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, RootToSequenceTransform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, SourceSequenceSignature, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, DeterministicSequenceID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PreRollRange, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PostRollRange, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, HierarchicalBias, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceData, 0x0050);
		}

		// struct FMovieSceneSequenceHierarchyNode
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchyNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, ParentID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, UnknownData_HMFG, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, Children, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchyNode, 0x0018);
		}

		// struct FMovieSceneSequenceHierarchy
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, SubSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, Hierarchy, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchy, 0x00A0);
		}

		// struct FMovieSceneTrackIdentifiers
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackIdentifiers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackIdentifiers, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackIdentifiers, 0x0010);
		}

		// struct FMovieSceneTemplateGenerationLedger
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTemplateGenerationLedger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, LastTrackIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, UnknownData_TWGE, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, TrackReferenceCounts, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, TrackSignatureToTrackIdentifier, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTemplateGenerationLedger, 0x00A8);
		}

		// struct FMovieSceneEvaluationTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_KI3V, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, EvaluationField, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, Hierarchy, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateLedger, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_PMTM, 0x0219);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplate, 0x0220);
		}

		// struct FCachedMovieSceneEvaluationTemplate : public FMovieSceneEvaluationTemplate
		TEST_METHOD(ScriptStruct__MovieScene__CachedMovieSceneEvaluationTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedMovieSceneEvaluationTemplate, 0x0220);
		}

		// struct FMovieSceneSequenceCachedSignature
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceCachedSignature)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceCachedSignature, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceCachedSignature, CachedSignature, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceCachedSignature, 0x0018);
		}

		// struct FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyStruct, UnknownData_Z5BL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyStruct, 0x0008);
		}

		// struct FMovieSceneLegacyTrackInstanceTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneLegacyTrackInstanceTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLegacyTrackInstanceTemplate, Track, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneLegacyTrackInstanceTemplate, 0x0028);
		}

		// struct FMovieScenePropertySectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyPath, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, NotifyFunctionName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionData, 0x0028);
		}

		// struct FMovieScenePropertySectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionTemplate, PropertyData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionTemplate, 0x0048);
		}

		// struct FMovieSceneSpawnable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSpawnable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ObjectTemplate, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ChildPossessables, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Ownership, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_6VFA, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnable, 0x0040);
		}

		// struct FMovieSceneTrackEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvalOptions, UnknownData_SOEK, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvalOptions, 0x0004);
		}

		// struct FMovieSceneTrackCompilationParams
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackCompilationParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackCompilationParams, bForEditorPreview, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackCompilationParams, bDuringBlueprintCompile, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackCompilationParams, 0x0002);
		}

		// struct FMovieSceneTrackImplementation : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementation, 0x0010);
		}

		// struct FMovieScenePossessable
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePossessable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, PossessedObjectClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, ParentGuid, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePossessable, 0x0038);
		}

		// struct FMovieSceneEasingSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEasingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseOutTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseIn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseIn, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_2CSU, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseInTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseOut, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseOut, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_W8V9, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseOutTime, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEasingSettings, 0x0038);
		}

		// struct FMovieSceneTrackLabels
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackLabels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackLabels, Strings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackLabels, 0x0010);
		}

		// struct FMovieSceneSectionEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, bCanEditCompletionMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, CompletionMode, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionEvalOptions, 0x0002);
		}

		// struct FMovieSceneSectionParameters
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, TimeScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, HierarchicalBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PrerollTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PostrollTime, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionParameters, 0x0014);
		}

		// struct FSectionEvaluationData
		TEST_METHOD(ScriptStruct__MovieScene__SectionEvaluationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ImplIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ForcedTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, UnknownData_VAZT, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSectionEvaluationData, 0x000C);
		}

		// struct FMovieSceneSequencePlaybackSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequencePlaybackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, LoopCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, PlayRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bRandomStartTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_ZYPK, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, StartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bRestoreState, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bDisableMovementInput, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bDisableLookAtInput, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bHidePlayer, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, bHideHud, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_K015, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, BindingOverrides, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequencePlaybackSettings, 0x0028);
		}

		// struct Fsurv_2019_FieldsStructure
		TEST_METHOD(UserDefinedStruct__surv_2019_FieldsStructure__surv_2019_FieldsStructure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, viewer_id_12_F4C40EAD4F3ECFBE41F5B0A529FCF650, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, auth_key_32_150219004F8F3CF805BCCDB63BB91BFA, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, item_name_22_21224C3549A5D7C827B60DA7DA1D6AD4, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, item_count_14_EA6403B341DD4DEEAF702F9032EA0240, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, item_mod1_15_D3C76EEA4D7918795E919BA213B51DFE, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, item_mod2_16_2AD8F7D5472A747AFCEBA6B466E262EA, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, base_item_name_17_441896C542FF6448D443FEB00B9444BB, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, base_item_count_18_DA2CEA13415ADA838D13AB9954DD46ED, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, base_item_mod1_19_0DB82FAA4149C651F0F53DAB9388CC6C, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, base_item_mod2_20_00880A904CEDA0C2982AFCA0C16D894A, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, main_interrior_21_ABB035824625A1F10045A691F0F65617, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, device_id_26_0756A28241F6974755ABCB8E97BD84F3, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, admin_29_E16407A3465C5BAEA1F6D0B571706DCB, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, ban_35_10DEBD634D0972B634D8769005C293FF, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, liveddays_38_80E677194EA7DAB4F37BE4ACFAC5996D, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, face_id_41_7B828D604BFEE38ADF120CBB1F5C59FE, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, currentLVL_56_1887BE02446646F1FCC6A8ADA86938FD, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, currentXP_57_55919F1540A6C65D0DEC46BF287577EE, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, isSupportDLC_58_2958F9574C7157117D4180A294180B9C, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, isOtherDLC_59_43FA1BB648F8EDA424517A8D9A3D1C93, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, lastDate_60_57CE530245B37AECC2327B969D9317B2, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, bonusDays_61_99D9415E47AA1C311576809DE4F9C9B8, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, exitsCount_62_1D5DEFAB4BA466BD677567A647486BC3, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, Money_65_A17DC7D542D44CC5B8E43187391BDD65, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, UnknownData_MKVX, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, Magazine_68_BAD671624CC94E311486D4B3E29ED0AD, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fsurv_2019_FieldsStructure, BaseMagazine_71_ECDF96604FBA9C48872A05A9F1E643B6, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Fsurv_2019_FieldsStructure, 0x0198);
		}

		// struct FCv2_LootStructure
		TEST_METHOD(UserDefinedStruct__Cv2_LootStructure__Cv2_LootStructure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_LootStructure, ID_59_C083C5294C55250D154441B10ED0E35C, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_LootStructure, LootID_2_B02A0B684BB7A11FD0BF94A81E13D578, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_LootStructure, UnknownData_OX7E, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_LootStructure, MaxCount_5_907552B944723DE76BA6059A492D663E, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_LootStructure, UnknownData_BJCX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_LootStructure, NameItem_8_93C70CDB4E722C7B5F2B7C9F407DB276, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_LootStructure, EquipStaticMesh_38_49DABFD041289631B618E986D91F92E4, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_LootStructure, EqipSkeletalMesh_49_0861373047034A1997203A9E18A52D71, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_LootStructure, LootType_26_5983DAD6482D6AC403E766AD085ECD30, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_LootStructure, WeaponEnum_27_D8DC2FB147051BEF91AF3D8E181E93DC, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_LootStructure, UnknownData_Z3PE, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_LootStructure, Effectivity_30_144BF90F495D90D4C7281EABA9C7F831, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_LootStructure, LootStaticMesh_37_2319DE9D445F5B5802EAF0890E5D270E, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_LootStructure, CombineEnterLoot_45_816B85E64BE46F86A7DCA6A54309A263, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_LootStructure, CombineExitLoot_46_C716F0324F2B43966535529FDB1D52BD, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_LootStructure, CombineMainCost_72_3B83ABC04564E6440C8B11AF8957A4BB, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_LootStructure, CombineEnterCost_73_02ABADC5468A76BA85C92AA088CC1A31, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_LootStructure, CombineOutCraft_69_9D561AF64A8F14983C3D3782DCDC3C14, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_LootStructure, Price_52_CCF3FC1E45D1F2DC50531BA6568D493C, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCv2_LootStructure, 0x009C);
		}

		// struct FWeatherData
		TEST_METHOD(UserDefinedStruct__WeatherData__WeatherData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsScale_6_46BD2FFD4101E62C58B396AE3DAA8046, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsDensity_8_C959F15B494C31785AB9BDA43B1D7D13, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsHarness_10_C035BB69421FE083D844959BBFE947D1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsTranslucent_18_6BF1A8914FAA8F67988B9DADC914CBC6, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsBlend_17_0B0902B849FFF532D0FA73AD750162A7, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsDistotion_19_FF8260554CA3B701D6C62A87A392E3BA, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsScattering_20_EA03A384445C04BBBC4EA2A3A28674D9, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsUpperBrightness_47_80E6F59C44C0E63FF352E1ACA405DEAD, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsLowerBrightness_48_C275CDC444671D9809D344A043817F24, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsAmbient_26_B3DE5189457AF2F2C9061DAE095629E4, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsShadowSize_32_30070F544C29A5175B4905A3CAA43C9B, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsShadowSoft_33_242397844998748E4CE442A82FABD76E, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsBackground_34_81AB1CD743507906283E26BC8179CD02, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsHorizonDensity_35_A9DA12E04BD1ACCE877556A07AFC0A81, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsHorizonAlpha_36_B5FE09604EE51B66C6109689DD26A633, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, CloudsHorizonScattering_38_96C12A72485C8C653890E983ADECA031, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, HorizonFalloff_41_7ADEA15D4BAFCED09051BDAAB67D0E6E, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, WindForceScale_42_494196B04350B9CE2B731E97799FE070, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, WindDynamic_45_4BD5C5EC4B00477CD0BAC8857B6087F7, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, WindDispersing_46_747C4F2B40612E5FE76792B0CB7C4E90, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, SkylightBrightness_52_D0DC0C2C48095A9468CA2A8ECC6B512B, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, SecondLayerColor_71_16427994489B87788D8B02B67E7E863B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, SecondLayerAlpha_72_8759E297465AF80FD8856791526E7414, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, SecondLayerScale_77_6F5F9AE84D7C8132AF2BD68DD7F5A018, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeatherData, SecondLayerWind_73_58F8ABAE4AE471692F3D53A832B70EC0, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeatherData, 0x0064);
		}

		// struct FCv2_FurnitureStructutre
		TEST_METHOD(UserDefinedStruct__Cv2_FurnitureStructutre__Cv2_FurnitureStructutre)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_FurnitureStructutre, StaticMesh_4_E35979FA426A1DD752166D84C6DA3559, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_FurnitureStructutre, DestructionMesh_5_EA51DEE2496F448B9D5A9A85A72E60FC, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_FurnitureStructutre, Type_8_B31EB7D74CAAF0526F86DCBBE3E9EE8B, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_FurnitureStructutre, UnknownData_FOXH, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_FurnitureStructutre, hitPoints_11_0FB6D0A841D58CAEA8F1D981BC27E0D2, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCv2_FurnitureStructutre, 0x0018);
		}

		// struct FAppleARKitFrame
		TEST_METHOD(ScriptStruct__AppleARKit__AppleARKitFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleARKitFrame, UnknownData_JOGR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAppleARKitFrame, 0x00B0);
		}

		// struct FAppleARKitHitTestResult
		TEST_METHOD(ScriptStruct__AppleARKit__AppleARKitHitTestResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleARKitHitTestResult, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleARKitHitTestResult, UnknownData_9W1U, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleARKitHitTestResult, Distance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleARKitHitTestResult, UnknownData_LRAE, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleARKitHitTestResult, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleARKitHitTestResult, Anchor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleARKitHitTestResult, UnknownData_3TGZ, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAppleARKitHitTestResult, 0x0050);
		}

		// struct FAppleARKitLightEstimate
		TEST_METHOD(ScriptStruct__AppleARKit__AppleARKitLightEstimate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleARKitLightEstimate, bIsValid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleARKitLightEstimate, UnknownData_CZL5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleARKitLightEstimate, AmbientIntensity, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAppleARKitLightEstimate, 0x0008);
		}

		// struct FAppleARKitCamera
		TEST_METHOD(ScriptStruct__AppleARKit__AppleARKitCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleARKitCamera, TrackingQuality, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleARKitCamera, UnknownData_7CQJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleARKitCamera, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleARKitCamera, Orientation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleARKitCamera, Translation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleARKitCamera, ImageResolution, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleARKitCamera, FocalLength, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleARKitCamera, PrincipalPoint, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleARKitCamera, UnknownData_7VXP, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAppleARKitCamera, 0x0080);
		}

		// struct FGUI_InventoryAboutCraftStr
		TEST_METHOD(UserDefinedStruct__GUI_InventoryAboutCraftStr__GUI_InventoryAboutCraftStr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_InventoryAboutCraftStr, CraftType_2_97CC3B534F8FF86D15BD1F9ABDA99F84, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_InventoryAboutCraftStr, UnknownData_JE0R, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_InventoryAboutCraftStr, AboutText1_6_877D3BFE41E9AA75C2E50C9F1319166F, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_InventoryAboutCraftStr, AboutText2_8_BC54E6B0488C1E0FE287038F07563318, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_InventoryAboutCraftStr, Pictures_12_9969FF18476B34A8515D54810C4A7CBC, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_InventoryAboutCraftStr, IconScale_19_DE55FC564EDEF61374E182BAB553AE5D, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGUI_InventoryAboutCraftStr, 0x004C);
		}

		// struct FCaptureProtocolID
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CaptureProtocolID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureProtocolID, Identifier, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureProtocolID, 0x0008);
		}

		// struct FCaptureResolution
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CaptureResolution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResY, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureResolution, 0x0008);
		}

		// struct FCompositionGraphCapturePasses
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CompositionGraphCapturePasses)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositionGraphCapturePasses, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositionGraphCapturePasses, 0x0010);
		}

		// struct FMovieSceneCaptureSettings
		TEST_METHOD(ScriptStruct__MovieSceneCapture__MovieSceneCaptureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputDirectory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, GameModeOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputFormat, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bOverwriteExisting, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseRelativeFrameNumbers, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_709Y, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, HandleFrames, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, ZeroPadFrameNumbers, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_Q6HH, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, FrameRate, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, Resolution, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bEnableTextureStreaming, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicEngineScalability, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicMode, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowMovement, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowTurning, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowPlayer, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowHUD, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_BRJO, 0x0047);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCaptureSettings, 0x0048);
		}

		// struct FUdpMockMessage
		TEST_METHOD(ScriptStruct__UdpMessaging__UdpMockMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUdpMockMessage, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUdpMockMessage, 0x0010);
		}

		// struct FGeometryCacheMeshData
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshData, UnknownData_DHEN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshData, 0x0050);
		}

		// struct FTrackRenderData
		TEST_METHOD(ScriptStruct__GeometryCache__TrackRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackRenderData, UnknownData_95SJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackRenderData, 0x0050);
		}

		// struct FGeometryCacheMeshBatchInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshBatchInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshBatchInfo, UnknownData_VBW0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshBatchInfo, 0x000C);
		}

		// struct FIOSBuildResourceFilePath
		TEST_METHOD(ScriptStruct__IOSRuntimeSettings__IOSBuildResourceFilePath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIOSBuildResourceFilePath, FilePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIOSBuildResourceFilePath, 0x0010);
		}

		// struct FIOSBuildResourceDirectory
		TEST_METHOD(ScriptStruct__IOSRuntimeSettings__IOSBuildResourceDirectory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIOSBuildResourceDirectory, Path, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIOSBuildResourceDirectory, 0x0010);
		}

		// struct FOverlayItem
		TEST_METHOD(ScriptStruct__Overlay__OverlayItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, EndTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, Text, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, Position, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlayItem, 0x0028);
		}

		// struct FSelectSpawnOfficerStr
		TEST_METHOD(UserDefinedStruct__SelectSpawnOfficerStr__SelectSpawnOfficerStr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSelectSpawnOfficerStr, Location_2_438612A54DDA4B4828519DB56A6B73F0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSelectSpawnOfficerStr, UnknownData_6QHD, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSelectSpawnOfficerStr, UinqID_7_1FDB3A874C5A9DFB9AA617883FA87079, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSelectSpawnOfficerStr, 0x0020);
		}

		// struct FKey
		TEST_METHOD(ScriptStruct__InputCore__Key)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, KeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, UnknownData_DZ24, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKey, 0x0018);
		}

		// struct FCv2_WeaponsStructure
		TEST_METHOD(UserDefinedStruct__Cv2_WeaponsStructure__Cv2_WeaponsStructure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, Enum_71_A60C03004395369085A49D8FD70292B9, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, WeaponType_88_181B957E4A30954AE5216A88A98F0497, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, UnknownData_QB4X, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, FPSModel_67_8B2CB21240D0B6FB538CF3A58391EB77, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, TPSModel_70_F281D89D4E6036A431368698913C16C2, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, TPSModelNoMag_242_0B1C53C949927441A8DF799BAC2CDD8F, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, AnimInstance_75_35C5003447BD1BF887241082338A72D4, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, HandsIdleAnimation_80_44F6725C4CA01A3FAAC02A982909FE23, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, ShootSound_93_6CA6A67B4CEB9D73776AD1862936D21B, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, HandsPosition_83_440E62104CF700282E082081E7ACD4E1, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, AimHandsPositionDefault_196_216933DC40599525407AF197B2D6EB8C, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, AimHandsPositionMODs_158_615082004469A3D1645A28AF2FD0CF7D, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, WeaponRotator_102_D01CB50C4072038319FBECAAA02049CB, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, Damage_6_1AC9E0BB4EC959F9BB570B96F470CAA9, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, Recoil_9_175E19814661DDEF156043B0E8844B57, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, RecoilBack_193_BC92B27A4BD8AC130DEB878F90EE82A1, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, Accuracy_64_BD287F954A17F7ECFE6FD2AC212EB381, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, Mass_16_6762BF044B9C024127647A9EA2755E2A, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, Range_99_7629FAFC42F69C64EF3C2B8F2331099F, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, SemiAuto_90_8494FD5F429F841ED81D68AC31DF06D0, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, isShotGun_173_95828BB4474AE6FD8F467482D08A9AE2, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, UnknownData_2IPN, 0x0086);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, FireRate_12_0C4AA11042C03C7AC81CBE9EBE9E7B2E, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, AmmoClip_21_89285A994E64116FD04E8F869E346409, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, AmmoItem_96_B92343FD49B34E5FF796B48C1B940F1F, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, UnknownData_8VX6, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, Hand_Anim_Fire_41_0C3C0F524873714D296B318642EDC585, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, Hand_Anim_PullOut_50_0BE2DC0142E8E38D218CAF9568B6977E, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, Hand_Anim_Reload_58_C38BEFC94DB590DDAA18D685A53AD1E1, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, Wpn_Anim_Fire_25_BF4ECEFD4080C180265A7785E3F3D9CE, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, Wpn_Anim_PullOut_28_9A911917422C10931457388E9EFB26F5, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, Wpn_Anim_Reload_30_8321201A4BE5BB17B6A5358D5354D3E2, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, Hand_Anim_Rechamber_57_DCFBA4284B1BF0C4CEA7669220A35448, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, Hand_Anim_Reload_Intro_59_F4C6AD064BCA8EF2F92B4A99FEC15E9A, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, Hand_Anim_Reload_Loop_60_18DB8DD34922899187E32BBB3BCCF3DD, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, Hand_Anim_Reload_Out_61_92F9CF6B41CE22F4406CDC961747F051, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, Wpn_Anim_Rechamber_38_A248BFB84F4B4B89114161AFD43223DA, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, Wpn_Anim_Reload_Intro_32_552952BB4A0B23C80CB063B0C2A4D138, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, Wpn_Anim_Reload_Loop_34_4D16374047CD3A4419F978A360132F44, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, Wpn_Anim_Reload_Out_36_3ECDC6D0479F61A729183B9B17A8B539, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, ShellSpawn_108_BDFC35644F12DE2D628107AAC4A70E26, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, ItemEnum_106_B8D657B24699EF0000F957AB983995FB, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, UnknownData_JM4D, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, TPSMuzzleFlashLocation_117_D6C3B7D74796427CBFFDBB8B0F57C8CD, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, OpticMODs_154_946C9C904EB07FE4BF6882B80009892A, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, FovDefault_195_FEBD39304C7CE9D76F9FF4A15E59CD90, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, UnknownData_CE55, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, FovMods_194_BBA6FFD74E51A20B171487B7C8054D1C, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, ScopesFPSPositions_211_1DCCFB354DC6465A5296EB8B5748CC44, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, ScopesTPSMeshes_209_1FE4AC524E5AEDC5D2EC32BD72806C33, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, WeaponLenght_165_3FD1D3ED4A2DD4B1ADE7779C23707BE0, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, WeaponUpLocation_168_66D808BD48DCEB0DEA86A89F56EDC52B, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, FPSFlashCorrection_171_6DCA4B29480FDB5536F6EDADF329FB9A, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, isStandartIronSight_175_AA89EF284A502408D1364D8B0DB5ACAA, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, UnknownData_WMVS, 0x0185);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, StandartIronSightPosition_184_6E1B544145F04FBF5A9784BE4196B2B1, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, UnknownData_KB0I, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, StandartIronSightFPSMesh_182_02A45C13403586FA4708CBB005EE2F20, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, StandartIronSightTPSMesh_183_902AEDD24214B1557CEF41BB42125715, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, TPSShootMontage_187_68DA4068480E781B3B0685BE36F79823, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, TPSRifleIdleAnimation_190_88F127624004A3EE64735588A32FF0CC, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, isDifficultReload_198_0176AD444E069F3C0C0D499824F82E32, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, UnknownData_SGOS, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, ReloadLoopTime_201_2600CD8348A081E419C6DAB9CC784A96, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, SilencerMOD_202_57424C384EA45B0EF0112FB1EFFE2F6E, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, SilencersFPSPositions_213_0AF8ECFB47681E61718A9FBA2D0145D8, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, SilencerTPSMeshes_214_36E30C324EFB7CDA2AF5769E36502E50, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, SilencerParticles_221_9224874549741E5701E4BEBB6AE1AFF1, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, SilencerSounds_222_64CFF65848F0E9822E05259585212D6C, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, CountBurstBullets_227_57135C7C43830300F666548B7B2E380A, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, UnknownData_FX4X, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, MagazinesName_237_C17E7C5D46E06A77178E89A6B1527D38, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, MagazinesMesh_238_0C58D3DE401D8C1B26DEE7B18FC97B9E, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_WeaponsStructure, MagazinesLocation_239_A69EEA324C48D00E3F58EB82BD685E8F, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCv2_WeaponsStructure, 0x0248);
		}

		// struct FCv2_LootCargoStructure
		TEST_METHOD(UserDefinedStruct__Cv2_LootCargoStructure__Cv2_LootCargoStructure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_LootCargoStructure, LootID_4_FA6B93294DC283AE0D274F94264B21C8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_LootCargoStructure, UnknownData_EG0C, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_LootCargoStructure, Count_5_B4E58A1A4E1B089A0C717DA9724AA16E, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCv2_LootCargoStructure, 0x0008);
		}

		// struct FCv2_CraftBuildingsStructure
		TEST_METHOD(UserDefinedStruct__Cv2_CraftBuildingsStructure__Cv2_CraftBuildingsStructure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_CraftBuildingsStructure, Enum_2_7B8574584E7C082717F81494079A739A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_CraftBuildingsStructure, UnknownData_LPHG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_CraftBuildingsStructure, Items_56_FFD802B84ACFC5FCEC7EC3818A4E39B2, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_CraftBuildingsStructure, Icon256x256_60_5FD7E49245FA1E521678508710947B92, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_CraftBuildingsStructure, StaticMesh_63_8B18F9654D2153B468D34CA223CDE95F, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_CraftBuildingsStructure, ScaleMesh_66_7DF8C1FC4144F4C1E898D2B09B116760, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_CraftBuildingsStructure, PositionZ_78_08A3705643FBCC7B3A7A769D5BC19965, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_CraftBuildingsStructure, RotationZ_81_2CC14DBA4CE00D22279E5FA8247F038F, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_CraftBuildingsStructure, UnknownData_KMHM, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_CraftBuildingsStructure, SpawnedPawn_75_9015AC14492DC82E92724182AF4FDA5E, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_CraftBuildingsStructure, OutItems_85_CCE225254A0763F4E05F28942125A87E, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_CraftBuildingsStructure, DLCID_88_7589F5654C0D9370F95BBA89F808F0D2, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_CraftBuildingsStructure, BonusXP_94_B898460847E3CD5D8D5243B8C94F893B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_CraftBuildingsStructure, MinimumLevel_97_50CE237B484C7DE7700EA9A3DDFD6166, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_CraftBuildingsStructure, IsRebuilding__100_303625EE43DFCF1456E9C693B3CAC90E, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCv2_CraftBuildingsStructure, 0x005D);
		}

		// struct FCrewStructure2
		TEST_METHOD(UserDefinedStruct__CrewStructure2__CrewStructure2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrewStructure2, TypeCrew_2_2FD447294B9857B6D57B8C8B793F7555, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrewStructure2, isEmptySlot__11_70839C1640BAB82FD3DA41A1FAEE2D3C, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrewStructure2, UnknownData_78X1, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrewStructure2, Character_14_B6B508BF454B596A4EF0EE9213A3A814, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrewStructure2, 0x0010);
		}

		// struct FAnimNode_RigidBody : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__ImmediatePhysics__AnimNode_RigidBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverridePhysicsAsset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverrideWorldGravity, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ExternalForce, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverlapChannel, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bEnableWorldGeometry, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_Y6NC, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, SimulationSpace, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_9ZZ9, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bOverrideWorldGravity, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_H8FK, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, CachedBoundsScale, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bComponentSpaceSimulation, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_RRU3, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RigidBody, 0x0240);
		}

		// struct FS_GUI_ShipKillerStrukt
		TEST_METHOD(UserDefinedStruct__S_GUI_ShipKillerStrukt__S_GUI_ShipKillerStrukt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GUI_ShipKillerStrukt, KillerName_2_C94E71BD44B84DC0AEA34FB2C7B13C69, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GUI_ShipKillerStrukt, ShipName_4_E7A0054E419818208BDD13AD736B8886, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GUI_ShipKillerStrukt, Distance_6_EC4017A24B96E939BF34E684CE774F52, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GUI_ShipKillerStrukt, Weapons_11_715A737741AF3784ED0478BCFB1818C4, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GUI_ShipKillerStrukt, TeamKiller_19_B4BD65AC45428084005356AFE992CF0A, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GUI_ShipKillerStrukt, TeamSheep_20_3E8419E847159776A7A3AE9A87367716, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GUI_ShipKillerStrukt, UnknownData_XYSG, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS_GUI_ShipKillerStrukt, DamageType_24_44263D254ED8886D150C5A8264289AA8, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS_GUI_ShipKillerStrukt, 0x0058);
		}

		// struct FVip_Str
		TEST_METHOD(UserDefinedStruct__Vip_Str__Vip_Str)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVip_Str, VipName_2_45B877AB4AFFD51EC3E8EF8A24E8119A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVip_Str, Icon_5_D425163B42EC6AA6E0BAD792165AAA1F, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVip_Str, Ice_coin_cost_8_939268A540001D9F798AB481F57815C4, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVip_Str, Dollars_cost_10_314087B5457357C19064F6922F6D0519, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVip_Str, Surv_coins_cost_12_57E08703436D91437E598EA7F4DAD3C1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVip_Str, 0x002C);
		}

		// struct FVehStructure
		TEST_METHOD(UserDefinedStruct__VehStructure__VehStructure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, Type_9_D97F80814318C51BBDBCB4BB89EBF0C1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, UnknownData_RH6U, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, SkeletalMesh_10_341AA98B4BC9A8D4764081B4A4266E2E, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, AnimBlueprint_37_45573D7641FCA87AD3A05DA4DB31FA9C, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, AnimFireMontage_110_3BF9BE534ACDA0F47C0236963BF13FF9, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, MaxSpeed_8_1DDFE92D43DD847E5BEFD28CA36142D2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, HitPoints_12_AD921B924373C008248FB9B466094E85, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, MinGunYaw_16_8151747D4209F352F156B3AE895F79CD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, MaxGunYaw_15_E9019B224AB9FEF36EE942A74EACC668, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, MinGunPitch_19_8703484948312681418A8EB8D041FF34, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, MaxGunPitch_20_95BDC6F24551412F29BFC498A6A52794, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, TurrelPawn_107_27E18A724A0B031E8275EE89AF3389DD, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, Damage_120_9019EBF04F743BD77E0273863746564E, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, RadiusDamage_119_30E7D84349EC72F928FDB3BA0B812A60, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, AmmoTypeLoot_118_5846C8824EE083990F7E7286FCDF4A66, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, UnknownData_6HD1, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, FireRate_121_6901E9244367EAC14CFE2EB93DDE3A88, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, FireSound_122_36F0E3C8458C3EFA70076EA27AB0DD34, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, MuzzleFlash_125_9ECC43854D054D43DD03E5957435AF75, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, HitEffect_124_0F3B25FE434658E3DBA5C4B8D09EA715, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, RecoilPower_126_DCC59093408398488350FAA66AF93ED2, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, UnknownData_M4KY, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, HitSound_127_68795CF442EB63964E24F6A8EE1B9B92, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, DestructionMesh_155_EBD9331746E1C23C6C97EAA8B215E632, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, LightIndexMaterial_133_5421D879474AD171BD58058FA25AE8CD, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, UnknownData_HHT2, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, VehicleMaterial_134_05854053430E9EDF586DFEB28A837F00, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, VehicleEnemyMaterial_161_3206628A4CD1C04D2E4AB2892866381D, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, VehicleWinterMaterial_192_52786019473B3EAD0C731F9E1E111BF2, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, Side_140_67872513429E7E44841CDE9CDAED6720, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, UnknownData_P1WI, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, BonusXP_143_064F65704C59DC606CF5A9BE21B59EA1, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, DestroyActor_151_117F795A4A62BAAEC57CCA803CDCC0F1, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, TrackMaterial_154_8630EA6B458831EA8B2522B9CE3F665D, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, TurretSpeed_158_0D5896A04E143667C038C3B727537598, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, SpreadGun_166_3CFCC0CC4EC67F26356E35B3B68950AE, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, SecondaryWeapon_170_AC4311F54D7F4FEAF8C816878EFAA1C4, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, UnknownData_86DD, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, TrackIndexA_176_A6227DF74C4181E797755A8D4EFB30AC, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, TrackIndexB_177_4146190246F1E668AB6393BF7B82E9CF, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, TrackReverse__186_533290BD44D982EB1EE36C8A78E938D6, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, Artillery__185_EA5D8CE842C35693E3898F89FA862DA8, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, OnlyMachinegun__183_FED83B4C4259557830A2DC892A742FBD, 0x00CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, x2Machinegun__189_7413EACF4194CDE75263E8B187961B8E, 0x00CF);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, VehicleBortsMaterial_206_CEA2495B4AAD16B55ECCA78A00852AD8, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, WheelsWinterMaterial_199_6F658B2E44E8C5ACCDD50BB7524C9CCA, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, VehicleMaterialIndex_200_5222BBCC444261DAB1550FB8896A7C2F, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, VehicleBortsMaterialIndex_208_2797A4AA43975F60250CBFAC1F7F894A, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehStructure, WheelsMaterialIndex_201_048F6DE342C6FB0AE0BB45A0663576EF, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehStructure, 0x00EC);
		}

		// struct FZ_LootStr
		TEST_METHOD(UserDefinedStruct__Z_LootStr__Z_LootStr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_LootStr, LootID_38_4044E922470C1957C9AB4E97684DFB58, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_LootStr, LootType_5_A826A16A43E4EA8B0E4A5FADA8E61EAF, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_LootStr, UnknownData_8LTG, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_LootStr, Icon_22_9A40D8AE4920EBCF95D49387709CF654, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_LootStr, IsCountable_14_1C290C5D45C266352C7F7598495F3820, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_LootStr, UnknownData_QKSJ, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_LootStr, MaxCount_33_2170502A4C921144B16401B94C35F08D, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_LootStr, Count_11_715BEF7D4FADBD3C2D5839846F790FA8, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_LootStr, IsUsable_24_B903062842656D9B47702791115D5A34, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_LootStr, EqipCategory_28_6185B7DD4E2645208876438C0468BC4A, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_LootStr, EqipSocket_30_1EA0ADEE4D36254D6249E9B83A5BE1A6, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_LootStr, UnknownData_MQ0X, 0x0027);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_LootStr, Name_36_A26DB070456DBD23A12D4194B11AF085, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_LootStr, Description_19_3EAD912245DAD5787CFA42B9D3DBDDC2, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_LootStr, AttachedScopes_65_CC2D1E8A4EACDD1BA1EA59A951A0A548, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_LootStr, AttachedSilencer_66_9D332EF44AD75E7D03BE77B67DF2D3EC, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_LootStr, AttachedMagazines_72_7CA6DB89426A20E3009C90B632A9B838, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_LootStr, UnknownData_ODD6, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_LootStr, Mass_69_A392767D4E9BC7BB28019C8A7BC485EE, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FZ_LootStr, 0x0060);
		}

		// struct FEngineServicePing
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePing, UnknownData_7FVS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePing, 0x0001);
		}

		// struct FEngineServiceAuthDeny
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthDeny)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserToDeny, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthDeny, 0x0020);
		}

		// struct FEngineServiceNotification
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceNotification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, TimeSeconds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceNotification, 0x0018);
		}

		// struct FEngineServicePong
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, CurrentLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, EngineVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, HasBegunPlay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_XAG4, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, SessionId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, WorldTimeSeconds, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_5B8R, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePong, 0x0050);
		}

		// struct FEngineServiceTerminate
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceTerminate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceTerminate, UserName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceTerminate, 0x0010);
		}

		// struct FEngineServiceExecuteCommand
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceExecuteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, UserName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceExecuteCommand, 0x0020);
		}

		// struct FEngineServiceAuthGrant
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthGrant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserToGrant, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthGrant, 0x0020);
		}

		// struct FAutoCompleteCommand
		TEST_METHOD(ScriptStruct__EngineSettings__AutoCompleteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Desc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, UnknownData_SX4M, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteCommand, 0x0028);
		}

		// struct FGameModeName
		TEST_METHOD(ScriptStruct__EngineSettings__GameModeName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, GameMode, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameModeName, 0x0028);
		}

		// struct FMovieSceneMediaSectionParams
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaSectionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, SectionStartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, UnknownData_R6WL, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, Source, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, Proxy, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaSectionParams, 0x0020);
		}

		// struct FMovieSceneMediaSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionTemplate, PropertyData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionTemplate, Params, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaSectionTemplate, 0x0068);
		}

		// struct FMediaPlaneParameters
		TEST_METHOD(ScriptStruct__MediaCompositing__MediaPlaneParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlaneParameters, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlaneParameters, TextureParameterName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlaneParameters, bFillScreen, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlaneParameters, UnknownData_VJYB, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlaneParameters, FillScreenAmount, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlaneParameters, FixedSize, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlaneParameters, UnknownData_ONWX, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlaneParameters, RenderTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlaneParameters, DynamicMaterial, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlaneParameters, 0x0038);
		}

		// struct FTagAndValue
		TEST_METHOD(ScriptStruct__AssetRegistry__TagAndValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTagAndValue, 0x0018);
		}

		// struct FAssetBundleEntry
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetBundleEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleScope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleAssets, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleEntry, 0x0028);
		}

		// struct FAssetBundleData
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetBundleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleData, Bundles, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleData, 0x0010);
		}

		// struct FAssetData
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, ObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackageName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackagePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, UnknownData_J6GI, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetData, 0x0050);
		}

		// struct FARFilter
		TEST_METHOD(ScriptStruct__AssetRegistry__ARFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackageNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackagePaths, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ObjectPaths, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ClassNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_J592, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, RecursiveClassesExclusionSet, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursivePaths, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursiveClasses, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bIncludeOnlyOnDiskAssets, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_CEI6, 0x00E3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARFilter, 0x00E8);
		}

		// struct FCustomMeshTriangle
		TEST_METHOD(ScriptStruct__CustomMeshComponent__CustomMeshTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex2, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomMeshTriangle, 0x0024);
		}

		// struct FNewDB_JSON
		TEST_METHOD(UserDefinedStruct__NewDB_JSON__NewDB_JSON)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_JSON, Key_2_BD758EC9444C8C7A7A088CBC187D6650, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNewDB_JSON, Value_4_D8E3C3FE44D868D100F5A6B6DC2B1680, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNewDB_JSON, 0x0020);
		}

		// struct FCv2_TurrelsStructure
		TEST_METHOD(UserDefinedStruct__Cv2_TurrelsStructure__Cv2_TurrelsStructure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_TurrelsStructure, Enum_2_AB24C150426EC63C76AC8B87C2EDA56B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_TurrelsStructure, WeaponEnum_42_E4F13E654444829AFD419B98A20B8661, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_TurrelsStructure, UnknownData_10LU, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_TurrelsStructure, SkeletalMesh_10_90EA74FC46BAADF1FA0AEDA7AC466A17, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_TurrelsStructure, Animator_39_4530EBF646208033877B71BBBC4C68AE, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_TurrelsStructure, FireMontage_45_33E98CC440C95D15DA96E48C4714F43D, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_TurrelsStructure, MinGunYaw_21_8EAFFC584476AF89149FE29533B9DD19, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_TurrelsStructure, MaxGunYaw_22_749560364CB5D06449A9EFB9476A25A1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_TurrelsStructure, MinGunPitch_26_6CAECD7F4A5BDF2B27528BA874308E11, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_TurrelsStructure, MaxGunPitch_25_78045CC749C01FF0B80968883BA4DBA3, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_TurrelsStructure, AmmoTypeItem_48_9DCF85C742ADEC5B9081B197A8299C8E, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_TurrelsStructure, UnknownData_8GXU, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_TurrelsStructure, DestructionMesh_61_859ABDB844975D78B271168874E0322B, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_TurrelsStructure, HitPoints_53_7079344547701212481E349BB12F2340, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_TurrelsStructure, BonusXP_57_0D892FDB4F2CBB118282A9B67C659456, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_TurrelsStructure, WinterTexture_60_7D6ABD404B2D6D8C46B5088481F05304, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCv2_TurrelsStructure, 0x0050);
		}

		// struct FMaterialQualityOverrides
		TEST_METHOD(ScriptStruct__MaterialShaderQualitySettings__MaterialQualityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bEnableOverride, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceFullyRough, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceNonMetal, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisableLMDirectionality, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceLQReflections, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, MobileCSMQuality, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialQualityOverrides, 0x0006);
		}

		// struct FZ_InformationScale
		TEST_METHOD(UserDefinedStruct__Z_InformationScale__Z_InformationScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_InformationScale, BaseScale_2_C29976A4405A12C94B32B881B69104AE, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_InformationScale, Rotation_6_A880464842FD8AB1FDB576899353593A, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FZ_InformationScale, 0x0010);
		}

		// struct FZ_ContainerInfo
		TEST_METHOD(UserDefinedStruct__Z_ContainerInfo__Z_ContainerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_ContainerInfo, Name_2_F9E357C14FB2C2888473ABAC8B27D589, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_ContainerInfo, Description_4_B371EC124F65273C844197B867B4A29B, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_ContainerInfo, IsBariga_7_9C00FDB8463864CE579DB1845940E81F, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_ContainerInfo, IsTradeToAll_9_BF4A4AC1452519553348B68324190974, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FZ_ContainerInfo, 0x0032);
		}

		// struct FZ_TransportLoot
		TEST_METHOD(UserDefinedStruct__Z_TransportLoot__Z_TransportLoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_TransportLoot, LootID_7_76B3DE754F6F48B0B4A538898CC29342, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_TransportLoot, LootCount_5_002737EC45898E3FDA197AA76C62C353, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_TransportLoot, AttachmentScope_10_D20414DB4F54E3C985110C8A81643E1E, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_TransportLoot, AttachmentSilencer_14_2EB77C43431ED56F333621AD0FDA1DCB, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FZ_TransportLoot, AttacmentMagazine_17_A2D373AE4E9A68E2C35A6DA04B442C59, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FZ_TransportLoot, 0x000F);
		}

		// struct FBPSteamGroupInfo
		TEST_METHOD(ScriptStruct__AdvancedSteamSessions__BPSteamGroupInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamGroupInfo, GroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamGroupInfo, GroupName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamGroupInfo, GroupTag, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamGroupInfo, numOnline, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamGroupInfo, numInGame, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamGroupInfo, numChatting, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamGroupInfo, UnknownData_3ZE2, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPSteamGroupInfo, 0x0050);
		}

		// struct FBPSteamWorkshopID
		TEST_METHOD(ScriptStruct__AdvancedSteamSessions__BPSteamWorkshopID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopID, UnknownData_GWQD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPSteamWorkshopID, 0x0008);
		}

		// struct FBPSteamWorkshopItemDetails
		TEST_METHOD(ScriptStruct__AdvancedSteamSessions__BPSteamWorkshopItemDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, ResultOfRequest, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, FileType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, UnknownData_08R4, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, CreatorAppID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, ConsumerAppID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, UnknownData_Q2VZ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, Title, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, Description, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, ItemUrl, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, VotesUp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, VotesDown, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, CalculatedScore, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, bBanned, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, bAcceptedForUse, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, bTagsTruncated, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, UnknownData_TK82, 0x004F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamWorkshopItemDetails, CreatorSteamID, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPSteamWorkshopItemDetails, 0x0060);
		}

		// struct FBPSteamGroupOfficer
		TEST_METHOD(ScriptStruct__AdvancedSteamSessions__BPSteamGroupOfficer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamGroupOfficer, OfficerUniqueNetID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamGroupOfficer, bIsOwner, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPSteamGroupOfficer, UnknownData_1884, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPSteamGroupOfficer, 0x0028);
		}

		// struct FCv3_PlayersSaveState
		TEST_METHOD(UserDefinedStruct__Cv3_PlayersSaveState__Cv3_PlayersSaveState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_PlayersSaveState, UniqID_13_C65681804B6DD1E0912B32983AEFF5FF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_PlayersSaveState, Level_14_D5A04A034EFE2C68294FFF906C9ADF22, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_PlayersSaveState, XP_15_EB34D965423553E1156234B2647CD474, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_PlayersSaveState, Kills_16_9BBB438F48552B19B5B293A55901B0E2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_PlayersSaveState, Deaths_17_294B7D5E4CB63794A838FDB96D7951D7, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCv3_PlayersSaveState, 0x0030);
		}

		// struct FTimeOfDayCurves
		TEST_METHOD(UserDefinedStruct__TimeOfDayCurves__TimeOfDayCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayCurves, SkyUpperColorCurve_14_F574B1FF4C660D607018378D4D29D5D8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayCurves, SkyLowerColorCurve_15_9AE60C56438D767F5189779E892918F6, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayCurves, CloudsUpperColorCurve_16_427730AB4B57918C2621AC9E42481B18, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayCurves, CloudsLowerColorCurve_17_8C51A73643E77F6D68DF0C9FB66307B7, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayCurves, CloudsBackgroundCurve_18_C26ACFC54FD13F33D88102AE41FC8C47, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayCurves, CloudsMultilayeredColorCurve_30_EE55225E47F0CD95AF3DED9A93746791, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayCurves, SunColorCurve_19_4127FF7441301541CCC14C97D84E54F5, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayCurves, MoonColorCurve_20_A8304BE24B8F8E787E683A8FEA4D486C, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayCurves, StarsColorCurve_22_5B3DF4A1431B005F9583B498B90E49FC, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayCurves, FogColorCurve_26_3CDDDC604F2BA0AD72A137903A4167F5, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeOfDayCurves, 0x0050);
		}

		// struct FSurv_Banner_Str
		TEST_METHOD(UserDefinedStruct__Surv_Banner_Str__Surv_Banner_Str)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurv_Banner_Str, Header_2_33E57AE048E31E1E53B7B1B8FBBE6D97, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurv_Banner_Str, InfoText_4_6BE25D754BDCB6E16E73D4A73685DC24, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurv_Banner_Str, Picture_7_0B75833944CC8ABAED1248B9976657F8, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurv_Banner_Str, WebRef_10_1241BC2A4BEC26315F8AAC9A515FE960, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSurv_Banner_Str, 0x0048);
		}

		// struct FJsonObjectWrapper
		TEST_METHOD(ScriptStruct__JsonUtilities__JsonObjectWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, JsonString, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, UnknownData_49UL, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJsonObjectWrapper, 0x0020);
		}

		// struct FSubmixEffectReverbSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Density, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Diffusion, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Gain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, GainHF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayHFRatio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsGain, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsDelay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateGain, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateDelay, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, AirAbsorptionGainHF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, WetLevel, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectReverbSettings, 0x0030);
		}

		// struct FSubmixEffectEQBand
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectEQBand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, UnknownData_AUYU, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectEQBand, 0x0010);
		}

		// struct FSubmixEffectSubmixEQSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectSubmixEQSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectSubmixEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectSubmixEQSettings, 0x0010);
		}

		// struct FSubmixEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicsProcessorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_9OLE, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LookAheadMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ThresholdDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, Ratio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, InputGainDb, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, OutputGainDb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_T5GD, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicsProcessorSettings, 0x0028);
		}

		// struct FCv4_DLC_LootStructure
		TEST_METHOD(UserDefinedStruct__Cv4_DLC_LootStructure__Cv4_DLC_LootStructure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv4_DLC_LootStructure, DLCID_7_6EBEB7A54D9D9B90EFEC44B38CDFBD74, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv4_DLC_LootStructure, UnknownData_TZEM, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv4_DLC_LootStructure, Loots_4_103B63CD4B7C37C397B727AB8CB1C625, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCv4_DLC_LootStructure, 0x0018);
		}

		// struct FGUI_KeyMappingStruct
		TEST_METHOD(UserDefinedStruct__GUI_KeyMappingStruct__GUI_KeyMappingStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_KeyMappingStruct, ActionName_3_2DB26674469114D632E087AF1BF2C22B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_KeyMappingStruct, IsAxis_6_FE2484BC40D70427B3497DAD8237C943, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_KeyMappingStruct, UnknownData_AY9V, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_KeyMappingStruct, ActionNameText_9_5F308609487F047BC0B3FEAB5884A5FC, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_KeyMappingStruct, DefaultKey_12_E7B9B4BE4F0E1F05B52921809A012A93, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_KeyMappingStruct, DefaultAzertyKey_14_CAC5D89A4A00D3FD2456538B16C7AD9D, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_KeyMappingStruct, ScaleIfAxis_17_E6F36EB04A9F353BC511EE9AF53CEE27, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGUI_KeyMappingStruct, 0x0054);
		}

		// struct FCv2_FacesStructure
		TEST_METHOD(UserDefinedStruct__Cv2_FacesStructure__Cv2_FacesStructure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_FacesStructure, FaceID_2_83ACBEAE4F0068A13829DC977C725B49, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_FacesStructure, UnknownData_FZ13, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv2_FacesStructure, Mesh_5_C86A8B3C45C46E3E3855249BD2307707, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCv2_FacesStructure, 0x0010);
		}

		// struct FARHitTestResult
		TEST_METHOD(ScriptStruct__AugmentedReality__ARHitTestResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARHitTestResult, Distance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARHitTestResult, UnknownData_FJ5W, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARHitTestResult, Transform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARHitTestResult, 0x0040);
		}

		// struct FStructSerializerNumericTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerNumericTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_QGOM, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int16, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int32, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int64, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt8, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_NOXG, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt16, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt32, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt64, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Float, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_CG0X, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Double, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerNumericTestStruct, 0x0030);
		}

		// struct FStructSerializerObjectTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerObjectTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Class, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ObjectPtr, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerObjectTestStruct, 0x0010);
		}

		// struct FStructSerializerArrayTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerArrayTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, Int32Array, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticSingleElement, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticInt32Array, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticFloatArray, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, UnknownData_2WQ4, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, VectorArray, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerArrayTestStruct, 0x0040);
		}

		// struct FStructSerializerBooleanTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBooleanTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolFalse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolTrue, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, UnknownData_576U, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, Bitfield, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBooleanTestStruct, 0x0008);
		}

		// struct FStructSerializerBuiltinTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBuiltinTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, String, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Rotator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_D30H, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Text, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Vector, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_GZ01, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBuiltinTestStruct, 0x0060);
		}

		// struct FStructSerializerMapTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerMapTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, IntToStr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToVec, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerMapTestStruct, 0x00F0);
		}

		// struct FStructSerializerTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Numerics, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Booleans, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Builtins, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Arrays, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Maps, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerTestStruct, 0x01D8);
		}

		// struct FCv3_SilencersStructure
		TEST_METHOD(UserDefinedStruct__Cv3_SilencersStructure__Cv3_SilencersStructure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_SilencersStructure, SilencerEnum_19_0B73B97644681018442E6C8B016AF3D5, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_SilencersStructure, UnknownData_WUDH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_SilencersStructure, TPSMesh_7_65B8F5BC499189DF693749B1FCB6737A, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_SilencersStructure, ShootSound_15_F2B4B7764C7E726C8511C4A3293F3FFC, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_SilencersStructure, NoFlash_18_4199CA514FC091524649FC9F5ED6465D, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCv3_SilencersStructure, 0x0019);
		}

		// struct FGUI_NetPair
		TEST_METHOD(UserDefinedStruct__GUI_NetPair__GUI_NetPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_NetPair, From_2_3EAB08864FE543AAD8CBD09569CB3B33, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_NetPair, To_4_46F834A34493F2941D6053B6B2086C5C, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGUI_NetPair, 0x0010);
		}

		// struct FCv4_StructureTrade
		TEST_METHOD(UserDefinedStruct__Cv4_StructureTrade__Cv4_StructureTrade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv4_StructureTrade, Name_19_2F5D05A64096803EF1D36DB995EAEE3A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv4_StructureTrade, Icon128x128_16_094547344C142CCA3AE62094662C6B97, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv4_StructureTrade, Foto256x256_17_315A86124B866EB3C3455481B236EB72, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv4_StructureTrade, LootArray_18_E706FA7B455F4949512855B45C84881F, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv4_StructureTrade, DLC_22_DD1D560D4FEFB2FE241BAA9C1DEBBD43, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv4_StructureTrade, isTradeToAll_24_A0F264D14B0EF666C30FF794A8EB357C, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCv4_StructureTrade, 0x003D);
		}

		// struct FSettingsStructure
		TEST_METHOD(UserDefinedStruct__SettingsStructure__SettingsStructure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettingsStructure, MasterVolume_2_BB87F76348C13B99EB67E08D2FF335A4, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettingsStructure, UnknownData_KZBU, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettingsStructure, Resolution_8_039F61594BBC42C60A7FA3933D498731, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettingsStructure, GraphicsMode_7_2424E1CC4A8CCF8EFB7C9087B5005824, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettingsStructure, MouseSense_11_ADB94E924C4E968C7E7BFE86CCBF3F87, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettingsStructure, MouseInversion_14_D34860324CAE706E25B3FF96B2566FE4, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettingsStructure, VSync_46_2567AEFD489503F4D7945FA47472B6E4, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettingsStructure, Windowed_18_B3A67DA24535A6729CB62B954B87F712, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettingsStructure, UnknownData_IUC3, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettingsStructure, PostProcess_27_6197300C40DBD00309F65D8B4ABEC373, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettingsStructure, ShadowQuality_28_B205CB344D17FF4017265C9D55ACA1E3, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettingsStructure, TextureQuality_29_3854C1B241C0CC7D7209EEB3CB0429C3, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettingsStructure, AntiAliasing_35_EACBBD7946B12E11F66BE09EE940B49F, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettingsStructure, ViewDistance_39_103675EA43AEAA878254FB97A05B3F1D, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettingsStructure, Effects_40_4464EE5142221DE017015D80157D4DF8, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettingsStructure, ResolutionScale_44_ADAC63184F8C8E0950F9CA89B8A0234D, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettingsStructure, Foliage_45_84F8FD064D77CB118F0BBFBA1814BC94, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettingsStructure, MusicVolume_49_FBE0766A4FB3E80C606DADB41F6EBA89, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettingsStructure, Brightness_52_3BE155B34BA187D76F374E95F8E04C39, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettingsStructure, FOV_56_7F0BED5F4605FD79FBDDEFB008C616BF, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSettingsStructure, FrameRate_59_FE30733745B44F8ECBB9568C42FC3310, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSettingsStructure, 0x0054);
		}

		// struct FGUI_Tutorial_Message
		TEST_METHOD(UserDefinedStruct__GUI_Tutorial_Message__GUI_Tutorial_Message)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_Tutorial_Message, Delay_2_146EC3F64DBDEF271D9AEF94F8225ED8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_Tutorial_Message, UnknownData_VSF5, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGUI_Tutorial_Message, Message_7_1D016FB84009959B57639EA65517C0EC, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGUI_Tutorial_Message, 0x0020);
		}

		// struct FSessionServiceLogSubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogSubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogSubscribe, UnknownData_NFDK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogSubscribe, 0x0001);
		}

		// struct FSessionServiceLog
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, TimeSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Verbosity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, UnknownData_WDZO, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLog, 0x0038);
		}

		// struct FSessionServicePing
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePing, UserName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePing, 0x0010);
		}

		// struct FSessionServiceLogUnsubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogUnsubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogUnsubscribe, UnknownData_E7SB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogUnsubscribe, 0x0001);
		}

		// struct FSessionServicePong
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Authorized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_ZUAU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, BuildDate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, DeviceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, IsConsoleBuild, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_2WOW, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, PlatformName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionId, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionOwner, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Standalone, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_K3NU, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePong, 0x0098);
		}

		// struct FProcMeshTangent
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, TangentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, bFlipTangentY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, UnknownData_18K5, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshTangent, 0x0010);
		}

		// struct FProcMeshVertex
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Tangent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Color, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV0, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshVertex, 0x0034);
		}

		// struct FProcMeshSection
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcVertexBuffer, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcIndexBuffer, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, SectionLocalBox, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bEnableCollision, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bSectionVisible, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, UnknownData_3JAY, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshSection, 0x0040);
		}

		// struct FCv3_HonorsStructure
		TEST_METHOD(UserDefinedStruct__Cv3_HonorsStructure__Cv3_HonorsStructure)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_HonorsStructure, HonorEnum_5_E7DE3C3146051C113FAE66A77AC19FAA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_HonorsStructure, UnknownData_P04A, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_HonorsStructure, Name_8_CCCDC93F4F9ED7649EB82C899D2FF982, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_HonorsStructure, Description_2_84475D724ADFC8271DC3CCA1916379DB, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_HonorsStructure, StaticMesh_11_666CB2934431C3A01825EDB51B41780A, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_HonorsStructure, IconHide_15_37165F5C4DA776CD579108AFEBA21195, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_HonorsStructure, IconNormal_17_B63309D841AB23820677C4827D1A240D, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_HonorsStructure, IconSelected_20_44065FC74FD18171125B85B38BD72A53, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_HonorsStructure, Nation_24_EA5D7B5E4E56A4A14EC396BED50B7E57, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_HonorsStructure, UnknownData_LLU3, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_HonorsStructure, Kills_27_C633AB9642365EBE659ED8930F613009, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_HonorsStructure, Headshots_29_51B6FEB04D7F7F14414F6EA4FB7D519F, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_HonorsStructure, DestroyTanks_31_8BA4DB5845DCC28B09E240A2BCA0D8C5, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_HonorsStructure, DestroyCars_33_D90B7B8341B1F69DAF68D38BCAED9304, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_HonorsStructure, CaptureTanks_35_9DEE6F7B4040F79661551E9E61310E5A, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_HonorsStructure, CaptureCars_37_8949A3994B3573EA547F9FA12150F563, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_HonorsStructure, CaptureTower_39_D184182E46E6CBF26A9CBD94526E45D3, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_HonorsStructure, Rank_49_751813C741683234A5B849B29F194647, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_HonorsStructure, Woodman_44_6C3D54504368C4108C8C0C852FFD8D14, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_HonorsStructure, CraftTent_46_DCCD1133426F36AD9F77228B601FEA50, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_HonorsStructure, CraftTanks_48_49FD54F046BF030E242BF2B4F7B021A3, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_HonorsStructure, KillinMelee_58_E3F1FFE147E8843F08A192871C06371B, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCv3_HonorsStructure, ParticipationinBattles_60_EACC1D6B48C6BBBAB036EC9A38E195DE, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCv3_HonorsStructure, 0x0090);
		}
	};
}
